
CE4951Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000413c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800441c  0800441c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004424  08004424  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800442c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001464  20000078  080044a4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014dc  080044a4  000214dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9d2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc4  00000000  00000000  0002da7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002fa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00030588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bd2  00000000  00000000  00030fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd4d  00000000  00000000  00053baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfe0e  00000000  00000000  000608f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130705  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  00130758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042f4 	.word	0x080042f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080042f4 	.word	0x080042f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <cq_init>:
/*
Initializes a circular queue and returns it
 @ param void
 @ return the initialized circular queue
*/
circular_queue cq_init( void ) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	6018      	str	r0, [r3, #0]

    // create a circular queue with default values
    circular_queue cq = {
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	4618      	mov	r0, r3
 80005ba:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80005be:	461a      	mov	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 fd97 	bl	80030f4 <memset>
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2201      	movs	r2, #1
 80005cc:	609a      	str	r2, [r3, #8]
            .isempty = DEFAULT_ISEMPTY,
            .isfull = DEFAULT_ISFULL
    };

    // return the circular queue
    return cq;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	4610      	mov	r0, r2
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80005de:	461a      	mov	r2, r3
 80005e0:	f002 fd7a 	bl	80030d8 <memcpy>
}
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	f607 0718 	addw	r7, r7, #2072	; 0x818
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <cq_push>:
Pushes an element into the circular queue
@ param cq - the circular queue to push into
@ param c - the character to push into the queue
@ return void
*/
void cq_push( circular_queue * cq, char c ) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]

    // push the character into the queue then increment the pusher
    cq->buffer[(cq->pusher)++] = c;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1c59      	adds	r1, r3, #1
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	6011      	str	r1, [r2, #0]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	78fa      	ldrb	r2, [r7, #3]
 800060c:	741a      	strb	r2, [r3, #16]

    // if the pusher passes the end of the buffer, put it back at the start of the buffer
    if ( cq->pusher == CIRCULAR_QUEUE_SIZE ) cq->pusher = 0;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000616:	d102      	bne.n	800061e <cq_push+0x2e>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]

    // set the full flag if the pusher moves to the same position as the puller
    cq->isfull = ( cq->pusher == cq->puller );
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	429a      	cmp	r2, r3
 8000628:	bf0c      	ite	eq
 800062a:	2301      	moveq	r3, #1
 800062c:	2300      	movne	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60da      	str	r2, [r3, #12]

    // clear the empty flag
    cq->isempty = 0;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <cq_pull>:
/*
Pulls the next element from the circular queue
@ param cq - the circular queue to pull from
@ return the character from the queue
*/
char cq_pull( circular_queue * cq ) {
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

    // pull the character out of the queue and increment the puller
    char c = cq->buffer[(cq->puller)++];
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	1c59      	adds	r1, r3, #1
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	6051      	str	r1, [r2, #4]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	7c1b      	ldrb	r3, [r3, #16]
 8000660:	73fb      	strb	r3, [r7, #15]

    // if the pusher passes the end of the buffer, put it back at the start of the buffer
    if ( cq->puller == CIRCULAR_QUEUE_SIZE ) cq->puller = 0;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800066a:	d102      	bne.n	8000672 <cq_pull+0x2a>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]

    // set the empty flag if the puller moves to the same position as the pusher
    cq->isempty = ( cq->puller == cq->pusher );
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	429a      	cmp	r2, r3
 800067c:	bf0c      	ite	eq
 800067e:	2301      	moveq	r3, #1
 8000680:	2300      	movne	r3, #0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	609a      	str	r2, [r3, #8]

    // clear the full flag
    cq->isfull = 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]

    // return the character
    return c;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <cq_isempty>:
/*
Determines whether a circular queue is empty or not
@ param cq - the circular queue to analyze
@ return 1 if the circular queue is empty, 0 otherwise
*/
int cq_isempty( circular_queue * cq ) {
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
    return cq->isempty;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	689b      	ldr	r3, [r3, #8]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <cq_isfull>:
/*
Determines whether a circular queue is full or not
@ param cq - the circular queue to analyze
@ return 1 if the circular queue is full, 0 otherwise
*/
int cq_isfull( circular_queue * cq ) {
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
    return cq->isfull;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68db      	ldr	r3, [r3, #12]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a25      	ldr	r2, [pc, #148]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d13c      	bne.n	800075c <HAL_TIM_PeriodElapsedCallback+0x8c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e8:	4823      	ldr	r0, [pc, #140]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006ea:	f001 fb37 	bl	8001d5c <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	4822      	ldr	r0, [pc, #136]	; (800077c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80006f4:	f001 fb1a 	bl	8001d2c <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d115      	bne.n	800072a <HAL_TIM_PeriodElapsedCallback+0x5a>
			currentState = COLLISION;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000700:	2202      	movs	r2, #2
 8000702:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070a:	481b      	ldr	r0, [pc, #108]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800070c:	f001 fb26 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000716:	4818      	ldr	r0, [pc, #96]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000718:	f001 fb20 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000722:	4815      	ldr	r0, [pc, #84]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000724:	f001 fb1a 	bl	8001d5c <HAL_GPIO_WritePin>
		}
	}
	else if (htim->Instance == TIM8){
		wait_trans = 0;
	}
}
 8000728:	e020      	b.n	800076c <HAL_TIM_PeriodElapsedCallback+0x9c>
			currentState = IDLE;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
			firstEdge = 1;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073c:	480e      	ldr	r0, [pc, #56]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800073e:	f001 fb0d 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800074a:	f001 fb07 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000756:	f001 fb01 	bl	8001d5c <HAL_GPIO_WritePin>
}
 800075a:	e007      	b.n	800076c <HAL_TIM_PeriodElapsedCallback+0x9c>
	else if (htim->Instance == TIM8){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a09      	ldr	r2, [pc, #36]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d102      	bne.n	800076c <HAL_TIM_PeriodElapsedCallback+0x9c>
		wait_trans = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010000 	.word	0x40010000
 8000778:	40020400 	.word	0x40020400
 800077c:	40020800 	.word	0x40020800
 8000780:	2000130c 	.word	0x2000130c
 8000784:	20000000 	.word	0x20000000
 8000788:	40010400 	.word	0x40010400
 800078c:	200014c4 	.word	0x200014c4

08000790 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9){
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007a0:	d16f      	bne.n	8000882 <HAL_GPIO_EXTI_Callback+0xf2>
		if(firstEdge)
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <HAL_GPIO_EXTI_Callback+0xfc>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d01a      	beq.n	80007e0 <HAL_GPIO_EXTI_Callback+0x50>
		{
			TIM2->CNT = 0;
 80007aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
			firstEdge = 0;
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <HAL_GPIO_EXTI_Callback+0xfc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
			// Read logic-0
			receiveBuffer[byteCount] |= 0b0<<bitCount++;
 80007b8:	4b35      	ldr	r3, [pc, #212]	; (8000890 <HAL_GPIO_EXTI_Callback+0x100>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a34      	ldr	r2, [pc, #208]	; (8000890 <HAL_GPIO_EXTI_Callback+0x100>)
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	2100      	movs	r1, #0
 80007c4:	4b33      	ldr	r3, [pc, #204]	; (8000894 <HAL_GPIO_EXTI_Callback+0x104>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a33      	ldr	r2, [pc, #204]	; (8000898 <HAL_GPIO_EXTI_Callback+0x108>)
 80007ca:	5cd3      	ldrb	r3, [r2, r3]
 80007cc:	b25a      	sxtb	r2, r3
 80007ce:	b24b      	sxtb	r3, r1
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <HAL_GPIO_EXTI_Callback+0x104>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	b2d1      	uxtb	r1, r2
 80007da:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <HAL_GPIO_EXTI_Callback+0x108>)
 80007dc:	54d1      	strb	r1, [r2, r3]
 80007de:	e038      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0xc2>
		}
		else
		{
			if(TIM2->CNT > 600) // This is a clock synchronization edge
 80007e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80007ea:	d932      	bls.n	8000852 <HAL_GPIO_EXTI_Callback+0xc2>
			{
				TIM2->CNT = 0;
 80007ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
				// Read bit
				uint8_t value = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80007f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f8:	4828      	ldr	r0, [pc, #160]	; (800089c <HAL_GPIO_EXTI_Callback+0x10c>)
 80007fa:	f001 fa97 	bl	8001d2c <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]
				receiveBuffer[byteCount] |= value<<bitCount++;
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_GPIO_EXTI_Callback+0x100>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	1c59      	adds	r1, r3, #1
 800080a:	4821      	ldr	r0, [pc, #132]	; (8000890 <HAL_GPIO_EXTI_Callback+0x100>)
 800080c:	6001      	str	r1, [r0, #0]
 800080e:	fa02 f103 	lsl.w	r1, r2, r3
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <HAL_GPIO_EXTI_Callback+0x104>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <HAL_GPIO_EXTI_Callback+0x108>)
 8000818:	5cd3      	ldrb	r3, [r2, r3]
 800081a:	b25a      	sxtb	r2, r3
 800081c:	b24b      	sxtb	r3, r1
 800081e:	4313      	orrs	r3, r2
 8000820:	b25a      	sxtb	r2, r3
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <HAL_GPIO_EXTI_Callback+0x104>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	b2d1      	uxtb	r1, r2
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <HAL_GPIO_EXTI_Callback+0x108>)
 800082a:	54d1      	strb	r1, [r2, r3]
				if(bitCount == 8)
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_GPIO_EXTI_Callback+0x100>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b08      	cmp	r3, #8
 8000832:	d107      	bne.n	8000844 <HAL_GPIO_EXTI_Callback+0xb4>
				{
					byteCount++;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_GPIO_EXTI_Callback+0x104>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <HAL_GPIO_EXTI_Callback+0x104>)
 800083c:	6013      	str	r3, [r2, #0]
					bitCount = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_GPIO_EXTI_Callback+0x100>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
				}
				if(byteCount == 30)
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_GPIO_EXTI_Callback+0x104>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b1e      	cmp	r3, #30
 800084a:	d102      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0xc2>
					byteCount = 0;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_GPIO_EXTI_Callback+0x104>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
			}

		}
		currentState = BUSY;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x110>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x114>)
 8000860:	f001 fa7c 	bl	8001d5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086a:	480e      	ldr	r0, [pc, #56]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x114>)
 800086c:	f001 fa76 	bl	8001d5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x114>)
 8000878:	f001 fa70 	bl	8001d5c <HAL_GPIO_WritePin>
		TIM1->CNT = 0;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x118>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24

	}
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000
 8000890:	20000004 	.word	0x20000004
 8000894:	20000094 	.word	0x20000094
 8000898:	200014a4 	.word	0x200014a4
 800089c:	40020800 	.word	0x40020800
 80008a0:	2000130c 	.word	0x2000130c
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40010000 	.word	0x40010000

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008b0:	b0a0      	sub	sp, #128	; 0x80
 80008b2:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 ff22 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 fa9c 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f000 fbf2 	bl	80010a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008c0:	f000 fb04 	bl	8000ecc <MX_TIM1_Init>
  MX_TIM8_Init();
 80008c4:	f000 fb9e 	bl	8001004 <MX_TIM8_Init>
  MX_TIM2_Init();
 80008c8:	f000 fb50 	bl	8000f6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80008cc:	48b1      	ldr	r0, [pc, #708]	; (8000b94 <main+0x2e8>)
 80008ce:	f001 ffa7 	bl	8002820 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80008d2:	48b1      	ldr	r0, [pc, #708]	; (8000b98 <main+0x2ec>)
 80008d4:	f001 ffa4 	bl	8002820 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80008d8:	48b0      	ldr	r0, [pc, #704]	; (8000b9c <main+0x2f0>)
 80008da:	f001 ffa1 	bl	8002820 <HAL_TIM_Base_Start_IT>

  uart_init(57600,F_CPU);
 80008de:	49b0      	ldr	r1, [pc, #704]	; (8000ba0 <main+0x2f4>)
 80008e0:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 80008e4:	f000 fd9a 	bl	800141c <uart_init>
  printf("Hello\n");
 80008e8:	48ae      	ldr	r0, [pc, #696]	; (8000ba4 <main+0x2f8>)
 80008ea:	f002 fca7 	bl	800323c <puts>

  uint8_t endTransmitData = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  int readCount = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
LOOP_START:
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fe:	48aa      	ldr	r0, [pc, #680]	; (8000ba8 <main+0x2fc>)
 8000900:	f001 fa2c 	bl	8001d5c <HAL_GPIO_WritePin>

	  //int readCount = scanf("%s",buffer);
	  char c;

	  if(!uart_isempty())
 8000904:	f000 fe6e 	bl	80015e4 <uart_isempty>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d118      	bne.n	8000940 <main+0x94>
	  {
		  c = uart_getc();
 800090e:	f000 fe73 	bl	80015f8 <uart_getc>
 8000912:	4603      	mov	r3, r0
 8000914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  if(c == '\r')
 8000918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800091c:	2b0d      	cmp	r3, #13
 800091e:	d108      	bne.n	8000932 <main+0x86>
		  {
			  endTransmitData = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  buffer[readCount] = 0;
 8000926:	4aa1      	ldr	r2, [pc, #644]	; (8000bac <main+0x300>)
 8000928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800092a:	4413      	add	r3, r2
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e006      	b.n	8000940 <main+0x94>
		  }
		  else
		  {
			  buffer[readCount++] = c;
 8000932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	643a      	str	r2, [r7, #64]	; 0x40
 8000938:	499c      	ldr	r1, [pc, #624]	; (8000bac <main+0x300>)
 800093a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800093e:	54ca      	strb	r2, [r1, r3]
		  }
	  }
	  //int readCount = 1;
	  //buffer[0] = 0xFF;
	  //buffer[1] = 0x00;
	  int length = readCount;
 8000940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000942:	623b      	str	r3, [r7, #32]
	  //send data
	  if (endTransmitData){
 8000944:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 821d 	beq.w	8000d88 <main+0x4dc>
		  endTransmitData = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  readCount = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
		  printf("read count: %d, buffer: %s\n", length, buffer);
 8000958:	4a94      	ldr	r2, [pc, #592]	; (8000bac <main+0x300>)
 800095a:	6a39      	ldr	r1, [r7, #32]
 800095c:	4894      	ldr	r0, [pc, #592]	; (8000bb0 <main+0x304>)
 800095e:	f002 fbd1 	bl	8003104 <iprintf>
		  for (int i = 0; i < length;i++){
 8000962:	2300      	movs	r3, #0
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000966:	e0a9      	b.n	8000abc <main+0x210>
			  printf("Buffer:"BYTE_TO_BINARY_PATTERN "\n",BYTE_TO_BINARY(*(buffer+i)));
 8000968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800096a:	4a90      	ldr	r2, [pc, #576]	; (8000bac <main+0x300>)
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b25b      	sxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	da01      	bge.n	800097a <main+0xce>
 8000976:	2531      	movs	r5, #49	; 0x31
 8000978:	e000      	b.n	800097c <main+0xd0>
 800097a:	2530      	movs	r5, #48	; 0x30
 800097c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800097e:	4a8b      	ldr	r2, [pc, #556]	; (8000bac <main+0x300>)
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <main+0xe4>
 800098c:	2631      	movs	r6, #49	; 0x31
 800098e:	e000      	b.n	8000992 <main+0xe6>
 8000990:	2630      	movs	r6, #48	; 0x30
 8000992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000994:	4a85      	ldr	r2, [pc, #532]	; (8000bac <main+0x300>)
 8000996:	4413      	add	r3, r2
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <main+0xfc>
 80009a2:	f04f 0c31 	mov.w	ip, #49	; 0x31
 80009a6:	e001      	b.n	80009ac <main+0x100>
 80009a8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80009ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ae:	4a7f      	ldr	r2, [pc, #508]	; (8000bac <main+0x300>)
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	f003 0310 	and.w	r3, r3, #16
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <main+0x116>
 80009bc:	2331      	movs	r3, #49	; 0x31
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	e001      	b.n	80009c6 <main+0x11a>
 80009c2:	2330      	movs	r3, #48	; 0x30
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009c8:	4978      	ldr	r1, [pc, #480]	; (8000bac <main+0x300>)
 80009ca:	440a      	add	r2, r1
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	f002 0208 	and.w	r2, r2, #8
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d001      	beq.n	80009da <main+0x12e>
 80009d6:	2231      	movs	r2, #49	; 0x31
 80009d8:	e000      	b.n	80009dc <main+0x130>
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80009de:	4873      	ldr	r0, [pc, #460]	; (8000bac <main+0x300>)
 80009e0:	4401      	add	r1, r0
 80009e2:	7809      	ldrb	r1, [r1, #0]
 80009e4:	f001 0104 	and.w	r1, r1, #4
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d001      	beq.n	80009f0 <main+0x144>
 80009ec:	2131      	movs	r1, #49	; 0x31
 80009ee:	e000      	b.n	80009f2 <main+0x146>
 80009f0:	2130      	movs	r1, #48	; 0x30
 80009f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80009f4:	4c6d      	ldr	r4, [pc, #436]	; (8000bac <main+0x300>)
 80009f6:	4420      	add	r0, r4
 80009f8:	7800      	ldrb	r0, [r0, #0]
 80009fa:	f000 0002 	and.w	r0, r0, #2
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d001      	beq.n	8000a06 <main+0x15a>
 8000a02:	2031      	movs	r0, #49	; 0x31
 8000a04:	e000      	b.n	8000a08 <main+0x15c>
 8000a06:	2030      	movs	r0, #48	; 0x30
 8000a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a0a:	4c68      	ldr	r4, [pc, #416]	; (8000bac <main+0x300>)
 8000a0c:	4423      	add	r3, r4
 8000a0e:	461c      	mov	r4, r3
 8000a10:	7824      	ldrb	r4, [r4, #0]
 8000a12:	f004 0401 	and.w	r4, r4, #1
 8000a16:	2c00      	cmp	r4, #0
 8000a18:	d001      	beq.n	8000a1e <main+0x172>
 8000a1a:	2431      	movs	r4, #49	; 0x31
 8000a1c:	e000      	b.n	8000a20 <main+0x174>
 8000a1e:	2430      	movs	r4, #48	; 0x30
 8000a20:	9404      	str	r4, [sp, #16]
 8000a22:	9003      	str	r0, [sp, #12]
 8000a24:	9102      	str	r1, [sp, #8]
 8000a26:	9201      	str	r2, [sp, #4]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	4632      	mov	r2, r6
 8000a30:	4629      	mov	r1, r5
 8000a32:	4860      	ldr	r0, [pc, #384]	; (8000bb4 <main+0x308>)
 8000a34:	f002 fb66 	bl	8003104 <iprintf>
			  output[i] = 0;
 8000a38:	4a5f      	ldr	r2, [pc, #380]	; (8000bb8 <main+0x30c>)
 8000a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for (int j = 0; j < 8; j++){
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a46:	e033      	b.n	8000ab0 <main+0x204>
				  if (buffer[i] & 0b1<<j)
 8000a48:	4a58      	ldr	r2, [pc, #352]	; (8000bac <main+0x300>)
 8000a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a54:	fa42 f303 	asr.w	r3, r2, r3
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d012      	beq.n	8000a86 <main+0x1da>
					  output[i] |= 0b01<<((j*2));
 8000a60:	4a55      	ldr	r2, [pc, #340]	; (8000bb8 <main+0x30c>)
 8000a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2101      	movs	r1, #1
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	b299      	uxth	r1, r3
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <main+0x30c>)
 8000a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a84:	e011      	b.n	8000aaa <main+0x1fe>
				  else
					  output[i] |= 0b10<<((j*2));
 8000a86:	4a4c      	ldr	r2, [pc, #304]	; (8000bb8 <main+0x30c>)
 8000a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	b299      	uxth	r1, r3
 8000aa2:	4a45      	ldr	r2, [pc, #276]	; (8000bb8 <main+0x30c>)
 8000aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for (int j = 0; j < 8; j++){
 8000aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aac:	3301      	adds	r3, #1
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	ddc8      	ble.n	8000a48 <main+0x19c>
		  for (int i = 0; i < length;i++){
 8000ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ab8:	3301      	adds	r3, #1
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	f6ff af51 	blt.w	8000968 <main+0xbc>

			  }
		  }
		  for (int i = 0; i < length;i++){
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8000aca:	e105      	b.n	8000cd8 <main+0x42c>
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000acc:	4a3a      	ldr	r2, [pc, #232]	; (8000bb8 <main+0x30c>)
 8000ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <main+0x23a>
 8000ae0:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8000ae4:	e001      	b.n	8000aea <main+0x23e>
 8000ae6:	f04f 0c30 	mov.w	ip, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000aea:	4a33      	ldr	r2, [pc, #204]	; (8000bb8 <main+0x30c>)
 8000aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <main+0x258>
 8000afe:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8000b02:	e001      	b.n	8000b08 <main+0x25c>
 8000b04:	f04f 0e30 	mov.w	lr, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000b08:	4a2b      	ldr	r2, [pc, #172]	; (8000bb8 <main+0x30c>)
 8000b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	f003 0320 	and.w	r3, r3, #32
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <main+0x276>
 8000b1c:	f04f 0831 	mov.w	r8, #49	; 0x31
 8000b20:	e001      	b.n	8000b26 <main+0x27a>
 8000b22:	f04f 0830 	mov.w	r8, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000b26:	4a24      	ldr	r2, [pc, #144]	; (8000bb8 <main+0x30c>)
 8000b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	f003 0310 	and.w	r3, r3, #16
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <main+0x292>
 8000b3a:	2531      	movs	r5, #49	; 0x31
 8000b3c:	e000      	b.n	8000b40 <main+0x294>
 8000b3e:	2530      	movs	r5, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <main+0x30c>)
 8000b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f003 0308 	and.w	r3, r3, #8
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <main+0x2ac>
 8000b54:	2631      	movs	r6, #49	; 0x31
 8000b56:	e000      	b.n	8000b5a <main+0x2ae>
 8000b58:	2630      	movs	r6, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <main+0x30c>)
 8000b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	f003 0304 	and.w	r3, r3, #4
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <main+0x2c8>
 8000b6e:	2331      	movs	r3, #49	; 0x31
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	e001      	b.n	8000b78 <main+0x2cc>
 8000b74:	2330      	movs	r3, #48	; 0x30
 8000b76:	61fb      	str	r3, [r7, #28]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <main+0x30c>)
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f003 0302 	and.w	r3, r3, #2
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d017      	beq.n	8000bbc <main+0x310>
 8000b8c:	2331      	movs	r3, #49	; 0x31
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	e016      	b.n	8000bc0 <main+0x314>
 8000b92:	bf00      	nop
 8000b94:	20001410 	.word	0x20001410
 8000b98:	200010c4 	.word	0x200010c4
 8000b9c:	20001458 	.word	0x20001458
 8000ba0:	0280de80 	.word	0x0280de80
 8000ba4:	0800430c 	.word	0x0800430c
 8000ba8:	40020800 	.word	0x40020800
 8000bac:	20001310 	.word	0x20001310
 8000bb0:	08004314 	.word	0x08004314
 8000bb4:	08004330 	.word	0x08004330
 8000bb8:	2000110c 	.word	0x2000110c
 8000bbc:	2330      	movs	r3, #48	; 0x30
 8000bbe:	61bb      	str	r3, [r7, #24]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000bc0:	4a83      	ldr	r2, [pc, #524]	; (8000dd0 <main+0x524>)
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	f003 0301 	and.w	r3, r3, #1
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <main+0x32e>
 8000bd4:	2331      	movs	r3, #49	; 0x31
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e001      	b.n	8000bde <main+0x332>
 8000bda:	2330      	movs	r3, #48	; 0x30
 8000bdc:	617b      	str	r3, [r7, #20]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000bde:	4a7c      	ldr	r2, [pc, #496]	; (8000dd0 <main+0x524>)
 8000be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <main+0x348>
 8000bee:	2331      	movs	r3, #49	; 0x31
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	e001      	b.n	8000bf8 <main+0x34c>
 8000bf4:	2330      	movs	r3, #48	; 0x30
 8000bf6:	613b      	str	r3, [r7, #16]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000bf8:	4a75      	ldr	r2, [pc, #468]	; (8000dd0 <main+0x524>)
 8000bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <main+0x362>
 8000c08:	2331      	movs	r3, #49	; 0x31
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	e001      	b.n	8000c12 <main+0x366>
 8000c0e:	2330      	movs	r3, #48	; 0x30
 8000c10:	60fb      	str	r3, [r7, #12]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000c12:	4a6f      	ldr	r2, [pc, #444]	; (8000dd0 <main+0x524>)
 8000c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c1a:	f003 0320 	and.w	r3, r3, #32
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <main+0x37c>
 8000c22:	2331      	movs	r3, #49	; 0x31
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	e001      	b.n	8000c2c <main+0x380>
 8000c28:	2330      	movs	r3, #48	; 0x30
 8000c2a:	60bb      	str	r3, [r7, #8]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000c2c:	4a68      	ldr	r2, [pc, #416]	; (8000dd0 <main+0x524>)
 8000c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c34:	f003 0310 	and.w	r3, r3, #16
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <main+0x396>
 8000c3c:	2331      	movs	r3, #49	; 0x31
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	e001      	b.n	8000c46 <main+0x39a>
 8000c42:	2330      	movs	r3, #48	; 0x30
 8000c44:	607b      	str	r3, [r7, #4]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000c46:	4a62      	ldr	r2, [pc, #392]	; (8000dd0 <main+0x524>)
 8000c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c4e:	f003 0308 	and.w	r3, r3, #8
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <main+0x3ae>
 8000c56:	2431      	movs	r4, #49	; 0x31
 8000c58:	e000      	b.n	8000c5c <main+0x3b0>
 8000c5a:	2430      	movs	r4, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000c5c:	4a5c      	ldr	r2, [pc, #368]	; (8000dd0 <main+0x524>)
 8000c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c64:	f003 0304 	and.w	r3, r3, #4
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <main+0x3c4>
 8000c6c:	2031      	movs	r0, #49	; 0x31
 8000c6e:	e000      	b.n	8000c72 <main+0x3c6>
 8000c70:	2030      	movs	r0, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000c72:	4a57      	ldr	r2, [pc, #348]	; (8000dd0 <main+0x524>)
 8000c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <main+0x3da>
 8000c82:	2131      	movs	r1, #49	; 0x31
 8000c84:	e000      	b.n	8000c88 <main+0x3dc>
 8000c86:	2130      	movs	r1, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000c88:	4a51      	ldr	r2, [pc, #324]	; (8000dd0 <main+0x524>)
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c90:	f003 0301 	and.w	r3, r3, #1
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <main+0x3f0>
 8000c98:	2331      	movs	r3, #49	; 0x31
 8000c9a:	e000      	b.n	8000c9e <main+0x3f2>
 8000c9c:	2330      	movs	r3, #48	; 0x30
 8000c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8000ca0:	910b      	str	r1, [sp, #44]	; 0x2c
 8000ca2:	900a      	str	r0, [sp, #40]	; 0x28
 8000ca4:	9409      	str	r4, [sp, #36]	; 0x24
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	9308      	str	r3, [sp, #32]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	9307      	str	r3, [sp, #28]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	9306      	str	r3, [sp, #24]
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	9305      	str	r3, [sp, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	9304      	str	r3, [sp, #16]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	9303      	str	r3, [sp, #12]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	9302      	str	r3, [sp, #8]
 8000cc2:	9601      	str	r6, [sp, #4]
 8000cc4:	9500      	str	r5, [sp, #0]
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	4672      	mov	r2, lr
 8000cca:	4661      	mov	r1, ip
 8000ccc:	4841      	ldr	r0, [pc, #260]	; (8000dd4 <main+0x528>)
 8000cce:	f002 fa19 	bl	8003104 <iprintf>
		  for (int i = 0; i < length;i++){
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8000cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f6ff aef5 	blt.w	8000acc <main+0x220>
		  }
		  while (currentState == COLLISION || currentState == BUSY);
 8000ce2:	bf00      	nop
 8000ce4:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <main+0x52c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d0fb      	beq.n	8000ce4 <main+0x438>
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <main+0x52c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f7      	beq.n	8000ce4 <main+0x438>
		  currentState = BUSY;
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <main+0x52c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d00:	4836      	ldr	r0, [pc, #216]	; (8000ddc <main+0x530>)
 8000d02:	f001 f82b 	bl	8001d5c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0c:	4833      	ldr	r0, [pc, #204]	; (8000ddc <main+0x530>)
 8000d0e:	f001 f825 	bl	8001d5c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	4830      	ldr	r0, [pc, #192]	; (8000ddc <main+0x530>)
 8000d1a:	f001 f81f 	bl	8001d5c <HAL_GPIO_WritePin>
			  for (int i = 0; i < length;i++){
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
 8000d22:	e02d      	b.n	8000d80 <main+0x4d4>
				  for (int j = 15; j >= 0; j--){
 8000d24:	230f      	movs	r3, #15
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d28:	e024      	b.n	8000d74 <main+0x4c8>
					  if (currentState == COLLISION)
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <main+0x52c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d100      	bne.n	8000d34 <main+0x488>
						  goto LOOP_START;
 8000d32:	e5e1      	b.n	80008f8 <main+0x4c>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, (output[i] & 1<<j)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <main+0x524>)
 8000d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d40:	fa42 f303 	asr.w	r3, r2, r3
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d52:	4823      	ldr	r0, [pc, #140]	; (8000de0 <main+0x534>)
 8000d54:	f001 f802 	bl	8001d5c <HAL_GPIO_WritePin>
					  TIM1->CNT = 0;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <main+0x538>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
					  DELAY_500MS
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <main+0x53c>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	bf00      	nop
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <main+0x53c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d0fb      	beq.n	8000d66 <main+0x4ba>
				  for (int j = 15; j >= 0; j--){
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	3b01      	subs	r3, #1
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	dad7      	bge.n	8000d2a <main+0x47e>
			  for (int i = 0; i < length;i++){
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8000d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbcd      	blt.n	8000d24 <main+0x478>
//		  printf("bits To Send: %d \n", output_L);

	  }

	  // Print received message
	  if(byteCount && currentState != BUSY)
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <main+0x540>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f43f adb3 	beq.w	80008f8 <main+0x4c>
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <main+0x52c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f43f adae 	beq.w	80008f8 <main+0x4c>
	  {
		  for(int i = 0; i < byteCount; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000da0:	e009      	b.n	8000db6 <main+0x50a>
		  {
			  printf("%c", receiveBuffer[i]);
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <main+0x544>)
 8000da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 f9c2 	bl	8003134 <putchar>
		  for(int i = 0; i < byteCount; i++)
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	3301      	adds	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <main+0x540>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d3f0      	bcc.n	8000da2 <main+0x4f6>
		  }
		  printf("\n");
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f002 f9b7 	bl	8003134 <putchar>
		  byteCount = 0;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <main+0x540>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
  {
 8000dcc:	e594      	b.n	80008f8 <main+0x4c>
 8000dce:	bf00      	nop
 8000dd0:	2000110c 	.word	0x2000110c
 8000dd4:	0800434c 	.word	0x0800434c
 8000dd8:	2000130c 	.word	0x2000130c
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40010000 	.word	0x40010000
 8000de8:	200014c4 	.word	0x200014c4
 8000dec:	20000094 	.word	0x20000094
 8000df0:	200014a4 	.word	0x200014a4

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2234      	movs	r2, #52	; 0x34
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 f976 	bl	80030f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <SystemClock_Config+0xd4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <SystemClock_Config+0xd4>)
 8000e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <SystemClock_Config+0xd4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e64:	2308      	movs	r3, #8
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e68:	23a8      	movs	r3, #168	; 0xa8
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 f9e1 	bl	8002244 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e88:	f000 f97e 	bl	8001188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 ff88 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eb6:	f000 f967 	bl	8001188 <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	; 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <MX_TIM1_Init+0x9c>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 153;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000ef0:	2299      	movs	r2, #153	; 0x99
 8000ef2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1099;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000efc:	f240 424b 	movw	r2, #1099	; 0x44b
 8000f00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f14:	4813      	ldr	r0, [pc, #76]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000f16:	f001 fc33 	bl	8002780 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f20:	f000 f932 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000f32:	f001 fded 	bl	8002b10 <HAL_TIM_ConfigClockSource>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f3c:	f000 f924 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_TIM1_Init+0x98>)
 8000f4e:	f002 f809 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f58:	f000 f916 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20001410 	.word	0x20001410
 8000f68:	40010000 	.word	0x40010000

08000f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 153;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f92:	2299      	movs	r2, #153	; 0x99
 8000f94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1100;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f9e:	f240 424c 	movw	r2, #1100	; 0x44c
 8000fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fb2:	f001 fbe5 	bl	8002780 <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fbc:	f000 f8e4 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fce:	f001 fd9f 	bl	8002b10 <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f000 f8d6 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fea:	f001 ffbb 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f000 f8c8 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20001458 	.word	0x20001458

08001004 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_TIM8_Init+0x98>)
 8001022:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <MX_TIM8_Init+0x9c>)
 8001024:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 153;
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_TIM8_Init+0x98>)
 8001028:	2299      	movs	r2, #153	; 0x99
 800102a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_TIM8_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_TIM8_Init+0x98>)
 8001034:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001038:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_TIM8_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_TIM8_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_TIM8_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800104c:	4813      	ldr	r0, [pc, #76]	; (800109c <MX_TIM8_Init+0x98>)
 800104e:	f001 fb97 	bl	8002780 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001058:	f000 f896 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_TIM8_Init+0x98>)
 800106a:	f001 fd51 	bl	8002b10 <HAL_TIM_ConfigClockSource>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001074:	f000 f888 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_TIM8_Init+0x98>)
 8001086:	f001 ff6d 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001090:	f000 f87a 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200010c4 	.word	0x200010c4
 80010a0:	40010400 	.word	0x40010400

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <MX_GPIO_Init+0xd8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a2e      	ldr	r2, [pc, #184]	; (800117c <MX_GPIO_Init+0xd8>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b2c      	ldr	r3, [pc, #176]	; (800117c <MX_GPIO_Init+0xd8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <MX_GPIO_Init+0xd8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <MX_GPIO_Init+0xd8>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <MX_GPIO_Init+0xd8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010f8:	4821      	ldr	r0, [pc, #132]	; (8001180 <MX_GPIO_Init+0xdc>)
 80010fa:	f000 fe2f 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001104:	481f      	ldr	r0, [pc, #124]	; (8001184 <MX_GPIO_Init+0xe0>)
 8001106:	f000 fe29 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800110a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	4817      	ldr	r0, [pc, #92]	; (8001180 <MX_GPIO_Init+0xdc>)
 8001124:	f000 fc6e 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4619      	mov	r1, r3
 8001140:	4810      	ldr	r0, [pc, #64]	; (8001184 <MX_GPIO_Init+0xe0>)
 8001142:	f000 fc5f 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800114c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001152:	2302      	movs	r3, #2
 8001154:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <MX_GPIO_Init+0xe0>)
 800115e:	f000 fc51 	bl	8001a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2017      	movs	r0, #23
 8001168:	f000 fc15 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800116c:	2017      	movs	r0, #23
 800116e:	f000 fc2e 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	e7fe      	b.n	8001190 <Error_Handler+0x8>
	...

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_MspInit+0x4c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_MspInit+0x4c>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800

080011e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a26      	ldr	r2, [pc, #152]	; (800128c <HAL_TIM_Base_MspInit+0xa8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d116      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a24      	ldr	r2, [pc, #144]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2019      	movs	r0, #25
 8001218:	f000 fbbd 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800121c:	2019      	movs	r0, #25
 800121e:	f000 fbd6 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001222:	e02e      	b.n	8001282 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d10e      	bne.n	800124c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
}
 800124a:	e01a      	b.n	8001282 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_TIM_Base_MspInit+0xb0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d115      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_TIM_Base_MspInit+0xac>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	202c      	movs	r0, #44	; 0x2c
 8001278:	f000 fb8d 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800127c:	202c      	movs	r0, #44	; 0x2c
 800127e:	f000 fba6 	bl	80019ce <HAL_NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40010000 	.word	0x40010000
 8001290:	40023800 	.word	0x40023800
 8001294:	40010400 	.word	0x40010400

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 fa5c 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80012f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012f4:	f000 fd4c 	bl	8001d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001302:	f001 fafd 	bl	8002900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20001410 	.word	0x20001410

08001310 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001316:	f001 faf3 	bl	8002900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200010c4 	.word	0x200010c4

08001324 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	return -1;
 800132c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134c:	605a      	str	r2, [r3, #4]
	return 0;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_isatty>:

int _isatty(int file)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
	return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f001 fe62 	bl	8003084 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20020000 	.word	0x20020000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	20000098 	.word	0x20000098
 80013f4:	200014e0 	.word	0x200014e0

080013f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <SystemInit+0x20>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <SystemInit+0x20>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <uart_init>:
/**
 * Initializes USART2 as a UART
 * @param baud - the baud rate
 * @param sysclk - the frequency of the system clock in Hz
 */
void uart_init(int baud, int sysclk) {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 8001422:	af00      	add	r7, sp, #0
 8001424:	f8c7 0814 	str.w	r0, [r7, #2068]	; 0x814
 8001428:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810

    // define the input and output buffer
    input_buffer = cq_init();
 800142c:	4c36      	ldr	r4, [pc, #216]	; (8001508 <uart_init+0xec>)
 800142e:	463b      	mov	r3, r7
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f8b9 	bl	80005a8 <cq_init>
 8001436:	463b      	mov	r3, r7
 8001438:	4620      	mov	r0, r4
 800143a:	4619      	mov	r1, r3
 800143c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001440:	461a      	mov	r2, r3
 8001442:	f001 fe49 	bl	80030d8 <memcpy>
    output_buffer = cq_init();
 8001446:	4c31      	ldr	r4, [pc, #196]	; (800150c <uart_init+0xf0>)
 8001448:	463b      	mov	r3, r7
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f8ac 	bl	80005a8 <cq_init>
 8001450:	463b      	mov	r3, r7
 8001452:	4620      	mov	r0, r4
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 6301 	mov.w	r3, #2064	; 0x810
 800145a:	461a      	mov	r2, r3
 800145c:	f001 fe3c 	bl	80030d8 <memcpy>

    // enable GPIOA in RCC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <uart_init+0xf4>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a2a      	ldr	r2, [pc, #168]	; (8001510 <uart_init+0xf4>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6313      	str	r3, [r2, #48]	; 0x30

    // enable USART2 in RCC
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <uart_init+0xf4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	4a27      	ldr	r2, [pc, #156]	; (8001510 <uart_init+0xf4>)
 8001472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001476:	6413      	str	r3, [r2, #64]	; 0x40

    // set PA2 and PA3 as pullup
    GPIOA->PUPDR |= (0b01 << GPIO_PUPDR_PUPD2_Pos | 0b01 << GPIO_PUPDR_PUPD3_Pos);
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <uart_init+0xf8>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4a25      	ldr	r2, [pc, #148]	; (8001514 <uart_init+0xf8>)
 800147e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001482:	60d3      	str	r3, [r2, #12]

    // clear PA2 and PA3 mode
    GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <uart_init+0xf8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <uart_init+0xf8>)
 800148a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800148e:	6013      	str	r3, [r2, #0]

    // set PA2 and PA3 mode to alternate function
    GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos | 0b10 << GPIO_MODER_MODER3_Pos);
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <uart_init+0xf8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <uart_init+0xf8>)
 8001496:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800149a:	6013      	str	r3, [r2, #0]

    // clear alternate function select for PA2 and PA3
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <uart_init+0xf8>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <uart_init+0xf8>)
 80014a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014a6:	6213      	str	r3, [r2, #32]

    // select USART1..3 (AF7) as the alternate function for PA3 and PA2
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos | 7 << GPIO_AFRL_AFSEL3_Pos);
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <uart_init+0xf8>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <uart_init+0xf8>)
 80014ae:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80014b2:	6213      	str	r3, [r2, #32]

    // set USART2's baud rate
    USART2->BRR = sysclk / baud;
 80014b4:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 80014b8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80014bc:	fb92 f2f3 	sdiv	r2, r2, r3
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <uart_init+0xfc>)
 80014c2:	609a      	str	r2, [r3, #8]

    // enable USART2's UART, RX, and TX
    USART2->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE);
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <uart_init+0xfc>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a13      	ldr	r2, [pc, #76]	; (8001518 <uart_init+0xfc>)
 80014ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ce:	f043 030c 	orr.w	r3, r3, #12
 80014d2:	60d3      	str	r3, [r2, #12]

    // enable USART2's TXE interrupt and RXNE interrupt
    USART2->CR1 |= (USART_CR1_TXEIE | USART_CR1_RXNEIE);
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <uart_init+0xfc>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <uart_init+0xfc>)
 80014da:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80014de:	60d3      	str	r3, [r2, #12]

    // enable USART2 interrupts in NVIC
    NVIC->ISER[1] |= (1 << 6);
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <uart_init+0x100>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <uart_init+0x100>)
 80014e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ea:	6053      	str	r3, [r2, #4]

    // set output buffer source
    setvbuf(stdout, NULL, _IONBF, 0);
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <uart_init+0x104>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6898      	ldr	r0, [r3, #8]
 80014f2:	2300      	movs	r3, #0
 80014f4:	2202      	movs	r2, #2
 80014f6:	2100      	movs	r1, #0
 80014f8:	f001 fea8 	bl	800324c <setvbuf>

}
 80014fc:	bf00      	nop
 80014fe:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	2000009c 	.word	0x2000009c
 800150c:	200008ac 	.word	0x200008ac
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000
 8001518:	40004400 	.word	0x40004400
 800151c:	e000e100 	.word	0xe000e100
 8001520:	20000014 	.word	0x20000014

08001524 <_read>:
 * @param file - not implemented (ignored)
 * @param ptr - where the read data should be put
 * @param len - the number of characters to read
 * @return the number of characters read
 */
int _read(int file, char * ptr, int len) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]

    // wait until the input buffer receives some data
    while (cq_isempty(&input_buffer));
 8001530:	bf00      	nop
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <_read+0x60>)
 8001534:	f7ff f8b3 	bl	800069e <cq_isempty>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <_read+0xe>

    int char_count = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]

    // pull from the circular queue until it is empty
    while (!cq_isempty(&input_buffer)) {
 8001542:	e00c      	b.n	800155e <_read+0x3a>
        char_count++;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
        *ptr = cq_pull(&input_buffer);
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <_read+0x60>)
 800154c:	f7ff f87c 	bl	8000648 <cq_pull>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	701a      	strb	r2, [r3, #0]
        ptr++;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3301      	adds	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
    while (!cq_isempty(&input_buffer)) {
 800155e:	4809      	ldr	r0, [pc, #36]	; (8001584 <_read+0x60>)
 8001560:	f7ff f89d 	bl	800069e <cq_isempty>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0ec      	beq.n	8001544 <_read+0x20>
    }

    if (*ptr == '\r') *ptr = '\n';
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b0d      	cmp	r3, #13
 8001570:	d102      	bne.n	8001578 <_read+0x54>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	220a      	movs	r2, #10
 8001576:	701a      	strb	r2, [r3, #0]

    return char_count;
 8001578:	697b      	ldr	r3, [r7, #20]

}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000009c 	.word	0x2000009c

08001588 <_write>:
 * @param file - not implemented (ignored)
 * @param ptr - where the characters should be read from
 * @param len - the number of characters to read
 * @return the number of characters read
 */
int _write(int file, char * ptr, int len) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]

    int char_count = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

    // push characters to the output buffer until we write len characters or the buffer fills up
    while (char_count < len && !cq_isfull(&output_buffer)) {
 8001598:	e00b      	b.n	80015b2 <_write+0x2a>
        cq_push(&output_buffer, *ptr);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <_write+0x54>)
 80015a2:	f7ff f825 	bl	80005f0 <cq_push>
        char_count++;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
        ptr++;
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
    while (char_count < len && !cq_isfull(&output_buffer)) {
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	da05      	bge.n	80015c6 <_write+0x3e>
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <_write+0x54>)
 80015bc:	f7ff f87b 	bl	80006b6 <cq_isfull>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0e9      	beq.n	800159a <_write+0x12>
    }

    // enable TXE interrupts so the data can be transmitted
    USART2->CR1 |= USART_CR1_TXEIE;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <_write+0x58>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_write+0x58>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d0:	60d3      	str	r3, [r2, #12]

    return char_count;
 80015d2:	697b      	ldr	r3, [r7, #20]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200008ac 	.word	0x200008ac
 80015e0:	40004400 	.word	0x40004400

080015e4 <uart_isempty>:

int uart_isempty()
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	return cq_isempty(&input_buffer);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <uart_isempty+0x10>)
 80015ea:	f7ff f858 	bl	800069e <cq_isempty>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000009c 	.word	0x2000009c

080015f8 <uart_getc>:

char uart_getc()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	return cq_pull(&input_buffer);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <uart_getc+0x10>)
 80015fe:	f7ff f823 	bl	8000648 <cq_pull>
 8001602:	4603      	mov	r3, r0
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000009c 	.word	0x2000009c

0800160c <USART2_IRQHandler>:

/**
 * USART2 interrupt request handler
 */
void USART2_IRQHandler(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

    // if the RDR has received data and the input buffer is not full
    if ((USART2->SR & USART_SR_RXNE) && !cq_isfull(&input_buffer)) {
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <USART2_IRQHandler+0x90>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b00      	cmp	r3, #0
 800161c:	d020      	beq.n	8001660 <USART2_IRQHandler+0x54>
 800161e:	4820      	ldr	r0, [pc, #128]	; (80016a0 <USART2_IRQHandler+0x94>)
 8001620:	f7ff f849 	bl	80006b6 <cq_isfull>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d11a      	bne.n	8001660 <USART2_IRQHandler+0x54>

        // read the RDR
        char c = USART2->DR;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <USART2_IRQHandler+0x90>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	71fb      	strb	r3, [r7, #7]

        // push the char in the RDR into the input buffer
        cq_push(&input_buffer, c);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4619      	mov	r1, r3
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <USART2_IRQHandler+0x94>)
 8001636:	f7fe ffdb 	bl	80005f0 <cq_push>

        // echo the character to the output buffer
        if (!cq_isfull(&output_buffer)) {
 800163a:	481a      	ldr	r0, [pc, #104]	; (80016a4 <USART2_IRQHandler+0x98>)
 800163c:	f7ff f83b 	bl	80006b6 <cq_isfull>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d104      	bne.n	8001650 <USART2_IRQHandler+0x44>
            cq_push(&output_buffer, c);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4619      	mov	r1, r3
 800164a:	4816      	ldr	r0, [pc, #88]	; (80016a4 <USART2_IRQHandler+0x98>)
 800164c:	f7fe ffd0 	bl	80005f0 <cq_push>
        }

        // enable TXE interrupts so the echo can be pushed
        USART2->CR1 |= USART_CR1_TXEIE;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <USART2_IRQHandler+0x90>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <USART2_IRQHandler+0x90>)
 8001656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800165a:	60d3      	str	r3, [r2, #12]
    if ((USART2->SR & USART_SR_RXNE) && !cq_isfull(&input_buffer)) {
 800165c:	bf00      	nop
            // disable TXE interrupts
            USART2->CR1 &= ~(USART_CR1_TXEIE);

        }
    }
}
 800165e:	e019      	b.n	8001694 <USART2_IRQHandler+0x88>
    else if (USART2->SR & USART_SR_TXE) {
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <USART2_IRQHandler+0x90>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <USART2_IRQHandler+0x88>
        if (!cq_isempty(&output_buffer)) {
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <USART2_IRQHandler+0x98>)
 800166e:	f7ff f816 	bl	800069e <cq_isempty>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d107      	bne.n	8001688 <USART2_IRQHandler+0x7c>
            USART2->DR = cq_pull(&output_buffer);
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <USART2_IRQHandler+0x98>)
 800167a:	f7fe ffe5 	bl	8000648 <cq_pull>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <USART2_IRQHandler+0x90>)
 8001684:	605a      	str	r2, [r3, #4]
}
 8001686:	e005      	b.n	8001694 <USART2_IRQHandler+0x88>
            USART2->CR1 &= ~(USART_CR1_TXEIE);
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <USART2_IRQHandler+0x90>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a03      	ldr	r2, [pc, #12]	; (800169c <USART2_IRQHandler+0x90>)
 800168e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40004400 	.word	0x40004400
 80016a0:	2000009c 	.word	0x2000009c
 80016a4:	200008ac 	.word	0x200008ac

080016a8 <Reset_Handler>:
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0x12>
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <LoopFillZerobss+0x16>)
 80016ae:	490e      	ldr	r1, [pc, #56]	; (80016e8 <LoopFillZerobss+0x1a>)
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <LoopFillZerobss+0x1e>)
 80016b2:	2300      	movs	r3, #0
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:
 80016b6:	58d4      	ldr	r4, [r2, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:
 80016bc:	18c4      	adds	r4, r0, r3
 80016be:	428c      	cmp	r4, r1
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <LoopFillZerobss+0x22>)
 80016c4:	4c0b      	ldr	r4, [pc, #44]	; (80016f4 <LoopFillZerobss+0x26>)
 80016c6:	2300      	movs	r3, #0
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:
 80016ce:	42a2      	cmp	r2, r4
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>
 80016d2:	f7ff fe91 	bl	80013f8 <SystemInit>
 80016d6:	f001 fcdb 	bl	8003090 <__libc_init_array>
 80016da:	f7ff f8e7 	bl	80008ac <main>
 80016de:	4770      	bx	lr
 80016e0:	20020000 	.word	0x20020000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000078 	.word	0x20000078
 80016ec:	0800442c 	.word	0x0800442c
 80016f0:	20000078 	.word	0x20000078
 80016f4:	200014dc 	.word	0x200014dc

080016f8 <ADC_IRQHandler>:
 80016f8:	e7fe      	b.n	80016f8 <ADC_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_Init+0x40>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_Init+0x40>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x40>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f92b 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	200f      	movs	r0, #15
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fd30 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f943 	bl	80019ea <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 f90b 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000008 	.word	0x20000008
 8001798:	20000010 	.word	0x20000010
 800179c:	2000000c 	.word	0x2000000c

080017a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000010 	.word	0x20000010
 80017c4:	200014c8 	.word	0x200014c8

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200014c8 	.word	0x200014c8

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4907      	ldr	r1, [pc, #28]	; (800187c <__NVIC_EnableIRQ+0x38>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	; (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff8e 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff29 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff3e 	bl	8001828 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff8e 	bl	80018d4 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5d 	bl	8001880 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff31 	bl	8001844 <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	e165      	b.n	8001cec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f040 8154 	bne.w	8001ce6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d005      	beq.n	8001a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d130      	bne.n	8001ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 0201 	and.w	r2, r3, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d017      	beq.n	8001af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d123      	bne.n	8001b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80ae 	beq.w	8001ce6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_GPIO_Init+0x300>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <HAL_GPIO_Init+0x300>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <HAL_GPIO_Init+0x300>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba6:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4f      	ldr	r2, [pc, #316]	; (8001d0c <HAL_GPIO_Init+0x308>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d025      	beq.n	8001c1e <HAL_GPIO_Init+0x21a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4e      	ldr	r2, [pc, #312]	; (8001d10 <HAL_GPIO_Init+0x30c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01f      	beq.n	8001c1a <HAL_GPIO_Init+0x216>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4d      	ldr	r2, [pc, #308]	; (8001d14 <HAL_GPIO_Init+0x310>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x212>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4c      	ldr	r2, [pc, #304]	; (8001d18 <HAL_GPIO_Init+0x314>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x20e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <HAL_GPIO_Init+0x318>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x20a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x31c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x206>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_GPIO_Init+0x320>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x202>
 8001c02:	2306      	movs	r3, #6
 8001c04:	e00c      	b.n	8001c20 <HAL_GPIO_Init+0x21c>
 8001c06:	2307      	movs	r3, #7
 8001c08:	e00a      	b.n	8001c20 <HAL_GPIO_Init+0x21c>
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	e008      	b.n	8001c20 <HAL_GPIO_Init+0x21c>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x21c>
 8001c12:	2303      	movs	r3, #3
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x21c>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x21c>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x21c>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f002 0203 	and.w	r2, r2, #3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c30:	4935      	ldr	r1, [pc, #212]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c62:	4a31      	ldr	r2, [pc, #196]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c68:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8c:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c92:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	f67f ae96 	bls.w	8001a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40021800 	.word	0x40021800
 8001d28:	40013c00 	.word	0x40013c00

08001d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e001      	b.n	8001d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d78:	e003      	b.n	8001d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	619a      	str	r2, [r3, #24]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fcee 	bl	8000790 <HAL_GPIO_EXTI_Callback>
  }
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40013c00 	.word	0x40013c00

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0cc      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d90c      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d044      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e067      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4934      	ldr	r1, [pc, #208]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7ff fc8a 	bl	80017c8 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7ff fc86 	bl	80017c8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e04f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20c      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fbea 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08004374 	.word	0x08004374
 8001f84:	20000008 	.word	0x20000008
 8001f88:	2000000c 	.word	0x2000000c

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f90:	b087      	sub	sp, #28
 8001f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f94:	2600      	movs	r6, #0
 8001f96:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001f98:	2600      	movs	r6, #0
 8001f9a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001f9c:	2600      	movs	r6, #0
 8001f9e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001fa0:	2600      	movs	r6, #0
 8001fa2:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fa4:	2600      	movs	r6, #0
 8001fa6:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fa8:	4ea3      	ldr	r6, [pc, #652]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001faa:	68b6      	ldr	r6, [r6, #8]
 8001fac:	f006 060c 	and.w	r6, r6, #12
 8001fb0:	2e0c      	cmp	r6, #12
 8001fb2:	f200 8137 	bhi.w	8002224 <HAL_RCC_GetSysClockFreq+0x298>
 8001fb6:	f20f 0c08 	addw	ip, pc, #8
 8001fba:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001ff5 	.word	0x08001ff5
 8001fc4:	08002225 	.word	0x08002225
 8001fc8:	08002225 	.word	0x08002225
 8001fcc:	08002225 	.word	0x08002225
 8001fd0:	08001ffb 	.word	0x08001ffb
 8001fd4:	08002225 	.word	0x08002225
 8001fd8:	08002225 	.word	0x08002225
 8001fdc:	08002225 	.word	0x08002225
 8001fe0:	08002001 	.word	0x08002001
 8001fe4:	08002225 	.word	0x08002225
 8001fe8:	08002225 	.word	0x08002225
 8001fec:	08002225 	.word	0x08002225
 8001ff0:	08002117 	.word	0x08002117
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b91      	ldr	r3, [pc, #580]	; (800223c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001ff6:	613b      	str	r3, [r7, #16]
       break;
 8001ff8:	e117      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ffa:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001ffc:	613b      	str	r3, [r7, #16]
      break;
 8001ffe:	e114      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002000:	4b8d      	ldr	r3, [pc, #564]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002008:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200a:	4b8b      	ldr	r3, [pc, #556]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d024      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	099b      	lsrs	r3, r3, #6
 800201c:	461a      	mov	r2, r3
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002026:	f04f 0500 	mov.w	r5, #0
 800202a:	ea02 0004 	and.w	r0, r2, r4
 800202e:	ea03 0105 	and.w	r1, r3, r5
 8002032:	4b83      	ldr	r3, [pc, #524]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002034:	fb03 f201 	mul.w	r2, r3, r1
 8002038:	2300      	movs	r3, #0
 800203a:	fb03 f300 	mul.w	r3, r3, r0
 800203e:	4413      	add	r3, r2
 8002040:	4a7f      	ldr	r2, [pc, #508]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002042:	fba0 0102 	umull	r0, r1, r0, r2
 8002046:	440b      	add	r3, r1
 8002048:	4619      	mov	r1, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	461a      	mov	r2, r3
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	f7fe f92d 	bl	80002b0 <__aeabi_uldivmod>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4613      	mov	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	e04c      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002060:	4b75      	ldr	r3, [pc, #468]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	461a      	mov	r2, r3
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	ea02 0800 	and.w	r8, r2, r0
 8002078:	ea03 0901 	and.w	r9, r3, r1
 800207c:	4640      	mov	r0, r8
 800207e:	4649      	mov	r1, r9
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	014b      	lsls	r3, r1, #5
 800208a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800208e:	0142      	lsls	r2, r0, #5
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	ebb0 0008 	subs.w	r0, r0, r8
 8002098:	eb61 0109 	sbc.w	r1, r1, r9
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	018b      	lsls	r3, r1, #6
 80020a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020aa:	0182      	lsls	r2, r0, #6
 80020ac:	1a12      	subs	r2, r2, r0
 80020ae:	eb63 0301 	sbc.w	r3, r3, r1
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	00d9      	lsls	r1, r3, #3
 80020bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020c0:	00d0      	lsls	r0, r2, #3
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	eb12 0208 	adds.w	r2, r2, r8
 80020ca:	eb43 0309 	adc.w	r3, r3, r9
 80020ce:	f04f 0000 	mov.w	r0, #0
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	0299      	lsls	r1, r3, #10
 80020d8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020dc:	0290      	lsls	r0, r2, #10
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	f7fe f8df 	bl	80002b0 <__aeabi_uldivmod>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4613      	mov	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	3301      	adds	r3, #1
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	613b      	str	r3, [r7, #16]
      break;
 8002114:	e089      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002116:	4948      	ldr	r1, [pc, #288]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002118:	6849      	ldr	r1, [r1, #4]
 800211a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800211e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002120:	4945      	ldr	r1, [pc, #276]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002122:	6849      	ldr	r1, [r1, #4]
 8002124:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002128:	2900      	cmp	r1, #0
 800212a:	d024      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212c:	4942      	ldr	r1, [pc, #264]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800212e:	6849      	ldr	r1, [r1, #4]
 8002130:	0989      	lsrs	r1, r1, #6
 8002132:	4608      	mov	r0, r1
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	f240 14ff 	movw	r4, #511	; 0x1ff
 800213c:	f04f 0500 	mov.w	r5, #0
 8002140:	ea00 0204 	and.w	r2, r0, r4
 8002144:	ea01 0305 	and.w	r3, r1, r5
 8002148:	493d      	ldr	r1, [pc, #244]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800214a:	fb01 f003 	mul.w	r0, r1, r3
 800214e:	2100      	movs	r1, #0
 8002150:	fb01 f102 	mul.w	r1, r1, r2
 8002154:	1844      	adds	r4, r0, r1
 8002156:	493a      	ldr	r1, [pc, #232]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002158:	fba2 0101 	umull	r0, r1, r2, r1
 800215c:	1863      	adds	r3, r4, r1
 800215e:	4619      	mov	r1, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f7fe f8a2 	bl	80002b0 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4613      	mov	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e04a      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	461a      	mov	r2, r3
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	ea02 0400 	and.w	r4, r2, r0
 800218e:	ea03 0501 	and.w	r5, r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	014b      	lsls	r3, r1, #5
 80021a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021a4:	0142      	lsls	r2, r0, #5
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	1b00      	subs	r0, r0, r4
 80021ac:	eb61 0105 	sbc.w	r1, r1, r5
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	018b      	lsls	r3, r1, #6
 80021ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021be:	0182      	lsls	r2, r0, #6
 80021c0:	1a12      	subs	r2, r2, r0
 80021c2:	eb63 0301 	sbc.w	r3, r3, r1
 80021c6:	f04f 0000 	mov.w	r0, #0
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	00d9      	lsls	r1, r3, #3
 80021d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021d4:	00d0      	lsls	r0, r2, #3
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	1912      	adds	r2, r2, r4
 80021dc:	eb45 0303 	adc.w	r3, r5, r3
 80021e0:	f04f 0000 	mov.w	r0, #0
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	0299      	lsls	r1, r3, #10
 80021ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021ee:	0290      	lsls	r0, r2, #10
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	f7fe f856 	bl	80002b0 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4613      	mov	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0f1b      	lsrs	r3, r3, #28
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	613b      	str	r3, [r7, #16]
      break;
 8002222:	e002      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002226:	613b      	str	r3, [r7, #16]
      break;
 8002228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222a:	693b      	ldr	r3, [r7, #16]
}
 800222c:	4618      	mov	r0, r3
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400
 8002240:	017d7840 	.word	0x017d7840

08002244 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e28d      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8083 	beq.w	800236a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002264:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d019      	beq.n	80022a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002270:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002278:	2b08      	cmp	r3, #8
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800227c:	4b8e      	ldr	r3, [pc, #568]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002288:	d00c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b8b      	ldr	r3, [pc, #556]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d112      	bne.n	80022bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002296:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a2:	d10b      	bne.n	80022bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d05b      	beq.n	8002368 <HAL_RCC_OscConfig+0x124>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d157      	bne.n	8002368 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e25a      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x90>
 80022c6:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7b      	ldr	r2, [pc, #492]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e01d      	b.n	8002310 <HAL_RCC_OscConfig+0xcc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0xb4>
 80022de:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a75      	ldr	r2, [pc, #468]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a72      	ldr	r2, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0xcc>
 80022f8:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b6c      	ldr	r3, [pc, #432]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6b      	ldr	r2, [pc, #428]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff fa56 	bl	80017c8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002320:	f7ff fa52 	bl	80017c8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e21f      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0xdc>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff fa42 	bl	80017c8 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff fa3e 	bl	80017c8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e20b      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x104>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d06f      	beq.n	8002456 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002376:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b00      	cmp	r3, #0
 8002380:	d017      	beq.n	80023b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002382:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800238a:	2b08      	cmp	r3, #8
 800238c:	d105      	bne.n	800239a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800238e:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x186>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1d3      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4937      	ldr	r1, [pc, #220]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e03a      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x278>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7ff f9eb 	bl	80017c8 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f6:	f7ff f9e7 	bl	80017c8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1b4      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4925      	ldr	r1, [pc, #148]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_OscConfig+0x278>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff f9ca 	bl	80017c8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002438:	f7ff f9c6 	bl	80017c8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e193      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d036      	beq.n	80024d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_RCC_OscConfig+0x27c>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7ff f9aa 	bl	80017c8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002478:	f7ff f9a6 	bl	80017c8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e173      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x234>
 8002496:	e01b      	b.n	80024d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x27c>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7ff f993 	bl	80017c8 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	e00e      	b.n	80024c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff f98f 	bl	80017c8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d907      	bls.n	80024c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e15c      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	42470000 	.word	0x42470000
 80024c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b8a      	ldr	r3, [pc, #552]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ea      	bne.n	80024a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8097 	beq.w	800260c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b83      	ldr	r3, [pc, #524]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a7e      	ldr	r2, [pc, #504]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b7c      	ldr	r3, [pc, #496]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b79      	ldr	r3, [pc, #484]	; (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7ff f94f 	bl	80017c8 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7ff f94b 	bl	80017c8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e118      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x31e>
 8002554:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a65      	ldr	r2, [pc, #404]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x358>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x340>
 800256a:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a60      	ldr	r2, [pc, #384]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0x358>
 8002584:	4b5a      	ldr	r3, [pc, #360]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a59      	ldr	r2, [pc, #356]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7ff f910 	bl	80017c8 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7ff f90c 	bl	80017c8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0d7      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCC_OscConfig+0x368>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7ff f8fa 	bl	80017c8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7ff f8f6 	bl	80017c8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0c1      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ee      	bne.n	80025d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002600:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	4a3a      	ldr	r2, [pc, #232]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80ad 	beq.w	8002770 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002616:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d060      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d145      	bne.n	80026b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff f8ca 	bl	80017c8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7ff f8c6 	bl	80017c8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e093      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	071b      	lsls	r3, r3, #28
 8002682:	491b      	ldr	r1, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7ff f89b 	bl	80017c8 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7ff f897 	bl	80017c8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e064      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x452>
 80026b4:	e05c      	b.n	8002770 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7ff f884 	bl	80017c8 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff f880 	bl	80017c8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e04d      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x480>
 80026e2:	e045      	b.n	8002770 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e040      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_RCC_OscConfig+0x538>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d030      	beq.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d129      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d122      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800272c:	4013      	ands	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002734:	4293      	cmp	r3, r2
 8002736:	d119      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d10f      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e041      	b.n	8002816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fd1c 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 fa96 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d001      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e04e      	b.n	80028d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002862:	d01d      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d018      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_TIM_Base_Start_IT+0xdc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d010      	beq.n	80028d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c2:	e007      	b.n	80028d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40010400 	.word	0x40010400
 80028f8:	40014000 	.word	0x40014000
 80028fc:	40001800 	.word	0x40001800

08002900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0202 	mvn.w	r2, #2
 800292c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f9b5 	bl	8002cb2 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f9a7 	bl	8002c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f9b8 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b04      	cmp	r3, #4
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0204 	mvn.w	r2, #4
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f98b 	bl	8002cb2 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f97d 	bl	8002c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f98e 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0208 	mvn.w	r2, #8
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2204      	movs	r2, #4
 80029da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f961 	bl	8002cb2 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f953 	bl	8002c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f964 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0210 	mvn.w	r2, #16
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f937 	bl	8002cb2 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f929 	bl	8002c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f93a 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0201 	mvn.w	r2, #1
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fd fe26 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b80      	cmp	r3, #128	; 0x80
 8002a90:	d10e      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d107      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fae0 	bl	8003070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d10e      	bne.n	8002adc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d107      	bne.n	8002adc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8ff 	bl	8002cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d107      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0220 	mvn.w	r2, #32
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 faaa 	bl	800305c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_TIM_ConfigClockSource+0x1c>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e0b4      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x186>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b64:	d03e      	beq.n	8002be4 <HAL_TIM_ConfigClockSource+0xd4>
 8002b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6a:	f200 8087 	bhi.w	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b72:	f000 8086 	beq.w	8002c82 <HAL_TIM_ConfigClockSource+0x172>
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7a:	d87f      	bhi.n	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b70      	cmp	r3, #112	; 0x70
 8002b7e:	d01a      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8002b80:	2b70      	cmp	r3, #112	; 0x70
 8002b82:	d87b      	bhi.n	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b60      	cmp	r3, #96	; 0x60
 8002b86:	d050      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0x11a>
 8002b88:	2b60      	cmp	r3, #96	; 0x60
 8002b8a:	d877      	bhi.n	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b50      	cmp	r3, #80	; 0x50
 8002b8e:	d03c      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0xfa>
 8002b90:	2b50      	cmp	r3, #80	; 0x50
 8002b92:	d873      	bhi.n	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d058      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x13a>
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d86f      	bhi.n	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b30      	cmp	r3, #48	; 0x30
 8002b9e:	d064      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x15a>
 8002ba0:	2b30      	cmp	r3, #48	; 0x30
 8002ba2:	d86b      	bhi.n	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d060      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x15a>
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d867      	bhi.n	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d05c      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x15a>
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d05a      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x15a>
 8002bb4:	e062      	b.n	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6899      	ldr	r1, [r3, #8]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f000 f9ad 	bl	8002f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	609a      	str	r2, [r3, #8]
      break;
 8002be2:	e04f      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6899      	ldr	r1, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f000 f996 	bl	8002f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c06:	609a      	str	r2, [r3, #8]
      break;
 8002c08:	e03c      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f000 f90a 	bl	8002e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2150      	movs	r1, #80	; 0x50
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f963 	bl	8002eee <TIM_ITRx_SetConfig>
      break;
 8002c28:	e02c      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f000 f929 	bl	8002e8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2160      	movs	r1, #96	; 0x60
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f953 	bl	8002eee <TIM_ITRx_SetConfig>
      break;
 8002c48:	e01c      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 f8ea 	bl	8002e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2140      	movs	r1, #64	; 0x40
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f943 	bl	8002eee <TIM_ITRx_SetConfig>
      break;
 8002c68:	e00c      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f000 f93a 	bl	8002eee <TIM_ITRx_SetConfig>
      break;
 8002c7a:	e003      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e000      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a40      	ldr	r2, [pc, #256]	; (8002e04 <TIM_Base_SetConfig+0x114>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d00f      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3d      	ldr	r2, [pc, #244]	; (8002e08 <TIM_Base_SetConfig+0x118>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00b      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <TIM_Base_SetConfig+0x11c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d007      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <TIM_Base_SetConfig+0x120>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3a      	ldr	r2, [pc, #232]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d108      	bne.n	8002d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <TIM_Base_SetConfig+0x114>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d02b      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d027      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <TIM_Base_SetConfig+0x118>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d023      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <TIM_Base_SetConfig+0x11c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <TIM_Base_SetConfig+0x120>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01b      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a29      	ldr	r2, [pc, #164]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d017      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a28      	ldr	r2, [pc, #160]	; (8002e18 <TIM_Base_SetConfig+0x128>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <TIM_Base_SetConfig+0x12c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00f      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <TIM_Base_SetConfig+0x130>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a25      	ldr	r2, [pc, #148]	; (8002e24 <TIM_Base_SetConfig+0x134>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <TIM_Base_SetConfig+0x138>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <TIM_Base_SetConfig+0x13c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d108      	bne.n	8002db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <TIM_Base_SetConfig+0x114>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d003      	beq.n	8002de8 <TIM_Base_SetConfig+0xf8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d103      	bne.n	8002df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	615a      	str	r2, [r3, #20]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40000800 	.word	0x40000800
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	40010400 	.word	0x40010400
 8002e18:	40014000 	.word	0x40014000
 8002e1c:	40014400 	.word	0x40014400
 8002e20:	40014800 	.word	0x40014800
 8002e24:	40001800 	.word	0x40001800
 8002e28:	40001c00 	.word	0x40001c00
 8002e2c:	40002000 	.word	0x40002000

08002e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0201 	bic.w	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f023 030a 	bic.w	r3, r3, #10
 8002e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	621a      	str	r2, [r3, #32]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0210 	bic.w	r2, r3, #16
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	031b      	lsls	r3, r3, #12
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	621a      	str	r2, [r3, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f043 0307 	orr.w	r3, r3, #7
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e05a      	b.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d022      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d01d      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d018      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a17      	ldr	r2, [pc, #92]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a15      	ldr	r2, [pc, #84]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10c      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40010000 	.word	0x40010000
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40010400 	.word	0x40010400
 8003054:	40014000 	.word	0x40014000
 8003058:	40001800 	.word	0x40001800

0800305c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <__errno>:
 8003084:	4b01      	ldr	r3, [pc, #4]	; (800308c <__errno+0x8>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000014 	.word	0x20000014

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	4d0d      	ldr	r5, [pc, #52]	; (80030c8 <__libc_init_array+0x38>)
 8003094:	4c0d      	ldr	r4, [pc, #52]	; (80030cc <__libc_init_array+0x3c>)
 8003096:	1b64      	subs	r4, r4, r5
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	2600      	movs	r6, #0
 800309c:	42a6      	cmp	r6, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	4d0b      	ldr	r5, [pc, #44]	; (80030d0 <__libc_init_array+0x40>)
 80030a2:	4c0c      	ldr	r4, [pc, #48]	; (80030d4 <__libc_init_array+0x44>)
 80030a4:	f001 f926 	bl	80042f4 <_init>
 80030a8:	1b64      	subs	r4, r4, r5
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	2600      	movs	r6, #0
 80030ae:	42a6      	cmp	r6, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b8:	4798      	blx	r3
 80030ba:	3601      	adds	r6, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c2:	4798      	blx	r3
 80030c4:	3601      	adds	r6, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	08004424 	.word	0x08004424
 80030cc:	08004424 	.word	0x08004424
 80030d0:	08004424 	.word	0x08004424
 80030d4:	08004428 	.word	0x08004428

080030d8 <memcpy>:
 80030d8:	440a      	add	r2, r1
 80030da:	4291      	cmp	r1, r2
 80030dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80030e0:	d100      	bne.n	80030e4 <memcpy+0xc>
 80030e2:	4770      	bx	lr
 80030e4:	b510      	push	{r4, lr}
 80030e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030ee:	4291      	cmp	r1, r2
 80030f0:	d1f9      	bne.n	80030e6 <memcpy+0xe>
 80030f2:	bd10      	pop	{r4, pc}

080030f4 <memset>:
 80030f4:	4402      	add	r2, r0
 80030f6:	4603      	mov	r3, r0
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d100      	bne.n	80030fe <memset+0xa>
 80030fc:	4770      	bx	lr
 80030fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003102:	e7f9      	b.n	80030f8 <memset+0x4>

08003104 <iprintf>:
 8003104:	b40f      	push	{r0, r1, r2, r3}
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <iprintf+0x2c>)
 8003108:	b513      	push	{r0, r1, r4, lr}
 800310a:	681c      	ldr	r4, [r3, #0]
 800310c:	b124      	cbz	r4, 8003118 <iprintf+0x14>
 800310e:	69a3      	ldr	r3, [r4, #24]
 8003110:	b913      	cbnz	r3, 8003118 <iprintf+0x14>
 8003112:	4620      	mov	r0, r4
 8003114:	f000 fb3a 	bl	800378c <__sinit>
 8003118:	ab05      	add	r3, sp, #20
 800311a:	9a04      	ldr	r2, [sp, #16]
 800311c:	68a1      	ldr	r1, [r4, #8]
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	4620      	mov	r0, r4
 8003122:	f000 fd13 	bl	8003b4c <_vfiprintf_r>
 8003126:	b002      	add	sp, #8
 8003128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800312c:	b004      	add	sp, #16
 800312e:	4770      	bx	lr
 8003130:	20000014 	.word	0x20000014

08003134 <putchar>:
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <putchar+0x28>)
 8003136:	b513      	push	{r0, r1, r4, lr}
 8003138:	681c      	ldr	r4, [r3, #0]
 800313a:	4601      	mov	r1, r0
 800313c:	b134      	cbz	r4, 800314c <putchar+0x18>
 800313e:	69a3      	ldr	r3, [r4, #24]
 8003140:	b923      	cbnz	r3, 800314c <putchar+0x18>
 8003142:	9001      	str	r0, [sp, #4]
 8003144:	4620      	mov	r0, r4
 8003146:	f000 fb21 	bl	800378c <__sinit>
 800314a:	9901      	ldr	r1, [sp, #4]
 800314c:	68a2      	ldr	r2, [r4, #8]
 800314e:	4620      	mov	r0, r4
 8003150:	b002      	add	sp, #8
 8003152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003156:	f000 bfbd 	b.w	80040d4 <_putc_r>
 800315a:	bf00      	nop
 800315c:	20000014 	.word	0x20000014

08003160 <_puts_r>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	460e      	mov	r6, r1
 8003164:	4605      	mov	r5, r0
 8003166:	b118      	cbz	r0, 8003170 <_puts_r+0x10>
 8003168:	6983      	ldr	r3, [r0, #24]
 800316a:	b90b      	cbnz	r3, 8003170 <_puts_r+0x10>
 800316c:	f000 fb0e 	bl	800378c <__sinit>
 8003170:	69ab      	ldr	r3, [r5, #24]
 8003172:	68ac      	ldr	r4, [r5, #8]
 8003174:	b913      	cbnz	r3, 800317c <_puts_r+0x1c>
 8003176:	4628      	mov	r0, r5
 8003178:	f000 fb08 	bl	800378c <__sinit>
 800317c:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <_puts_r+0xd0>)
 800317e:	429c      	cmp	r4, r3
 8003180:	d120      	bne.n	80031c4 <_puts_r+0x64>
 8003182:	686c      	ldr	r4, [r5, #4]
 8003184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003186:	07db      	lsls	r3, r3, #31
 8003188:	d405      	bmi.n	8003196 <_puts_r+0x36>
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	0598      	lsls	r0, r3, #22
 800318e:	d402      	bmi.n	8003196 <_puts_r+0x36>
 8003190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003192:	f000 fb99 	bl	80038c8 <__retarget_lock_acquire_recursive>
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	0719      	lsls	r1, r3, #28
 800319a:	d51d      	bpl.n	80031d8 <_puts_r+0x78>
 800319c:	6923      	ldr	r3, [r4, #16]
 800319e:	b1db      	cbz	r3, 80031d8 <_puts_r+0x78>
 80031a0:	3e01      	subs	r6, #1
 80031a2:	68a3      	ldr	r3, [r4, #8]
 80031a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031a8:	3b01      	subs	r3, #1
 80031aa:	60a3      	str	r3, [r4, #8]
 80031ac:	bb39      	cbnz	r1, 80031fe <_puts_r+0x9e>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da38      	bge.n	8003224 <_puts_r+0xc4>
 80031b2:	4622      	mov	r2, r4
 80031b4:	210a      	movs	r1, #10
 80031b6:	4628      	mov	r0, r5
 80031b8:	f000 f90e 	bl	80033d8 <__swbuf_r>
 80031bc:	3001      	adds	r0, #1
 80031be:	d011      	beq.n	80031e4 <_puts_r+0x84>
 80031c0:	250a      	movs	r5, #10
 80031c2:	e011      	b.n	80031e8 <_puts_r+0x88>
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <_puts_r+0xd4>)
 80031c6:	429c      	cmp	r4, r3
 80031c8:	d101      	bne.n	80031ce <_puts_r+0x6e>
 80031ca:	68ac      	ldr	r4, [r5, #8]
 80031cc:	e7da      	b.n	8003184 <_puts_r+0x24>
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <_puts_r+0xd8>)
 80031d0:	429c      	cmp	r4, r3
 80031d2:	bf08      	it	eq
 80031d4:	68ec      	ldreq	r4, [r5, #12]
 80031d6:	e7d5      	b.n	8003184 <_puts_r+0x24>
 80031d8:	4621      	mov	r1, r4
 80031da:	4628      	mov	r0, r5
 80031dc:	f000 f94e 	bl	800347c <__swsetup_r>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d0dd      	beq.n	80031a0 <_puts_r+0x40>
 80031e4:	f04f 35ff 	mov.w	r5, #4294967295
 80031e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031ea:	07da      	lsls	r2, r3, #31
 80031ec:	d405      	bmi.n	80031fa <_puts_r+0x9a>
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	059b      	lsls	r3, r3, #22
 80031f2:	d402      	bmi.n	80031fa <_puts_r+0x9a>
 80031f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031f6:	f000 fb68 	bl	80038ca <__retarget_lock_release_recursive>
 80031fa:	4628      	mov	r0, r5
 80031fc:	bd70      	pop	{r4, r5, r6, pc}
 80031fe:	2b00      	cmp	r3, #0
 8003200:	da04      	bge.n	800320c <_puts_r+0xac>
 8003202:	69a2      	ldr	r2, [r4, #24]
 8003204:	429a      	cmp	r2, r3
 8003206:	dc06      	bgt.n	8003216 <_puts_r+0xb6>
 8003208:	290a      	cmp	r1, #10
 800320a:	d004      	beq.n	8003216 <_puts_r+0xb6>
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	6022      	str	r2, [r4, #0]
 8003212:	7019      	strb	r1, [r3, #0]
 8003214:	e7c5      	b.n	80031a2 <_puts_r+0x42>
 8003216:	4622      	mov	r2, r4
 8003218:	4628      	mov	r0, r5
 800321a:	f000 f8dd 	bl	80033d8 <__swbuf_r>
 800321e:	3001      	adds	r0, #1
 8003220:	d1bf      	bne.n	80031a2 <_puts_r+0x42>
 8003222:	e7df      	b.n	80031e4 <_puts_r+0x84>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	250a      	movs	r5, #10
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	6022      	str	r2, [r4, #0]
 800322c:	701d      	strb	r5, [r3, #0]
 800322e:	e7db      	b.n	80031e8 <_puts_r+0x88>
 8003230:	080043a8 	.word	0x080043a8
 8003234:	080043c8 	.word	0x080043c8
 8003238:	08004388 	.word	0x08004388

0800323c <puts>:
 800323c:	4b02      	ldr	r3, [pc, #8]	; (8003248 <puts+0xc>)
 800323e:	4601      	mov	r1, r0
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f7ff bf8d 	b.w	8003160 <_puts_r>
 8003246:	bf00      	nop
 8003248:	20000014 	.word	0x20000014

0800324c <setvbuf>:
 800324c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003250:	461d      	mov	r5, r3
 8003252:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <setvbuf+0x17c>)
 8003254:	681f      	ldr	r7, [r3, #0]
 8003256:	4604      	mov	r4, r0
 8003258:	460e      	mov	r6, r1
 800325a:	4690      	mov	r8, r2
 800325c:	b127      	cbz	r7, 8003268 <setvbuf+0x1c>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	b913      	cbnz	r3, 8003268 <setvbuf+0x1c>
 8003262:	4638      	mov	r0, r7
 8003264:	f000 fa92 	bl	800378c <__sinit>
 8003268:	4b58      	ldr	r3, [pc, #352]	; (80033cc <setvbuf+0x180>)
 800326a:	429c      	cmp	r4, r3
 800326c:	d167      	bne.n	800333e <setvbuf+0xf2>
 800326e:	687c      	ldr	r4, [r7, #4]
 8003270:	f1b8 0f02 	cmp.w	r8, #2
 8003274:	d006      	beq.n	8003284 <setvbuf+0x38>
 8003276:	f1b8 0f01 	cmp.w	r8, #1
 800327a:	f200 809f 	bhi.w	80033bc <setvbuf+0x170>
 800327e:	2d00      	cmp	r5, #0
 8003280:	f2c0 809c 	blt.w	80033bc <setvbuf+0x170>
 8003284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003286:	07db      	lsls	r3, r3, #31
 8003288:	d405      	bmi.n	8003296 <setvbuf+0x4a>
 800328a:	89a3      	ldrh	r3, [r4, #12]
 800328c:	0598      	lsls	r0, r3, #22
 800328e:	d402      	bmi.n	8003296 <setvbuf+0x4a>
 8003290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003292:	f000 fb19 	bl	80038c8 <__retarget_lock_acquire_recursive>
 8003296:	4621      	mov	r1, r4
 8003298:	4638      	mov	r0, r7
 800329a:	f000 f9e3 	bl	8003664 <_fflush_r>
 800329e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a0:	b141      	cbz	r1, 80032b4 <setvbuf+0x68>
 80032a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032a6:	4299      	cmp	r1, r3
 80032a8:	d002      	beq.n	80032b0 <setvbuf+0x64>
 80032aa:	4638      	mov	r0, r7
 80032ac:	f000 fb7a 	bl	80039a4 <_free_r>
 80032b0:	2300      	movs	r3, #0
 80032b2:	6363      	str	r3, [r4, #52]	; 0x34
 80032b4:	2300      	movs	r3, #0
 80032b6:	61a3      	str	r3, [r4, #24]
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	0619      	lsls	r1, r3, #24
 80032be:	d503      	bpl.n	80032c8 <setvbuf+0x7c>
 80032c0:	6921      	ldr	r1, [r4, #16]
 80032c2:	4638      	mov	r0, r7
 80032c4:	f000 fb6e 	bl	80039a4 <_free_r>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	f1b8 0f02 	cmp.w	r8, #2
 80032d6:	81a3      	strh	r3, [r4, #12]
 80032d8:	d06c      	beq.n	80033b4 <setvbuf+0x168>
 80032da:	ab01      	add	r3, sp, #4
 80032dc:	466a      	mov	r2, sp
 80032de:	4621      	mov	r1, r4
 80032e0:	4638      	mov	r0, r7
 80032e2:	f000 faf3 	bl	80038cc <__swhatbuf_r>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	4318      	orrs	r0, r3
 80032ea:	81a0      	strh	r0, [r4, #12]
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	d130      	bne.n	8003352 <setvbuf+0x106>
 80032f0:	9d00      	ldr	r5, [sp, #0]
 80032f2:	4628      	mov	r0, r5
 80032f4:	f000 fb4e 	bl	8003994 <malloc>
 80032f8:	4606      	mov	r6, r0
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d155      	bne.n	80033aa <setvbuf+0x15e>
 80032fe:	f8dd 9000 	ldr.w	r9, [sp]
 8003302:	45a9      	cmp	r9, r5
 8003304:	d14a      	bne.n	800339c <setvbuf+0x150>
 8003306:	f04f 35ff 	mov.w	r5, #4294967295
 800330a:	2200      	movs	r2, #0
 800330c:	60a2      	str	r2, [r4, #8]
 800330e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003312:	6022      	str	r2, [r4, #0]
 8003314:	6122      	str	r2, [r4, #16]
 8003316:	2201      	movs	r2, #1
 8003318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331c:	6162      	str	r2, [r4, #20]
 800331e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	07d2      	lsls	r2, r2, #31
 8003326:	81a3      	strh	r3, [r4, #12]
 8003328:	d405      	bmi.n	8003336 <setvbuf+0xea>
 800332a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800332e:	d102      	bne.n	8003336 <setvbuf+0xea>
 8003330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003332:	f000 faca 	bl	80038ca <__retarget_lock_release_recursive>
 8003336:	4628      	mov	r0, r5
 8003338:	b003      	add	sp, #12
 800333a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <setvbuf+0x184>)
 8003340:	429c      	cmp	r4, r3
 8003342:	d101      	bne.n	8003348 <setvbuf+0xfc>
 8003344:	68bc      	ldr	r4, [r7, #8]
 8003346:	e793      	b.n	8003270 <setvbuf+0x24>
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <setvbuf+0x188>)
 800334a:	429c      	cmp	r4, r3
 800334c:	bf08      	it	eq
 800334e:	68fc      	ldreq	r4, [r7, #12]
 8003350:	e78e      	b.n	8003270 <setvbuf+0x24>
 8003352:	2e00      	cmp	r6, #0
 8003354:	d0cd      	beq.n	80032f2 <setvbuf+0xa6>
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	b913      	cbnz	r3, 8003360 <setvbuf+0x114>
 800335a:	4638      	mov	r0, r7
 800335c:	f000 fa16 	bl	800378c <__sinit>
 8003360:	f1b8 0f01 	cmp.w	r8, #1
 8003364:	bf08      	it	eq
 8003366:	89a3      	ldrheq	r3, [r4, #12]
 8003368:	6026      	str	r6, [r4, #0]
 800336a:	bf04      	itt	eq
 800336c:	f043 0301 	orreq.w	r3, r3, #1
 8003370:	81a3      	strheq	r3, [r4, #12]
 8003372:	89a2      	ldrh	r2, [r4, #12]
 8003374:	f012 0308 	ands.w	r3, r2, #8
 8003378:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800337c:	d01c      	beq.n	80033b8 <setvbuf+0x16c>
 800337e:	07d3      	lsls	r3, r2, #31
 8003380:	bf41      	itttt	mi
 8003382:	2300      	movmi	r3, #0
 8003384:	426d      	negmi	r5, r5
 8003386:	60a3      	strmi	r3, [r4, #8]
 8003388:	61a5      	strmi	r5, [r4, #24]
 800338a:	bf58      	it	pl
 800338c:	60a5      	strpl	r5, [r4, #8]
 800338e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003390:	f015 0501 	ands.w	r5, r5, #1
 8003394:	d115      	bne.n	80033c2 <setvbuf+0x176>
 8003396:	f412 7f00 	tst.w	r2, #512	; 0x200
 800339a:	e7c8      	b.n	800332e <setvbuf+0xe2>
 800339c:	4648      	mov	r0, r9
 800339e:	f000 faf9 	bl	8003994 <malloc>
 80033a2:	4606      	mov	r6, r0
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d0ae      	beq.n	8003306 <setvbuf+0xba>
 80033a8:	464d      	mov	r5, r9
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	e7d0      	b.n	8003356 <setvbuf+0x10a>
 80033b4:	2500      	movs	r5, #0
 80033b6:	e7a8      	b.n	800330a <setvbuf+0xbe>
 80033b8:	60a3      	str	r3, [r4, #8]
 80033ba:	e7e8      	b.n	800338e <setvbuf+0x142>
 80033bc:	f04f 35ff 	mov.w	r5, #4294967295
 80033c0:	e7b9      	b.n	8003336 <setvbuf+0xea>
 80033c2:	2500      	movs	r5, #0
 80033c4:	e7b7      	b.n	8003336 <setvbuf+0xea>
 80033c6:	bf00      	nop
 80033c8:	20000014 	.word	0x20000014
 80033cc:	080043a8 	.word	0x080043a8
 80033d0:	080043c8 	.word	0x080043c8
 80033d4:	08004388 	.word	0x08004388

080033d8 <__swbuf_r>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	460e      	mov	r6, r1
 80033dc:	4614      	mov	r4, r2
 80033de:	4605      	mov	r5, r0
 80033e0:	b118      	cbz	r0, 80033ea <__swbuf_r+0x12>
 80033e2:	6983      	ldr	r3, [r0, #24]
 80033e4:	b90b      	cbnz	r3, 80033ea <__swbuf_r+0x12>
 80033e6:	f000 f9d1 	bl	800378c <__sinit>
 80033ea:	4b21      	ldr	r3, [pc, #132]	; (8003470 <__swbuf_r+0x98>)
 80033ec:	429c      	cmp	r4, r3
 80033ee:	d12b      	bne.n	8003448 <__swbuf_r+0x70>
 80033f0:	686c      	ldr	r4, [r5, #4]
 80033f2:	69a3      	ldr	r3, [r4, #24]
 80033f4:	60a3      	str	r3, [r4, #8]
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	071a      	lsls	r2, r3, #28
 80033fa:	d52f      	bpl.n	800345c <__swbuf_r+0x84>
 80033fc:	6923      	ldr	r3, [r4, #16]
 80033fe:	b36b      	cbz	r3, 800345c <__swbuf_r+0x84>
 8003400:	6923      	ldr	r3, [r4, #16]
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	1ac0      	subs	r0, r0, r3
 8003406:	6963      	ldr	r3, [r4, #20]
 8003408:	b2f6      	uxtb	r6, r6
 800340a:	4283      	cmp	r3, r0
 800340c:	4637      	mov	r7, r6
 800340e:	dc04      	bgt.n	800341a <__swbuf_r+0x42>
 8003410:	4621      	mov	r1, r4
 8003412:	4628      	mov	r0, r5
 8003414:	f000 f926 	bl	8003664 <_fflush_r>
 8003418:	bb30      	cbnz	r0, 8003468 <__swbuf_r+0x90>
 800341a:	68a3      	ldr	r3, [r4, #8]
 800341c:	3b01      	subs	r3, #1
 800341e:	60a3      	str	r3, [r4, #8]
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	6022      	str	r2, [r4, #0]
 8003426:	701e      	strb	r6, [r3, #0]
 8003428:	6963      	ldr	r3, [r4, #20]
 800342a:	3001      	adds	r0, #1
 800342c:	4283      	cmp	r3, r0
 800342e:	d004      	beq.n	800343a <__swbuf_r+0x62>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	07db      	lsls	r3, r3, #31
 8003434:	d506      	bpl.n	8003444 <__swbuf_r+0x6c>
 8003436:	2e0a      	cmp	r6, #10
 8003438:	d104      	bne.n	8003444 <__swbuf_r+0x6c>
 800343a:	4621      	mov	r1, r4
 800343c:	4628      	mov	r0, r5
 800343e:	f000 f911 	bl	8003664 <_fflush_r>
 8003442:	b988      	cbnz	r0, 8003468 <__swbuf_r+0x90>
 8003444:	4638      	mov	r0, r7
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <__swbuf_r+0x9c>)
 800344a:	429c      	cmp	r4, r3
 800344c:	d101      	bne.n	8003452 <__swbuf_r+0x7a>
 800344e:	68ac      	ldr	r4, [r5, #8]
 8003450:	e7cf      	b.n	80033f2 <__swbuf_r+0x1a>
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <__swbuf_r+0xa0>)
 8003454:	429c      	cmp	r4, r3
 8003456:	bf08      	it	eq
 8003458:	68ec      	ldreq	r4, [r5, #12]
 800345a:	e7ca      	b.n	80033f2 <__swbuf_r+0x1a>
 800345c:	4621      	mov	r1, r4
 800345e:	4628      	mov	r0, r5
 8003460:	f000 f80c 	bl	800347c <__swsetup_r>
 8003464:	2800      	cmp	r0, #0
 8003466:	d0cb      	beq.n	8003400 <__swbuf_r+0x28>
 8003468:	f04f 37ff 	mov.w	r7, #4294967295
 800346c:	e7ea      	b.n	8003444 <__swbuf_r+0x6c>
 800346e:	bf00      	nop
 8003470:	080043a8 	.word	0x080043a8
 8003474:	080043c8 	.word	0x080043c8
 8003478:	08004388 	.word	0x08004388

0800347c <__swsetup_r>:
 800347c:	4b32      	ldr	r3, [pc, #200]	; (8003548 <__swsetup_r+0xcc>)
 800347e:	b570      	push	{r4, r5, r6, lr}
 8003480:	681d      	ldr	r5, [r3, #0]
 8003482:	4606      	mov	r6, r0
 8003484:	460c      	mov	r4, r1
 8003486:	b125      	cbz	r5, 8003492 <__swsetup_r+0x16>
 8003488:	69ab      	ldr	r3, [r5, #24]
 800348a:	b913      	cbnz	r3, 8003492 <__swsetup_r+0x16>
 800348c:	4628      	mov	r0, r5
 800348e:	f000 f97d 	bl	800378c <__sinit>
 8003492:	4b2e      	ldr	r3, [pc, #184]	; (800354c <__swsetup_r+0xd0>)
 8003494:	429c      	cmp	r4, r3
 8003496:	d10f      	bne.n	80034b8 <__swsetup_r+0x3c>
 8003498:	686c      	ldr	r4, [r5, #4]
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034a0:	0719      	lsls	r1, r3, #28
 80034a2:	d42c      	bmi.n	80034fe <__swsetup_r+0x82>
 80034a4:	06dd      	lsls	r5, r3, #27
 80034a6:	d411      	bmi.n	80034cc <__swsetup_r+0x50>
 80034a8:	2309      	movs	r3, #9
 80034aa:	6033      	str	r3, [r6, #0]
 80034ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	f04f 30ff 	mov.w	r0, #4294967295
 80034b6:	e03e      	b.n	8003536 <__swsetup_r+0xba>
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <__swsetup_r+0xd4>)
 80034ba:	429c      	cmp	r4, r3
 80034bc:	d101      	bne.n	80034c2 <__swsetup_r+0x46>
 80034be:	68ac      	ldr	r4, [r5, #8]
 80034c0:	e7eb      	b.n	800349a <__swsetup_r+0x1e>
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <__swsetup_r+0xd8>)
 80034c4:	429c      	cmp	r4, r3
 80034c6:	bf08      	it	eq
 80034c8:	68ec      	ldreq	r4, [r5, #12]
 80034ca:	e7e6      	b.n	800349a <__swsetup_r+0x1e>
 80034cc:	0758      	lsls	r0, r3, #29
 80034ce:	d512      	bpl.n	80034f6 <__swsetup_r+0x7a>
 80034d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034d2:	b141      	cbz	r1, 80034e6 <__swsetup_r+0x6a>
 80034d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034d8:	4299      	cmp	r1, r3
 80034da:	d002      	beq.n	80034e2 <__swsetup_r+0x66>
 80034dc:	4630      	mov	r0, r6
 80034de:	f000 fa61 	bl	80039a4 <_free_r>
 80034e2:	2300      	movs	r3, #0
 80034e4:	6363      	str	r3, [r4, #52]	; 0x34
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	2300      	movs	r3, #0
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	6923      	ldr	r3, [r4, #16]
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	89a3      	ldrh	r3, [r4, #12]
 80034f8:	f043 0308 	orr.w	r3, r3, #8
 80034fc:	81a3      	strh	r3, [r4, #12]
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	b94b      	cbnz	r3, 8003516 <__swsetup_r+0x9a>
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350c:	d003      	beq.n	8003516 <__swsetup_r+0x9a>
 800350e:	4621      	mov	r1, r4
 8003510:	4630      	mov	r0, r6
 8003512:	f000 f9ff 	bl	8003914 <__smakebuf_r>
 8003516:	89a0      	ldrh	r0, [r4, #12]
 8003518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800351c:	f010 0301 	ands.w	r3, r0, #1
 8003520:	d00a      	beq.n	8003538 <__swsetup_r+0xbc>
 8003522:	2300      	movs	r3, #0
 8003524:	60a3      	str	r3, [r4, #8]
 8003526:	6963      	ldr	r3, [r4, #20]
 8003528:	425b      	negs	r3, r3
 800352a:	61a3      	str	r3, [r4, #24]
 800352c:	6923      	ldr	r3, [r4, #16]
 800352e:	b943      	cbnz	r3, 8003542 <__swsetup_r+0xc6>
 8003530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003534:	d1ba      	bne.n	80034ac <__swsetup_r+0x30>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	0781      	lsls	r1, r0, #30
 800353a:	bf58      	it	pl
 800353c:	6963      	ldrpl	r3, [r4, #20]
 800353e:	60a3      	str	r3, [r4, #8]
 8003540:	e7f4      	b.n	800352c <__swsetup_r+0xb0>
 8003542:	2000      	movs	r0, #0
 8003544:	e7f7      	b.n	8003536 <__swsetup_r+0xba>
 8003546:	bf00      	nop
 8003548:	20000014 	.word	0x20000014
 800354c:	080043a8 	.word	0x080043a8
 8003550:	080043c8 	.word	0x080043c8
 8003554:	08004388 	.word	0x08004388

08003558 <__sflush_r>:
 8003558:	898a      	ldrh	r2, [r1, #12]
 800355a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	0710      	lsls	r0, r2, #28
 8003562:	460c      	mov	r4, r1
 8003564:	d458      	bmi.n	8003618 <__sflush_r+0xc0>
 8003566:	684b      	ldr	r3, [r1, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	dc05      	bgt.n	8003578 <__sflush_r+0x20>
 800356c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	dc02      	bgt.n	8003578 <__sflush_r+0x20>
 8003572:	2000      	movs	r0, #0
 8003574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800357a:	2e00      	cmp	r6, #0
 800357c:	d0f9      	beq.n	8003572 <__sflush_r+0x1a>
 800357e:	2300      	movs	r3, #0
 8003580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003584:	682f      	ldr	r7, [r5, #0]
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	d032      	beq.n	80035f0 <__sflush_r+0x98>
 800358a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	075a      	lsls	r2, r3, #29
 8003590:	d505      	bpl.n	800359e <__sflush_r+0x46>
 8003592:	6863      	ldr	r3, [r4, #4]
 8003594:	1ac0      	subs	r0, r0, r3
 8003596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003598:	b10b      	cbz	r3, 800359e <__sflush_r+0x46>
 800359a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800359c:	1ac0      	subs	r0, r0, r3
 800359e:	2300      	movs	r3, #0
 80035a0:	4602      	mov	r2, r0
 80035a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035a4:	6a21      	ldr	r1, [r4, #32]
 80035a6:	4628      	mov	r0, r5
 80035a8:	47b0      	blx	r6
 80035aa:	1c43      	adds	r3, r0, #1
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	d106      	bne.n	80035be <__sflush_r+0x66>
 80035b0:	6829      	ldr	r1, [r5, #0]
 80035b2:	291d      	cmp	r1, #29
 80035b4:	d82c      	bhi.n	8003610 <__sflush_r+0xb8>
 80035b6:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <__sflush_r+0x108>)
 80035b8:	40ca      	lsrs	r2, r1
 80035ba:	07d6      	lsls	r6, r2, #31
 80035bc:	d528      	bpl.n	8003610 <__sflush_r+0xb8>
 80035be:	2200      	movs	r2, #0
 80035c0:	6062      	str	r2, [r4, #4]
 80035c2:	04d9      	lsls	r1, r3, #19
 80035c4:	6922      	ldr	r2, [r4, #16]
 80035c6:	6022      	str	r2, [r4, #0]
 80035c8:	d504      	bpl.n	80035d4 <__sflush_r+0x7c>
 80035ca:	1c42      	adds	r2, r0, #1
 80035cc:	d101      	bne.n	80035d2 <__sflush_r+0x7a>
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	b903      	cbnz	r3, 80035d4 <__sflush_r+0x7c>
 80035d2:	6560      	str	r0, [r4, #84]	; 0x54
 80035d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035d6:	602f      	str	r7, [r5, #0]
 80035d8:	2900      	cmp	r1, #0
 80035da:	d0ca      	beq.n	8003572 <__sflush_r+0x1a>
 80035dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035e0:	4299      	cmp	r1, r3
 80035e2:	d002      	beq.n	80035ea <__sflush_r+0x92>
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f9dd 	bl	80039a4 <_free_r>
 80035ea:	2000      	movs	r0, #0
 80035ec:	6360      	str	r0, [r4, #52]	; 0x34
 80035ee:	e7c1      	b.n	8003574 <__sflush_r+0x1c>
 80035f0:	6a21      	ldr	r1, [r4, #32]
 80035f2:	2301      	movs	r3, #1
 80035f4:	4628      	mov	r0, r5
 80035f6:	47b0      	blx	r6
 80035f8:	1c41      	adds	r1, r0, #1
 80035fa:	d1c7      	bne.n	800358c <__sflush_r+0x34>
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0c4      	beq.n	800358c <__sflush_r+0x34>
 8003602:	2b1d      	cmp	r3, #29
 8003604:	d001      	beq.n	800360a <__sflush_r+0xb2>
 8003606:	2b16      	cmp	r3, #22
 8003608:	d101      	bne.n	800360e <__sflush_r+0xb6>
 800360a:	602f      	str	r7, [r5, #0]
 800360c:	e7b1      	b.n	8003572 <__sflush_r+0x1a>
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003614:	81a3      	strh	r3, [r4, #12]
 8003616:	e7ad      	b.n	8003574 <__sflush_r+0x1c>
 8003618:	690f      	ldr	r7, [r1, #16]
 800361a:	2f00      	cmp	r7, #0
 800361c:	d0a9      	beq.n	8003572 <__sflush_r+0x1a>
 800361e:	0793      	lsls	r3, r2, #30
 8003620:	680e      	ldr	r6, [r1, #0]
 8003622:	bf08      	it	eq
 8003624:	694b      	ldreq	r3, [r1, #20]
 8003626:	600f      	str	r7, [r1, #0]
 8003628:	bf18      	it	ne
 800362a:	2300      	movne	r3, #0
 800362c:	eba6 0807 	sub.w	r8, r6, r7
 8003630:	608b      	str	r3, [r1, #8]
 8003632:	f1b8 0f00 	cmp.w	r8, #0
 8003636:	dd9c      	ble.n	8003572 <__sflush_r+0x1a>
 8003638:	6a21      	ldr	r1, [r4, #32]
 800363a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800363c:	4643      	mov	r3, r8
 800363e:	463a      	mov	r2, r7
 8003640:	4628      	mov	r0, r5
 8003642:	47b0      	blx	r6
 8003644:	2800      	cmp	r0, #0
 8003646:	dc06      	bgt.n	8003656 <__sflush_r+0xfe>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364e:	81a3      	strh	r3, [r4, #12]
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	e78e      	b.n	8003574 <__sflush_r+0x1c>
 8003656:	4407      	add	r7, r0
 8003658:	eba8 0800 	sub.w	r8, r8, r0
 800365c:	e7e9      	b.n	8003632 <__sflush_r+0xda>
 800365e:	bf00      	nop
 8003660:	20400001 	.word	0x20400001

08003664 <_fflush_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	690b      	ldr	r3, [r1, #16]
 8003668:	4605      	mov	r5, r0
 800366a:	460c      	mov	r4, r1
 800366c:	b913      	cbnz	r3, 8003674 <_fflush_r+0x10>
 800366e:	2500      	movs	r5, #0
 8003670:	4628      	mov	r0, r5
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	b118      	cbz	r0, 800367e <_fflush_r+0x1a>
 8003676:	6983      	ldr	r3, [r0, #24]
 8003678:	b90b      	cbnz	r3, 800367e <_fflush_r+0x1a>
 800367a:	f000 f887 	bl	800378c <__sinit>
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <_fflush_r+0x6c>)
 8003680:	429c      	cmp	r4, r3
 8003682:	d11b      	bne.n	80036bc <_fflush_r+0x58>
 8003684:	686c      	ldr	r4, [r5, #4]
 8003686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ef      	beq.n	800366e <_fflush_r+0xa>
 800368e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003690:	07d0      	lsls	r0, r2, #31
 8003692:	d404      	bmi.n	800369e <_fflush_r+0x3a>
 8003694:	0599      	lsls	r1, r3, #22
 8003696:	d402      	bmi.n	800369e <_fflush_r+0x3a>
 8003698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800369a:	f000 f915 	bl	80038c8 <__retarget_lock_acquire_recursive>
 800369e:	4628      	mov	r0, r5
 80036a0:	4621      	mov	r1, r4
 80036a2:	f7ff ff59 	bl	8003558 <__sflush_r>
 80036a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a8:	07da      	lsls	r2, r3, #31
 80036aa:	4605      	mov	r5, r0
 80036ac:	d4e0      	bmi.n	8003670 <_fflush_r+0xc>
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	059b      	lsls	r3, r3, #22
 80036b2:	d4dd      	bmi.n	8003670 <_fflush_r+0xc>
 80036b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b6:	f000 f908 	bl	80038ca <__retarget_lock_release_recursive>
 80036ba:	e7d9      	b.n	8003670 <_fflush_r+0xc>
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <_fflush_r+0x70>)
 80036be:	429c      	cmp	r4, r3
 80036c0:	d101      	bne.n	80036c6 <_fflush_r+0x62>
 80036c2:	68ac      	ldr	r4, [r5, #8]
 80036c4:	e7df      	b.n	8003686 <_fflush_r+0x22>
 80036c6:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <_fflush_r+0x74>)
 80036c8:	429c      	cmp	r4, r3
 80036ca:	bf08      	it	eq
 80036cc:	68ec      	ldreq	r4, [r5, #12]
 80036ce:	e7da      	b.n	8003686 <_fflush_r+0x22>
 80036d0:	080043a8 	.word	0x080043a8
 80036d4:	080043c8 	.word	0x080043c8
 80036d8:	08004388 	.word	0x08004388

080036dc <std>:
 80036dc:	2300      	movs	r3, #0
 80036de:	b510      	push	{r4, lr}
 80036e0:	4604      	mov	r4, r0
 80036e2:	e9c0 3300 	strd	r3, r3, [r0]
 80036e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036ea:	6083      	str	r3, [r0, #8]
 80036ec:	8181      	strh	r1, [r0, #12]
 80036ee:	6643      	str	r3, [r0, #100]	; 0x64
 80036f0:	81c2      	strh	r2, [r0, #14]
 80036f2:	6183      	str	r3, [r0, #24]
 80036f4:	4619      	mov	r1, r3
 80036f6:	2208      	movs	r2, #8
 80036f8:	305c      	adds	r0, #92	; 0x5c
 80036fa:	f7ff fcfb 	bl	80030f4 <memset>
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <std+0x38>)
 8003700:	6263      	str	r3, [r4, #36]	; 0x24
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <std+0x3c>)
 8003704:	62a3      	str	r3, [r4, #40]	; 0x28
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <std+0x40>)
 8003708:	62e3      	str	r3, [r4, #44]	; 0x2c
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <std+0x44>)
 800370c:	6224      	str	r4, [r4, #32]
 800370e:	6323      	str	r3, [r4, #48]	; 0x30
 8003710:	bd10      	pop	{r4, pc}
 8003712:	bf00      	nop
 8003714:	08004185 	.word	0x08004185
 8003718:	080041a7 	.word	0x080041a7
 800371c:	080041df 	.word	0x080041df
 8003720:	08004203 	.word	0x08004203

08003724 <_cleanup_r>:
 8003724:	4901      	ldr	r1, [pc, #4]	; (800372c <_cleanup_r+0x8>)
 8003726:	f000 b8af 	b.w	8003888 <_fwalk_reent>
 800372a:	bf00      	nop
 800372c:	08003665 	.word	0x08003665

08003730 <__sfmoreglue>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	1e4a      	subs	r2, r1, #1
 8003734:	2568      	movs	r5, #104	; 0x68
 8003736:	4355      	muls	r5, r2
 8003738:	460e      	mov	r6, r1
 800373a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800373e:	f000 f981 	bl	8003a44 <_malloc_r>
 8003742:	4604      	mov	r4, r0
 8003744:	b140      	cbz	r0, 8003758 <__sfmoreglue+0x28>
 8003746:	2100      	movs	r1, #0
 8003748:	e9c0 1600 	strd	r1, r6, [r0]
 800374c:	300c      	adds	r0, #12
 800374e:	60a0      	str	r0, [r4, #8]
 8003750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003754:	f7ff fcce 	bl	80030f4 <memset>
 8003758:	4620      	mov	r0, r4
 800375a:	bd70      	pop	{r4, r5, r6, pc}

0800375c <__sfp_lock_acquire>:
 800375c:	4801      	ldr	r0, [pc, #4]	; (8003764 <__sfp_lock_acquire+0x8>)
 800375e:	f000 b8b3 	b.w	80038c8 <__retarget_lock_acquire_recursive>
 8003762:	bf00      	nop
 8003764:	200014d4 	.word	0x200014d4

08003768 <__sfp_lock_release>:
 8003768:	4801      	ldr	r0, [pc, #4]	; (8003770 <__sfp_lock_release+0x8>)
 800376a:	f000 b8ae 	b.w	80038ca <__retarget_lock_release_recursive>
 800376e:	bf00      	nop
 8003770:	200014d4 	.word	0x200014d4

08003774 <__sinit_lock_acquire>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__sinit_lock_acquire+0x8>)
 8003776:	f000 b8a7 	b.w	80038c8 <__retarget_lock_acquire_recursive>
 800377a:	bf00      	nop
 800377c:	200014cf 	.word	0x200014cf

08003780 <__sinit_lock_release>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__sinit_lock_release+0x8>)
 8003782:	f000 b8a2 	b.w	80038ca <__retarget_lock_release_recursive>
 8003786:	bf00      	nop
 8003788:	200014cf 	.word	0x200014cf

0800378c <__sinit>:
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
 8003790:	f7ff fff0 	bl	8003774 <__sinit_lock_acquire>
 8003794:	69a3      	ldr	r3, [r4, #24]
 8003796:	b11b      	cbz	r3, 80037a0 <__sinit+0x14>
 8003798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800379c:	f7ff bff0 	b.w	8003780 <__sinit_lock_release>
 80037a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037a4:	6523      	str	r3, [r4, #80]	; 0x50
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <__sinit+0x68>)
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <__sinit+0x6c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80037ae:	42a3      	cmp	r3, r4
 80037b0:	bf04      	itt	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	61a3      	streq	r3, [r4, #24]
 80037b6:	4620      	mov	r0, r4
 80037b8:	f000 f820 	bl	80037fc <__sfp>
 80037bc:	6060      	str	r0, [r4, #4]
 80037be:	4620      	mov	r0, r4
 80037c0:	f000 f81c 	bl	80037fc <__sfp>
 80037c4:	60a0      	str	r0, [r4, #8]
 80037c6:	4620      	mov	r0, r4
 80037c8:	f000 f818 	bl	80037fc <__sfp>
 80037cc:	2200      	movs	r2, #0
 80037ce:	60e0      	str	r0, [r4, #12]
 80037d0:	2104      	movs	r1, #4
 80037d2:	6860      	ldr	r0, [r4, #4]
 80037d4:	f7ff ff82 	bl	80036dc <std>
 80037d8:	68a0      	ldr	r0, [r4, #8]
 80037da:	2201      	movs	r2, #1
 80037dc:	2109      	movs	r1, #9
 80037de:	f7ff ff7d 	bl	80036dc <std>
 80037e2:	68e0      	ldr	r0, [r4, #12]
 80037e4:	2202      	movs	r2, #2
 80037e6:	2112      	movs	r1, #18
 80037e8:	f7ff ff78 	bl	80036dc <std>
 80037ec:	2301      	movs	r3, #1
 80037ee:	61a3      	str	r3, [r4, #24]
 80037f0:	e7d2      	b.n	8003798 <__sinit+0xc>
 80037f2:	bf00      	nop
 80037f4:	08004384 	.word	0x08004384
 80037f8:	08003725 	.word	0x08003725

080037fc <__sfp>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	4607      	mov	r7, r0
 8003800:	f7ff ffac 	bl	800375c <__sfp_lock_acquire>
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <__sfp+0x84>)
 8003806:	681e      	ldr	r6, [r3, #0]
 8003808:	69b3      	ldr	r3, [r6, #24]
 800380a:	b913      	cbnz	r3, 8003812 <__sfp+0x16>
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff ffbd 	bl	800378c <__sinit>
 8003812:	3648      	adds	r6, #72	; 0x48
 8003814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003818:	3b01      	subs	r3, #1
 800381a:	d503      	bpl.n	8003824 <__sfp+0x28>
 800381c:	6833      	ldr	r3, [r6, #0]
 800381e:	b30b      	cbz	r3, 8003864 <__sfp+0x68>
 8003820:	6836      	ldr	r6, [r6, #0]
 8003822:	e7f7      	b.n	8003814 <__sfp+0x18>
 8003824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003828:	b9d5      	cbnz	r5, 8003860 <__sfp+0x64>
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <__sfp+0x88>)
 800382c:	60e3      	str	r3, [r4, #12]
 800382e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003832:	6665      	str	r5, [r4, #100]	; 0x64
 8003834:	f000 f847 	bl	80038c6 <__retarget_lock_init_recursive>
 8003838:	f7ff ff96 	bl	8003768 <__sfp_lock_release>
 800383c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003840:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003844:	6025      	str	r5, [r4, #0]
 8003846:	61a5      	str	r5, [r4, #24]
 8003848:	2208      	movs	r2, #8
 800384a:	4629      	mov	r1, r5
 800384c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003850:	f7ff fc50 	bl	80030f4 <memset>
 8003854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800385c:	4620      	mov	r0, r4
 800385e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003860:	3468      	adds	r4, #104	; 0x68
 8003862:	e7d9      	b.n	8003818 <__sfp+0x1c>
 8003864:	2104      	movs	r1, #4
 8003866:	4638      	mov	r0, r7
 8003868:	f7ff ff62 	bl	8003730 <__sfmoreglue>
 800386c:	4604      	mov	r4, r0
 800386e:	6030      	str	r0, [r6, #0]
 8003870:	2800      	cmp	r0, #0
 8003872:	d1d5      	bne.n	8003820 <__sfp+0x24>
 8003874:	f7ff ff78 	bl	8003768 <__sfp_lock_release>
 8003878:	230c      	movs	r3, #12
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	e7ee      	b.n	800385c <__sfp+0x60>
 800387e:	bf00      	nop
 8003880:	08004384 	.word	0x08004384
 8003884:	ffff0001 	.word	0xffff0001

08003888 <_fwalk_reent>:
 8003888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800388c:	4606      	mov	r6, r0
 800388e:	4688      	mov	r8, r1
 8003890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003894:	2700      	movs	r7, #0
 8003896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800389a:	f1b9 0901 	subs.w	r9, r9, #1
 800389e:	d505      	bpl.n	80038ac <_fwalk_reent+0x24>
 80038a0:	6824      	ldr	r4, [r4, #0]
 80038a2:	2c00      	cmp	r4, #0
 80038a4:	d1f7      	bne.n	8003896 <_fwalk_reent+0xe>
 80038a6:	4638      	mov	r0, r7
 80038a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ac:	89ab      	ldrh	r3, [r5, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d907      	bls.n	80038c2 <_fwalk_reent+0x3a>
 80038b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b6:	3301      	adds	r3, #1
 80038b8:	d003      	beq.n	80038c2 <_fwalk_reent+0x3a>
 80038ba:	4629      	mov	r1, r5
 80038bc:	4630      	mov	r0, r6
 80038be:	47c0      	blx	r8
 80038c0:	4307      	orrs	r7, r0
 80038c2:	3568      	adds	r5, #104	; 0x68
 80038c4:	e7e9      	b.n	800389a <_fwalk_reent+0x12>

080038c6 <__retarget_lock_init_recursive>:
 80038c6:	4770      	bx	lr

080038c8 <__retarget_lock_acquire_recursive>:
 80038c8:	4770      	bx	lr

080038ca <__retarget_lock_release_recursive>:
 80038ca:	4770      	bx	lr

080038cc <__swhatbuf_r>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	460e      	mov	r6, r1
 80038d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d4:	2900      	cmp	r1, #0
 80038d6:	b096      	sub	sp, #88	; 0x58
 80038d8:	4614      	mov	r4, r2
 80038da:	461d      	mov	r5, r3
 80038dc:	da07      	bge.n	80038ee <__swhatbuf_r+0x22>
 80038de:	2300      	movs	r3, #0
 80038e0:	602b      	str	r3, [r5, #0]
 80038e2:	89b3      	ldrh	r3, [r6, #12]
 80038e4:	061a      	lsls	r2, r3, #24
 80038e6:	d410      	bmi.n	800390a <__swhatbuf_r+0x3e>
 80038e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ec:	e00e      	b.n	800390c <__swhatbuf_r+0x40>
 80038ee:	466a      	mov	r2, sp
 80038f0:	f000 fcae 	bl	8004250 <_fstat_r>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	dbf2      	blt.n	80038de <__swhatbuf_r+0x12>
 80038f8:	9a01      	ldr	r2, [sp, #4]
 80038fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003902:	425a      	negs	r2, r3
 8003904:	415a      	adcs	r2, r3
 8003906:	602a      	str	r2, [r5, #0]
 8003908:	e7ee      	b.n	80038e8 <__swhatbuf_r+0x1c>
 800390a:	2340      	movs	r3, #64	; 0x40
 800390c:	2000      	movs	r0, #0
 800390e:	6023      	str	r3, [r4, #0]
 8003910:	b016      	add	sp, #88	; 0x58
 8003912:	bd70      	pop	{r4, r5, r6, pc}

08003914 <__smakebuf_r>:
 8003914:	898b      	ldrh	r3, [r1, #12]
 8003916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003918:	079d      	lsls	r5, r3, #30
 800391a:	4606      	mov	r6, r0
 800391c:	460c      	mov	r4, r1
 800391e:	d507      	bpl.n	8003930 <__smakebuf_r+0x1c>
 8003920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	6123      	str	r3, [r4, #16]
 8003928:	2301      	movs	r3, #1
 800392a:	6163      	str	r3, [r4, #20]
 800392c:	b002      	add	sp, #8
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	ab01      	add	r3, sp, #4
 8003932:	466a      	mov	r2, sp
 8003934:	f7ff ffca 	bl	80038cc <__swhatbuf_r>
 8003938:	9900      	ldr	r1, [sp, #0]
 800393a:	4605      	mov	r5, r0
 800393c:	4630      	mov	r0, r6
 800393e:	f000 f881 	bl	8003a44 <_malloc_r>
 8003942:	b948      	cbnz	r0, 8003958 <__smakebuf_r+0x44>
 8003944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003948:	059a      	lsls	r2, r3, #22
 800394a:	d4ef      	bmi.n	800392c <__smakebuf_r+0x18>
 800394c:	f023 0303 	bic.w	r3, r3, #3
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	e7e3      	b.n	8003920 <__smakebuf_r+0xc>
 8003958:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <__smakebuf_r+0x7c>)
 800395a:	62b3      	str	r3, [r6, #40]	; 0x28
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	6020      	str	r0, [r4, #0]
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	9b00      	ldr	r3, [sp, #0]
 8003968:	6163      	str	r3, [r4, #20]
 800396a:	9b01      	ldr	r3, [sp, #4]
 800396c:	6120      	str	r0, [r4, #16]
 800396e:	b15b      	cbz	r3, 8003988 <__smakebuf_r+0x74>
 8003970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003974:	4630      	mov	r0, r6
 8003976:	f000 fc7d 	bl	8004274 <_isatty_r>
 800397a:	b128      	cbz	r0, 8003988 <__smakebuf_r+0x74>
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	81a3      	strh	r3, [r4, #12]
 8003988:	89a0      	ldrh	r0, [r4, #12]
 800398a:	4305      	orrs	r5, r0
 800398c:	81a5      	strh	r5, [r4, #12]
 800398e:	e7cd      	b.n	800392c <__smakebuf_r+0x18>
 8003990:	08003725 	.word	0x08003725

08003994 <malloc>:
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <malloc+0xc>)
 8003996:	4601      	mov	r1, r0
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f000 b853 	b.w	8003a44 <_malloc_r>
 800399e:	bf00      	nop
 80039a0:	20000014 	.word	0x20000014

080039a4 <_free_r>:
 80039a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039a6:	2900      	cmp	r1, #0
 80039a8:	d048      	beq.n	8003a3c <_free_r+0x98>
 80039aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039ae:	9001      	str	r0, [sp, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f1a1 0404 	sub.w	r4, r1, #4
 80039b6:	bfb8      	it	lt
 80039b8:	18e4      	addlt	r4, r4, r3
 80039ba:	f000 fc7d 	bl	80042b8 <__malloc_lock>
 80039be:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <_free_r+0x9c>)
 80039c0:	9801      	ldr	r0, [sp, #4]
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	4615      	mov	r5, r2
 80039c6:	b933      	cbnz	r3, 80039d6 <_free_r+0x32>
 80039c8:	6063      	str	r3, [r4, #4]
 80039ca:	6014      	str	r4, [r2, #0]
 80039cc:	b003      	add	sp, #12
 80039ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039d2:	f000 bc77 	b.w	80042c4 <__malloc_unlock>
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	d90b      	bls.n	80039f2 <_free_r+0x4e>
 80039da:	6821      	ldr	r1, [r4, #0]
 80039dc:	1862      	adds	r2, r4, r1
 80039de:	4293      	cmp	r3, r2
 80039e0:	bf04      	itt	eq
 80039e2:	681a      	ldreq	r2, [r3, #0]
 80039e4:	685b      	ldreq	r3, [r3, #4]
 80039e6:	6063      	str	r3, [r4, #4]
 80039e8:	bf04      	itt	eq
 80039ea:	1852      	addeq	r2, r2, r1
 80039ec:	6022      	streq	r2, [r4, #0]
 80039ee:	602c      	str	r4, [r5, #0]
 80039f0:	e7ec      	b.n	80039cc <_free_r+0x28>
 80039f2:	461a      	mov	r2, r3
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b10b      	cbz	r3, 80039fc <_free_r+0x58>
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	d9fa      	bls.n	80039f2 <_free_r+0x4e>
 80039fc:	6811      	ldr	r1, [r2, #0]
 80039fe:	1855      	adds	r5, r2, r1
 8003a00:	42a5      	cmp	r5, r4
 8003a02:	d10b      	bne.n	8003a1c <_free_r+0x78>
 8003a04:	6824      	ldr	r4, [r4, #0]
 8003a06:	4421      	add	r1, r4
 8003a08:	1854      	adds	r4, r2, r1
 8003a0a:	42a3      	cmp	r3, r4
 8003a0c:	6011      	str	r1, [r2, #0]
 8003a0e:	d1dd      	bne.n	80039cc <_free_r+0x28>
 8003a10:	681c      	ldr	r4, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	4421      	add	r1, r4
 8003a18:	6011      	str	r1, [r2, #0]
 8003a1a:	e7d7      	b.n	80039cc <_free_r+0x28>
 8003a1c:	d902      	bls.n	8003a24 <_free_r+0x80>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	6003      	str	r3, [r0, #0]
 8003a22:	e7d3      	b.n	80039cc <_free_r+0x28>
 8003a24:	6825      	ldr	r5, [r4, #0]
 8003a26:	1961      	adds	r1, r4, r5
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	bf04      	itt	eq
 8003a2c:	6819      	ldreq	r1, [r3, #0]
 8003a2e:	685b      	ldreq	r3, [r3, #4]
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	bf04      	itt	eq
 8003a34:	1949      	addeq	r1, r1, r5
 8003a36:	6021      	streq	r1, [r4, #0]
 8003a38:	6054      	str	r4, [r2, #4]
 8003a3a:	e7c7      	b.n	80039cc <_free_r+0x28>
 8003a3c:	b003      	add	sp, #12
 8003a3e:	bd30      	pop	{r4, r5, pc}
 8003a40:	200010bc 	.word	0x200010bc

08003a44 <_malloc_r>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	1ccd      	adds	r5, r1, #3
 8003a48:	f025 0503 	bic.w	r5, r5, #3
 8003a4c:	3508      	adds	r5, #8
 8003a4e:	2d0c      	cmp	r5, #12
 8003a50:	bf38      	it	cc
 8003a52:	250c      	movcc	r5, #12
 8003a54:	2d00      	cmp	r5, #0
 8003a56:	4606      	mov	r6, r0
 8003a58:	db01      	blt.n	8003a5e <_malloc_r+0x1a>
 8003a5a:	42a9      	cmp	r1, r5
 8003a5c:	d903      	bls.n	8003a66 <_malloc_r+0x22>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	6033      	str	r3, [r6, #0]
 8003a62:	2000      	movs	r0, #0
 8003a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a66:	f000 fc27 	bl	80042b8 <__malloc_lock>
 8003a6a:	4921      	ldr	r1, [pc, #132]	; (8003af0 <_malloc_r+0xac>)
 8003a6c:	680a      	ldr	r2, [r1, #0]
 8003a6e:	4614      	mov	r4, r2
 8003a70:	b99c      	cbnz	r4, 8003a9a <_malloc_r+0x56>
 8003a72:	4f20      	ldr	r7, [pc, #128]	; (8003af4 <_malloc_r+0xb0>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	b923      	cbnz	r3, 8003a82 <_malloc_r+0x3e>
 8003a78:	4621      	mov	r1, r4
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	f000 fb72 	bl	8004164 <_sbrk_r>
 8003a80:	6038      	str	r0, [r7, #0]
 8003a82:	4629      	mov	r1, r5
 8003a84:	4630      	mov	r0, r6
 8003a86:	f000 fb6d 	bl	8004164 <_sbrk_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d123      	bne.n	8003ad6 <_malloc_r+0x92>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	4630      	mov	r0, r6
 8003a94:	f000 fc16 	bl	80042c4 <__malloc_unlock>
 8003a98:	e7e3      	b.n	8003a62 <_malloc_r+0x1e>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	1b5b      	subs	r3, r3, r5
 8003a9e:	d417      	bmi.n	8003ad0 <_malloc_r+0x8c>
 8003aa0:	2b0b      	cmp	r3, #11
 8003aa2:	d903      	bls.n	8003aac <_malloc_r+0x68>
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	441c      	add	r4, r3
 8003aa8:	6025      	str	r5, [r4, #0]
 8003aaa:	e004      	b.n	8003ab6 <_malloc_r+0x72>
 8003aac:	6863      	ldr	r3, [r4, #4]
 8003aae:	42a2      	cmp	r2, r4
 8003ab0:	bf0c      	ite	eq
 8003ab2:	600b      	streq	r3, [r1, #0]
 8003ab4:	6053      	strne	r3, [r2, #4]
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 fc04 	bl	80042c4 <__malloc_unlock>
 8003abc:	f104 000b 	add.w	r0, r4, #11
 8003ac0:	1d23      	adds	r3, r4, #4
 8003ac2:	f020 0007 	bic.w	r0, r0, #7
 8003ac6:	1ac2      	subs	r2, r0, r3
 8003ac8:	d0cc      	beq.n	8003a64 <_malloc_r+0x20>
 8003aca:	1a1b      	subs	r3, r3, r0
 8003acc:	50a3      	str	r3, [r4, r2]
 8003ace:	e7c9      	b.n	8003a64 <_malloc_r+0x20>
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	6864      	ldr	r4, [r4, #4]
 8003ad4:	e7cc      	b.n	8003a70 <_malloc_r+0x2c>
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d0e3      	beq.n	8003aa8 <_malloc_r+0x64>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f000 fb3e 	bl	8004164 <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d1dd      	bne.n	8003aa8 <_malloc_r+0x64>
 8003aec:	e7cf      	b.n	8003a8e <_malloc_r+0x4a>
 8003aee:	bf00      	nop
 8003af0:	200010bc 	.word	0x200010bc
 8003af4:	200010c0 	.word	0x200010c0

08003af8 <__sfputc_r>:
 8003af8:	6893      	ldr	r3, [r2, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	b410      	push	{r4}
 8003b00:	6093      	str	r3, [r2, #8]
 8003b02:	da08      	bge.n	8003b16 <__sfputc_r+0x1e>
 8003b04:	6994      	ldr	r4, [r2, #24]
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	db01      	blt.n	8003b0e <__sfputc_r+0x16>
 8003b0a:	290a      	cmp	r1, #10
 8003b0c:	d103      	bne.n	8003b16 <__sfputc_r+0x1e>
 8003b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b12:	f7ff bc61 	b.w	80033d8 <__swbuf_r>
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	1c58      	adds	r0, r3, #1
 8003b1a:	6010      	str	r0, [r2, #0]
 8003b1c:	7019      	strb	r1, [r3, #0]
 8003b1e:	4608      	mov	r0, r1
 8003b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <__sfputs_r>:
 8003b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b28:	4606      	mov	r6, r0
 8003b2a:	460f      	mov	r7, r1
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	18d5      	adds	r5, r2, r3
 8003b30:	42ac      	cmp	r4, r5
 8003b32:	d101      	bne.n	8003b38 <__sfputs_r+0x12>
 8003b34:	2000      	movs	r0, #0
 8003b36:	e007      	b.n	8003b48 <__sfputs_r+0x22>
 8003b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3c:	463a      	mov	r2, r7
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f7ff ffda 	bl	8003af8 <__sfputc_r>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d1f3      	bne.n	8003b30 <__sfputs_r+0xa>
 8003b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b4c <_vfiprintf_r>:
 8003b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b50:	460d      	mov	r5, r1
 8003b52:	b09d      	sub	sp, #116	; 0x74
 8003b54:	4614      	mov	r4, r2
 8003b56:	4698      	mov	r8, r3
 8003b58:	4606      	mov	r6, r0
 8003b5a:	b118      	cbz	r0, 8003b64 <_vfiprintf_r+0x18>
 8003b5c:	6983      	ldr	r3, [r0, #24]
 8003b5e:	b90b      	cbnz	r3, 8003b64 <_vfiprintf_r+0x18>
 8003b60:	f7ff fe14 	bl	800378c <__sinit>
 8003b64:	4b89      	ldr	r3, [pc, #548]	; (8003d8c <_vfiprintf_r+0x240>)
 8003b66:	429d      	cmp	r5, r3
 8003b68:	d11b      	bne.n	8003ba2 <_vfiprintf_r+0x56>
 8003b6a:	6875      	ldr	r5, [r6, #4]
 8003b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b6e:	07d9      	lsls	r1, r3, #31
 8003b70:	d405      	bmi.n	8003b7e <_vfiprintf_r+0x32>
 8003b72:	89ab      	ldrh	r3, [r5, #12]
 8003b74:	059a      	lsls	r2, r3, #22
 8003b76:	d402      	bmi.n	8003b7e <_vfiprintf_r+0x32>
 8003b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b7a:	f7ff fea5 	bl	80038c8 <__retarget_lock_acquire_recursive>
 8003b7e:	89ab      	ldrh	r3, [r5, #12]
 8003b80:	071b      	lsls	r3, r3, #28
 8003b82:	d501      	bpl.n	8003b88 <_vfiprintf_r+0x3c>
 8003b84:	692b      	ldr	r3, [r5, #16]
 8003b86:	b9eb      	cbnz	r3, 8003bc4 <_vfiprintf_r+0x78>
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f7ff fc76 	bl	800347c <__swsetup_r>
 8003b90:	b1c0      	cbz	r0, 8003bc4 <_vfiprintf_r+0x78>
 8003b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b94:	07dc      	lsls	r4, r3, #31
 8003b96:	d50e      	bpl.n	8003bb6 <_vfiprintf_r+0x6a>
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	b01d      	add	sp, #116	; 0x74
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba2:	4b7b      	ldr	r3, [pc, #492]	; (8003d90 <_vfiprintf_r+0x244>)
 8003ba4:	429d      	cmp	r5, r3
 8003ba6:	d101      	bne.n	8003bac <_vfiprintf_r+0x60>
 8003ba8:	68b5      	ldr	r5, [r6, #8]
 8003baa:	e7df      	b.n	8003b6c <_vfiprintf_r+0x20>
 8003bac:	4b79      	ldr	r3, [pc, #484]	; (8003d94 <_vfiprintf_r+0x248>)
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	bf08      	it	eq
 8003bb2:	68f5      	ldreq	r5, [r6, #12]
 8003bb4:	e7da      	b.n	8003b6c <_vfiprintf_r+0x20>
 8003bb6:	89ab      	ldrh	r3, [r5, #12]
 8003bb8:	0598      	lsls	r0, r3, #22
 8003bba:	d4ed      	bmi.n	8003b98 <_vfiprintf_r+0x4c>
 8003bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bbe:	f7ff fe84 	bl	80038ca <__retarget_lock_release_recursive>
 8003bc2:	e7e9      	b.n	8003b98 <_vfiprintf_r+0x4c>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc8:	2320      	movs	r3, #32
 8003bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bd2:	2330      	movs	r3, #48	; 0x30
 8003bd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003d98 <_vfiprintf_r+0x24c>
 8003bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bdc:	f04f 0901 	mov.w	r9, #1
 8003be0:	4623      	mov	r3, r4
 8003be2:	469a      	mov	sl, r3
 8003be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003be8:	b10a      	cbz	r2, 8003bee <_vfiprintf_r+0xa2>
 8003bea:	2a25      	cmp	r2, #37	; 0x25
 8003bec:	d1f9      	bne.n	8003be2 <_vfiprintf_r+0x96>
 8003bee:	ebba 0b04 	subs.w	fp, sl, r4
 8003bf2:	d00b      	beq.n	8003c0c <_vfiprintf_r+0xc0>
 8003bf4:	465b      	mov	r3, fp
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7ff ff93 	bl	8003b26 <__sfputs_r>
 8003c00:	3001      	adds	r0, #1
 8003c02:	f000 80aa 	beq.w	8003d5a <_vfiprintf_r+0x20e>
 8003c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c08:	445a      	add	r2, fp
 8003c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a2 	beq.w	8003d5a <_vfiprintf_r+0x20e>
 8003c16:	2300      	movs	r3, #0
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c20:	f10a 0a01 	add.w	sl, sl, #1
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	9307      	str	r3, [sp, #28]
 8003c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c2e:	4654      	mov	r4, sl
 8003c30:	2205      	movs	r2, #5
 8003c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c36:	4858      	ldr	r0, [pc, #352]	; (8003d98 <_vfiprintf_r+0x24c>)
 8003c38:	f7fc faea 	bl	8000210 <memchr>
 8003c3c:	9a04      	ldr	r2, [sp, #16]
 8003c3e:	b9d8      	cbnz	r0, 8003c78 <_vfiprintf_r+0x12c>
 8003c40:	06d1      	lsls	r1, r2, #27
 8003c42:	bf44      	itt	mi
 8003c44:	2320      	movmi	r3, #32
 8003c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c4a:	0713      	lsls	r3, r2, #28
 8003c4c:	bf44      	itt	mi
 8003c4e:	232b      	movmi	r3, #43	; 0x2b
 8003c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c54:	f89a 3000 	ldrb.w	r3, [sl]
 8003c58:	2b2a      	cmp	r3, #42	; 0x2a
 8003c5a:	d015      	beq.n	8003c88 <_vfiprintf_r+0x13c>
 8003c5c:	9a07      	ldr	r2, [sp, #28]
 8003c5e:	4654      	mov	r4, sl
 8003c60:	2000      	movs	r0, #0
 8003c62:	f04f 0c0a 	mov.w	ip, #10
 8003c66:	4621      	mov	r1, r4
 8003c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c6c:	3b30      	subs	r3, #48	; 0x30
 8003c6e:	2b09      	cmp	r3, #9
 8003c70:	d94e      	bls.n	8003d10 <_vfiprintf_r+0x1c4>
 8003c72:	b1b0      	cbz	r0, 8003ca2 <_vfiprintf_r+0x156>
 8003c74:	9207      	str	r2, [sp, #28]
 8003c76:	e014      	b.n	8003ca2 <_vfiprintf_r+0x156>
 8003c78:	eba0 0308 	sub.w	r3, r0, r8
 8003c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c80:	4313      	orrs	r3, r2
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	46a2      	mov	sl, r4
 8003c86:	e7d2      	b.n	8003c2e <_vfiprintf_r+0xe2>
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	1d19      	adds	r1, r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	9103      	str	r1, [sp, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bfbb      	ittet	lt
 8003c94:	425b      	neglt	r3, r3
 8003c96:	f042 0202 	orrlt.w	r2, r2, #2
 8003c9a:	9307      	strge	r3, [sp, #28]
 8003c9c:	9307      	strlt	r3, [sp, #28]
 8003c9e:	bfb8      	it	lt
 8003ca0:	9204      	strlt	r2, [sp, #16]
 8003ca2:	7823      	ldrb	r3, [r4, #0]
 8003ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ca6:	d10c      	bne.n	8003cc2 <_vfiprintf_r+0x176>
 8003ca8:	7863      	ldrb	r3, [r4, #1]
 8003caa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cac:	d135      	bne.n	8003d1a <_vfiprintf_r+0x1ce>
 8003cae:	9b03      	ldr	r3, [sp, #12]
 8003cb0:	1d1a      	adds	r2, r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	9203      	str	r2, [sp, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bfb8      	it	lt
 8003cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cbe:	3402      	adds	r4, #2
 8003cc0:	9305      	str	r3, [sp, #20]
 8003cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003da8 <_vfiprintf_r+0x25c>
 8003cc6:	7821      	ldrb	r1, [r4, #0]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4650      	mov	r0, sl
 8003ccc:	f7fc faa0 	bl	8000210 <memchr>
 8003cd0:	b140      	cbz	r0, 8003ce4 <_vfiprintf_r+0x198>
 8003cd2:	2340      	movs	r3, #64	; 0x40
 8003cd4:	eba0 000a 	sub.w	r0, r0, sl
 8003cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8003cdc:	9b04      	ldr	r3, [sp, #16]
 8003cde:	4303      	orrs	r3, r0
 8003ce0:	3401      	adds	r4, #1
 8003ce2:	9304      	str	r3, [sp, #16]
 8003ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce8:	482c      	ldr	r0, [pc, #176]	; (8003d9c <_vfiprintf_r+0x250>)
 8003cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cee:	2206      	movs	r2, #6
 8003cf0:	f7fc fa8e 	bl	8000210 <memchr>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d03f      	beq.n	8003d78 <_vfiprintf_r+0x22c>
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <_vfiprintf_r+0x254>)
 8003cfa:	bb1b      	cbnz	r3, 8003d44 <_vfiprintf_r+0x1f8>
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	3307      	adds	r3, #7
 8003d00:	f023 0307 	bic.w	r3, r3, #7
 8003d04:	3308      	adds	r3, #8
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0a:	443b      	add	r3, r7
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0e:	e767      	b.n	8003be0 <_vfiprintf_r+0x94>
 8003d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d14:	460c      	mov	r4, r1
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7a5      	b.n	8003c66 <_vfiprintf_r+0x11a>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	3401      	adds	r4, #1
 8003d1e:	9305      	str	r3, [sp, #20]
 8003d20:	4619      	mov	r1, r3
 8003d22:	f04f 0c0a 	mov.w	ip, #10
 8003d26:	4620      	mov	r0, r4
 8003d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d2c:	3a30      	subs	r2, #48	; 0x30
 8003d2e:	2a09      	cmp	r2, #9
 8003d30:	d903      	bls.n	8003d3a <_vfiprintf_r+0x1ee>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0c5      	beq.n	8003cc2 <_vfiprintf_r+0x176>
 8003d36:	9105      	str	r1, [sp, #20]
 8003d38:	e7c3      	b.n	8003cc2 <_vfiprintf_r+0x176>
 8003d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d3e:	4604      	mov	r4, r0
 8003d40:	2301      	movs	r3, #1
 8003d42:	e7f0      	b.n	8003d26 <_vfiprintf_r+0x1da>
 8003d44:	ab03      	add	r3, sp, #12
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <_vfiprintf_r+0x258>)
 8003d4c:	a904      	add	r1, sp, #16
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f3af 8000 	nop.w
 8003d54:	4607      	mov	r7, r0
 8003d56:	1c78      	adds	r0, r7, #1
 8003d58:	d1d6      	bne.n	8003d08 <_vfiprintf_r+0x1bc>
 8003d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d5c:	07d9      	lsls	r1, r3, #31
 8003d5e:	d405      	bmi.n	8003d6c <_vfiprintf_r+0x220>
 8003d60:	89ab      	ldrh	r3, [r5, #12]
 8003d62:	059a      	lsls	r2, r3, #22
 8003d64:	d402      	bmi.n	8003d6c <_vfiprintf_r+0x220>
 8003d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d68:	f7ff fdaf 	bl	80038ca <__retarget_lock_release_recursive>
 8003d6c:	89ab      	ldrh	r3, [r5, #12]
 8003d6e:	065b      	lsls	r3, r3, #25
 8003d70:	f53f af12 	bmi.w	8003b98 <_vfiprintf_r+0x4c>
 8003d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d76:	e711      	b.n	8003b9c <_vfiprintf_r+0x50>
 8003d78:	ab03      	add	r3, sp, #12
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <_vfiprintf_r+0x258>)
 8003d80:	a904      	add	r1, sp, #16
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 f880 	bl	8003e88 <_printf_i>
 8003d88:	e7e4      	b.n	8003d54 <_vfiprintf_r+0x208>
 8003d8a:	bf00      	nop
 8003d8c:	080043a8 	.word	0x080043a8
 8003d90:	080043c8 	.word	0x080043c8
 8003d94:	08004388 	.word	0x08004388
 8003d98:	080043e8 	.word	0x080043e8
 8003d9c:	080043f2 	.word	0x080043f2
 8003da0:	00000000 	.word	0x00000000
 8003da4:	08003b27 	.word	0x08003b27
 8003da8:	080043ee 	.word	0x080043ee

08003dac <_printf_common>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	4616      	mov	r6, r2
 8003db2:	4699      	mov	r9, r3
 8003db4:	688a      	ldr	r2, [r1, #8]
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bfb8      	it	lt
 8003dc0:	4613      	movlt	r3, r2
 8003dc2:	6033      	str	r3, [r6, #0]
 8003dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc8:	4607      	mov	r7, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_printf_common+0x26>
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	6833      	ldrmi	r3, [r6, #0]
 8003dda:	3302      	addmi	r3, #2
 8003ddc:	6033      	strmi	r3, [r6, #0]
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	f015 0506 	ands.w	r5, r5, #6
 8003de4:	d106      	bne.n	8003df4 <_printf_common+0x48>
 8003de6:	f104 0a19 	add.w	sl, r4, #25
 8003dea:	68e3      	ldr	r3, [r4, #12]
 8003dec:	6832      	ldr	r2, [r6, #0]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	dc26      	bgt.n	8003e42 <_printf_common+0x96>
 8003df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003df8:	1e13      	subs	r3, r2, #0
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	bf18      	it	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	0692      	lsls	r2, r2, #26
 8003e02:	d42b      	bmi.n	8003e5c <_printf_common+0xb0>
 8003e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e08:	4649      	mov	r1, r9
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d01e      	beq.n	8003e50 <_printf_common+0xa4>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	68e5      	ldr	r5, [r4, #12]
 8003e16:	6832      	ldr	r2, [r6, #0]
 8003e18:	f003 0306 	and.w	r3, r3, #6
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	bf08      	it	eq
 8003e20:	1aad      	subeq	r5, r5, r2
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	6922      	ldr	r2, [r4, #16]
 8003e26:	bf0c      	ite	eq
 8003e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e2c:	2500      	movne	r5, #0
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	bfc4      	itt	gt
 8003e32:	1a9b      	subgt	r3, r3, r2
 8003e34:	18ed      	addgt	r5, r5, r3
 8003e36:	2600      	movs	r6, #0
 8003e38:	341a      	adds	r4, #26
 8003e3a:	42b5      	cmp	r5, r6
 8003e3c:	d11a      	bne.n	8003e74 <_printf_common+0xc8>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e008      	b.n	8003e54 <_printf_common+0xa8>
 8003e42:	2301      	movs	r3, #1
 8003e44:	4652      	mov	r2, sl
 8003e46:	4649      	mov	r1, r9
 8003e48:	4638      	mov	r0, r7
 8003e4a:	47c0      	blx	r8
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d103      	bne.n	8003e58 <_printf_common+0xac>
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e58:	3501      	adds	r5, #1
 8003e5a:	e7c6      	b.n	8003dea <_printf_common+0x3e>
 8003e5c:	18e1      	adds	r1, r4, r3
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	2030      	movs	r0, #48	; 0x30
 8003e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e66:	4422      	add	r2, r4
 8003e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e70:	3302      	adds	r3, #2
 8003e72:	e7c7      	b.n	8003e04 <_printf_common+0x58>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4622      	mov	r2, r4
 8003e78:	4649      	mov	r1, r9
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	47c0      	blx	r8
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d0e6      	beq.n	8003e50 <_printf_common+0xa4>
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7d9      	b.n	8003e3a <_printf_common+0x8e>
	...

08003e88 <_printf_i>:
 8003e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	4691      	mov	r9, r2
 8003e90:	7e27      	ldrb	r7, [r4, #24]
 8003e92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e94:	2f78      	cmp	r7, #120	; 0x78
 8003e96:	4680      	mov	r8, r0
 8003e98:	469a      	mov	sl, r3
 8003e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e9e:	d807      	bhi.n	8003eb0 <_printf_i+0x28>
 8003ea0:	2f62      	cmp	r7, #98	; 0x62
 8003ea2:	d80a      	bhi.n	8003eba <_printf_i+0x32>
 8003ea4:	2f00      	cmp	r7, #0
 8003ea6:	f000 80d8 	beq.w	800405a <_printf_i+0x1d2>
 8003eaa:	2f58      	cmp	r7, #88	; 0x58
 8003eac:	f000 80a3 	beq.w	8003ff6 <_printf_i+0x16e>
 8003eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eb8:	e03a      	b.n	8003f30 <_printf_i+0xa8>
 8003eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ebe:	2b15      	cmp	r3, #21
 8003ec0:	d8f6      	bhi.n	8003eb0 <_printf_i+0x28>
 8003ec2:	a001      	add	r0, pc, #4	; (adr r0, 8003ec8 <_printf_i+0x40>)
 8003ec4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ec8:	08003f21 	.word	0x08003f21
 8003ecc:	08003f35 	.word	0x08003f35
 8003ed0:	08003eb1 	.word	0x08003eb1
 8003ed4:	08003eb1 	.word	0x08003eb1
 8003ed8:	08003eb1 	.word	0x08003eb1
 8003edc:	08003eb1 	.word	0x08003eb1
 8003ee0:	08003f35 	.word	0x08003f35
 8003ee4:	08003eb1 	.word	0x08003eb1
 8003ee8:	08003eb1 	.word	0x08003eb1
 8003eec:	08003eb1 	.word	0x08003eb1
 8003ef0:	08003eb1 	.word	0x08003eb1
 8003ef4:	08004041 	.word	0x08004041
 8003ef8:	08003f65 	.word	0x08003f65
 8003efc:	08004023 	.word	0x08004023
 8003f00:	08003eb1 	.word	0x08003eb1
 8003f04:	08003eb1 	.word	0x08003eb1
 8003f08:	08004063 	.word	0x08004063
 8003f0c:	08003eb1 	.word	0x08003eb1
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003eb1 	.word	0x08003eb1
 8003f18:	08003eb1 	.word	0x08003eb1
 8003f1c:	0800402b 	.word	0x0800402b
 8003f20:	680b      	ldr	r3, [r1, #0]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	600a      	str	r2, [r1, #0]
 8003f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0a3      	b.n	800407c <_printf_i+0x1f4>
 8003f34:	6825      	ldr	r5, [r4, #0]
 8003f36:	6808      	ldr	r0, [r1, #0]
 8003f38:	062e      	lsls	r6, r5, #24
 8003f3a:	f100 0304 	add.w	r3, r0, #4
 8003f3e:	d50a      	bpl.n	8003f56 <_printf_i+0xce>
 8003f40:	6805      	ldr	r5, [r0, #0]
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	2d00      	cmp	r5, #0
 8003f46:	da03      	bge.n	8003f50 <_printf_i+0xc8>
 8003f48:	232d      	movs	r3, #45	; 0x2d
 8003f4a:	426d      	negs	r5, r5
 8003f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f50:	485e      	ldr	r0, [pc, #376]	; (80040cc <_printf_i+0x244>)
 8003f52:	230a      	movs	r3, #10
 8003f54:	e019      	b.n	8003f8a <_printf_i+0x102>
 8003f56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f5a:	6805      	ldr	r5, [r0, #0]
 8003f5c:	600b      	str	r3, [r1, #0]
 8003f5e:	bf18      	it	ne
 8003f60:	b22d      	sxthne	r5, r5
 8003f62:	e7ef      	b.n	8003f44 <_printf_i+0xbc>
 8003f64:	680b      	ldr	r3, [r1, #0]
 8003f66:	6825      	ldr	r5, [r4, #0]
 8003f68:	1d18      	adds	r0, r3, #4
 8003f6a:	6008      	str	r0, [r1, #0]
 8003f6c:	0628      	lsls	r0, r5, #24
 8003f6e:	d501      	bpl.n	8003f74 <_printf_i+0xec>
 8003f70:	681d      	ldr	r5, [r3, #0]
 8003f72:	e002      	b.n	8003f7a <_printf_i+0xf2>
 8003f74:	0669      	lsls	r1, r5, #25
 8003f76:	d5fb      	bpl.n	8003f70 <_printf_i+0xe8>
 8003f78:	881d      	ldrh	r5, [r3, #0]
 8003f7a:	4854      	ldr	r0, [pc, #336]	; (80040cc <_printf_i+0x244>)
 8003f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f7e:	bf0c      	ite	eq
 8003f80:	2308      	moveq	r3, #8
 8003f82:	230a      	movne	r3, #10
 8003f84:	2100      	movs	r1, #0
 8003f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f8a:	6866      	ldr	r6, [r4, #4]
 8003f8c:	60a6      	str	r6, [r4, #8]
 8003f8e:	2e00      	cmp	r6, #0
 8003f90:	bfa2      	ittt	ge
 8003f92:	6821      	ldrge	r1, [r4, #0]
 8003f94:	f021 0104 	bicge.w	r1, r1, #4
 8003f98:	6021      	strge	r1, [r4, #0]
 8003f9a:	b90d      	cbnz	r5, 8003fa0 <_printf_i+0x118>
 8003f9c:	2e00      	cmp	r6, #0
 8003f9e:	d04d      	beq.n	800403c <_printf_i+0x1b4>
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fa6:	fb03 5711 	mls	r7, r3, r1, r5
 8003faa:	5dc7      	ldrb	r7, [r0, r7]
 8003fac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fb0:	462f      	mov	r7, r5
 8003fb2:	42bb      	cmp	r3, r7
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	d9f4      	bls.n	8003fa2 <_printf_i+0x11a>
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d10b      	bne.n	8003fd4 <_printf_i+0x14c>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	07df      	lsls	r7, r3, #31
 8003fc0:	d508      	bpl.n	8003fd4 <_printf_i+0x14c>
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	6861      	ldr	r1, [r4, #4]
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	bfde      	ittt	le
 8003fca:	2330      	movle	r3, #48	; 0x30
 8003fcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fd4:	1b92      	subs	r2, r2, r6
 8003fd6:	6122      	str	r2, [r4, #16]
 8003fd8:	f8cd a000 	str.w	sl, [sp]
 8003fdc:	464b      	mov	r3, r9
 8003fde:	aa03      	add	r2, sp, #12
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	f7ff fee2 	bl	8003dac <_printf_common>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d14c      	bne.n	8004086 <_printf_i+0x1fe>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	b004      	add	sp, #16
 8003ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff6:	4835      	ldr	r0, [pc, #212]	; (80040cc <_printf_i+0x244>)
 8003ff8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	680e      	ldr	r6, [r1, #0]
 8004000:	061f      	lsls	r7, r3, #24
 8004002:	f856 5b04 	ldr.w	r5, [r6], #4
 8004006:	600e      	str	r6, [r1, #0]
 8004008:	d514      	bpl.n	8004034 <_printf_i+0x1ac>
 800400a:	07d9      	lsls	r1, r3, #31
 800400c:	bf44      	itt	mi
 800400e:	f043 0320 	orrmi.w	r3, r3, #32
 8004012:	6023      	strmi	r3, [r4, #0]
 8004014:	b91d      	cbnz	r5, 800401e <_printf_i+0x196>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	f023 0320 	bic.w	r3, r3, #32
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	2310      	movs	r3, #16
 8004020:	e7b0      	b.n	8003f84 <_printf_i+0xfc>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	2378      	movs	r3, #120	; 0x78
 800402c:	4828      	ldr	r0, [pc, #160]	; (80040d0 <_printf_i+0x248>)
 800402e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004032:	e7e3      	b.n	8003ffc <_printf_i+0x174>
 8004034:	065e      	lsls	r6, r3, #25
 8004036:	bf48      	it	mi
 8004038:	b2ad      	uxthmi	r5, r5
 800403a:	e7e6      	b.n	800400a <_printf_i+0x182>
 800403c:	4616      	mov	r6, r2
 800403e:	e7bb      	b.n	8003fb8 <_printf_i+0x130>
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	6826      	ldr	r6, [r4, #0]
 8004044:	6960      	ldr	r0, [r4, #20]
 8004046:	1d1d      	adds	r5, r3, #4
 8004048:	600d      	str	r5, [r1, #0]
 800404a:	0635      	lsls	r5, r6, #24
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	d501      	bpl.n	8004054 <_printf_i+0x1cc>
 8004050:	6018      	str	r0, [r3, #0]
 8004052:	e002      	b.n	800405a <_printf_i+0x1d2>
 8004054:	0671      	lsls	r1, r6, #25
 8004056:	d5fb      	bpl.n	8004050 <_printf_i+0x1c8>
 8004058:	8018      	strh	r0, [r3, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	4616      	mov	r6, r2
 8004060:	e7ba      	b.n	8003fd8 <_printf_i+0x150>
 8004062:	680b      	ldr	r3, [r1, #0]
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	600a      	str	r2, [r1, #0]
 8004068:	681e      	ldr	r6, [r3, #0]
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	2100      	movs	r1, #0
 800406e:	4630      	mov	r0, r6
 8004070:	f7fc f8ce 	bl	8000210 <memchr>
 8004074:	b108      	cbz	r0, 800407a <_printf_i+0x1f2>
 8004076:	1b80      	subs	r0, r0, r6
 8004078:	6060      	str	r0, [r4, #4]
 800407a:	6863      	ldr	r3, [r4, #4]
 800407c:	6123      	str	r3, [r4, #16]
 800407e:	2300      	movs	r3, #0
 8004080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004084:	e7a8      	b.n	8003fd8 <_printf_i+0x150>
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	4632      	mov	r2, r6
 800408a:	4649      	mov	r1, r9
 800408c:	4640      	mov	r0, r8
 800408e:	47d0      	blx	sl
 8004090:	3001      	adds	r0, #1
 8004092:	d0ab      	beq.n	8003fec <_printf_i+0x164>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	079b      	lsls	r3, r3, #30
 8004098:	d413      	bmi.n	80040c2 <_printf_i+0x23a>
 800409a:	68e0      	ldr	r0, [r4, #12]
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	4298      	cmp	r0, r3
 80040a0:	bfb8      	it	lt
 80040a2:	4618      	movlt	r0, r3
 80040a4:	e7a4      	b.n	8003ff0 <_printf_i+0x168>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4632      	mov	r2, r6
 80040aa:	4649      	mov	r1, r9
 80040ac:	4640      	mov	r0, r8
 80040ae:	47d0      	blx	sl
 80040b0:	3001      	adds	r0, #1
 80040b2:	d09b      	beq.n	8003fec <_printf_i+0x164>
 80040b4:	3501      	adds	r5, #1
 80040b6:	68e3      	ldr	r3, [r4, #12]
 80040b8:	9903      	ldr	r1, [sp, #12]
 80040ba:	1a5b      	subs	r3, r3, r1
 80040bc:	42ab      	cmp	r3, r5
 80040be:	dcf2      	bgt.n	80040a6 <_printf_i+0x21e>
 80040c0:	e7eb      	b.n	800409a <_printf_i+0x212>
 80040c2:	2500      	movs	r5, #0
 80040c4:	f104 0619 	add.w	r6, r4, #25
 80040c8:	e7f5      	b.n	80040b6 <_printf_i+0x22e>
 80040ca:	bf00      	nop
 80040cc:	080043f9 	.word	0x080043f9
 80040d0:	0800440a 	.word	0x0800440a

080040d4 <_putc_r>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	460d      	mov	r5, r1
 80040d8:	4614      	mov	r4, r2
 80040da:	4606      	mov	r6, r0
 80040dc:	b118      	cbz	r0, 80040e6 <_putc_r+0x12>
 80040de:	6983      	ldr	r3, [r0, #24]
 80040e0:	b90b      	cbnz	r3, 80040e6 <_putc_r+0x12>
 80040e2:	f7ff fb53 	bl	800378c <__sinit>
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <_putc_r+0x84>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d124      	bne.n	8004136 <_putc_r+0x62>
 80040ec:	6874      	ldr	r4, [r6, #4]
 80040ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040f0:	07d8      	lsls	r0, r3, #31
 80040f2:	d405      	bmi.n	8004100 <_putc_r+0x2c>
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	0599      	lsls	r1, r3, #22
 80040f8:	d402      	bmi.n	8004100 <_putc_r+0x2c>
 80040fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040fc:	f7ff fbe4 	bl	80038c8 <__retarget_lock_acquire_recursive>
 8004100:	68a3      	ldr	r3, [r4, #8]
 8004102:	3b01      	subs	r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	60a3      	str	r3, [r4, #8]
 8004108:	da05      	bge.n	8004116 <_putc_r+0x42>
 800410a:	69a2      	ldr	r2, [r4, #24]
 800410c:	4293      	cmp	r3, r2
 800410e:	db1c      	blt.n	800414a <_putc_r+0x76>
 8004110:	b2eb      	uxtb	r3, r5
 8004112:	2b0a      	cmp	r3, #10
 8004114:	d019      	beq.n	800414a <_putc_r+0x76>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	6022      	str	r2, [r4, #0]
 800411c:	701d      	strb	r5, [r3, #0]
 800411e:	b2ed      	uxtb	r5, r5
 8004120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004122:	07da      	lsls	r2, r3, #31
 8004124:	d405      	bmi.n	8004132 <_putc_r+0x5e>
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	059b      	lsls	r3, r3, #22
 800412a:	d402      	bmi.n	8004132 <_putc_r+0x5e>
 800412c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412e:	f7ff fbcc 	bl	80038ca <__retarget_lock_release_recursive>
 8004132:	4628      	mov	r0, r5
 8004134:	bd70      	pop	{r4, r5, r6, pc}
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <_putc_r+0x88>)
 8004138:	429c      	cmp	r4, r3
 800413a:	d101      	bne.n	8004140 <_putc_r+0x6c>
 800413c:	68b4      	ldr	r4, [r6, #8]
 800413e:	e7d6      	b.n	80040ee <_putc_r+0x1a>
 8004140:	4b07      	ldr	r3, [pc, #28]	; (8004160 <_putc_r+0x8c>)
 8004142:	429c      	cmp	r4, r3
 8004144:	bf08      	it	eq
 8004146:	68f4      	ldreq	r4, [r6, #12]
 8004148:	e7d1      	b.n	80040ee <_putc_r+0x1a>
 800414a:	4629      	mov	r1, r5
 800414c:	4622      	mov	r2, r4
 800414e:	4630      	mov	r0, r6
 8004150:	f7ff f942 	bl	80033d8 <__swbuf_r>
 8004154:	4605      	mov	r5, r0
 8004156:	e7e3      	b.n	8004120 <_putc_r+0x4c>
 8004158:	080043a8 	.word	0x080043a8
 800415c:	080043c8 	.word	0x080043c8
 8004160:	08004388 	.word	0x08004388

08004164 <_sbrk_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4d06      	ldr	r5, [pc, #24]	; (8004180 <_sbrk_r+0x1c>)
 8004168:	2300      	movs	r3, #0
 800416a:	4604      	mov	r4, r0
 800416c:	4608      	mov	r0, r1
 800416e:	602b      	str	r3, [r5, #0]
 8004170:	f7fd f90c 	bl	800138c <_sbrk>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_sbrk_r+0x1a>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_sbrk_r+0x1a>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	200014d8 	.word	0x200014d8

08004184 <__sread>:
 8004184:	b510      	push	{r4, lr}
 8004186:	460c      	mov	r4, r1
 8004188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418c:	f000 f8a0 	bl	80042d0 <_read_r>
 8004190:	2800      	cmp	r0, #0
 8004192:	bfab      	itete	ge
 8004194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004196:	89a3      	ldrhlt	r3, [r4, #12]
 8004198:	181b      	addge	r3, r3, r0
 800419a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800419e:	bfac      	ite	ge
 80041a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80041a2:	81a3      	strhlt	r3, [r4, #12]
 80041a4:	bd10      	pop	{r4, pc}

080041a6 <__swrite>:
 80041a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041aa:	461f      	mov	r7, r3
 80041ac:	898b      	ldrh	r3, [r1, #12]
 80041ae:	05db      	lsls	r3, r3, #23
 80041b0:	4605      	mov	r5, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	4616      	mov	r6, r2
 80041b6:	d505      	bpl.n	80041c4 <__swrite+0x1e>
 80041b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041bc:	2302      	movs	r3, #2
 80041be:	2200      	movs	r2, #0
 80041c0:	f000 f868 	bl	8004294 <_lseek_r>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	4632      	mov	r2, r6
 80041d2:	463b      	mov	r3, r7
 80041d4:	4628      	mov	r0, r5
 80041d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041da:	f000 b817 	b.w	800420c <_write_r>

080041de <__sseek>:
 80041de:	b510      	push	{r4, lr}
 80041e0:	460c      	mov	r4, r1
 80041e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e6:	f000 f855 	bl	8004294 <_lseek_r>
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	bf15      	itete	ne
 80041f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80041f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041fa:	81a3      	strheq	r3, [r4, #12]
 80041fc:	bf18      	it	ne
 80041fe:	81a3      	strhne	r3, [r4, #12]
 8004200:	bd10      	pop	{r4, pc}

08004202 <__sclose>:
 8004202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004206:	f000 b813 	b.w	8004230 <_close_r>
	...

0800420c <_write_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4d07      	ldr	r5, [pc, #28]	; (800422c <_write_r+0x20>)
 8004210:	4604      	mov	r4, r0
 8004212:	4608      	mov	r0, r1
 8004214:	4611      	mov	r1, r2
 8004216:	2200      	movs	r2, #0
 8004218:	602a      	str	r2, [r5, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	f7fd f9b4 	bl	8001588 <_write>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d102      	bne.n	800422a <_write_r+0x1e>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	b103      	cbz	r3, 800422a <_write_r+0x1e>
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	bd38      	pop	{r3, r4, r5, pc}
 800422c:	200014d8 	.word	0x200014d8

08004230 <_close_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4d06      	ldr	r5, [pc, #24]	; (800424c <_close_r+0x1c>)
 8004234:	2300      	movs	r3, #0
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	f7fd f872 	bl	8001324 <_close>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_close_r+0x1a>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_close_r+0x1a>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	200014d8 	.word	0x200014d8

08004250 <_fstat_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d07      	ldr	r5, [pc, #28]	; (8004270 <_fstat_r+0x20>)
 8004254:	2300      	movs	r3, #0
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	4611      	mov	r1, r2
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	f7fd f86d 	bl	800133c <_fstat>
 8004262:	1c43      	adds	r3, r0, #1
 8004264:	d102      	bne.n	800426c <_fstat_r+0x1c>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	b103      	cbz	r3, 800426c <_fstat_r+0x1c>
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	bd38      	pop	{r3, r4, r5, pc}
 800426e:	bf00      	nop
 8004270:	200014d8 	.word	0x200014d8

08004274 <_isatty_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4d06      	ldr	r5, [pc, #24]	; (8004290 <_isatty_r+0x1c>)
 8004278:	2300      	movs	r3, #0
 800427a:	4604      	mov	r4, r0
 800427c:	4608      	mov	r0, r1
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	f7fd f86c 	bl	800135c <_isatty>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_isatty_r+0x1a>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	b103      	cbz	r3, 800428e <_isatty_r+0x1a>
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	200014d8 	.word	0x200014d8

08004294 <_lseek_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4d07      	ldr	r5, [pc, #28]	; (80042b4 <_lseek_r+0x20>)
 8004298:	4604      	mov	r4, r0
 800429a:	4608      	mov	r0, r1
 800429c:	4611      	mov	r1, r2
 800429e:	2200      	movs	r2, #0
 80042a0:	602a      	str	r2, [r5, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f7fd f865 	bl	8001372 <_lseek>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d102      	bne.n	80042b2 <_lseek_r+0x1e>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	b103      	cbz	r3, 80042b2 <_lseek_r+0x1e>
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	200014d8 	.word	0x200014d8

080042b8 <__malloc_lock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__malloc_lock+0x8>)
 80042ba:	f7ff bb05 	b.w	80038c8 <__retarget_lock_acquire_recursive>
 80042be:	bf00      	nop
 80042c0:	200014d0 	.word	0x200014d0

080042c4 <__malloc_unlock>:
 80042c4:	4801      	ldr	r0, [pc, #4]	; (80042cc <__malloc_unlock+0x8>)
 80042c6:	f7ff bb00 	b.w	80038ca <__retarget_lock_release_recursive>
 80042ca:	bf00      	nop
 80042cc:	200014d0 	.word	0x200014d0

080042d0 <_read_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4d07      	ldr	r5, [pc, #28]	; (80042f0 <_read_r+0x20>)
 80042d4:	4604      	mov	r4, r0
 80042d6:	4608      	mov	r0, r1
 80042d8:	4611      	mov	r1, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	602a      	str	r2, [r5, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7fd f920 	bl	8001524 <_read>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_read_r+0x1e>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_read_r+0x1e>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	200014d8 	.word	0x200014d8

080042f4 <_init>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr

08004300 <_fini>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr
