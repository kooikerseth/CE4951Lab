
CE4951Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ac  080039ac  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039b4  080039b4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080039bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001464  20000078  08003a34  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014dc  08003a34  000214dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d99b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb3  00000000  00000000  0002da43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002f9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00030540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bd2  00000000  00000000  00030f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca8c  00000000  00000000  00053b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfe0e  00000000  00000000  000605ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001303fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003594  00000000  00000000  00130450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000078 	.word	0x20000078
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003918 	.word	0x08003918

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	08003918 	.word	0x08003918

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <cq_init>:
/*
Initializes a circular queue and returns it
 @ param void
 @ return the initialized circular queue
*/
circular_queue cq_init( void ) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000502:	af00      	add	r7, sp, #0
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	6018      	str	r0, [r3, #0]

    // create a circular queue with default values
    circular_queue cq = {
 8000508:	f107 0308 	add.w	r3, r7, #8
 800050c:	4618      	mov	r0, r3
 800050e:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000512:	461a      	mov	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f002 fc05 	bl	8002d24 <memset>
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	2201      	movs	r2, #1
 8000520:	609a      	str	r2, [r3, #8]
            .isempty = DEFAULT_ISEMPTY,
            .isfull = DEFAULT_ISFULL
    };

    // return the circular queue
    return cq;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	4610      	mov	r0, r2
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000532:	461a      	mov	r2, r3
 8000534:	f002 fbe8 	bl	8002d08 <memcpy>
}
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <cq_push>:
Pushes an element into the circular queue
@ param cq - the circular queue to push into
@ param c - the character to push into the queue
@ return void
*/
void cq_push( circular_queue * cq, char c ) {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]

    // push the character into the queue then increment the pusher
    cq->buffer[(cq->pusher)++] = c;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	1c59      	adds	r1, r3, #1
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	6011      	str	r1, [r2, #0]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	78fa      	ldrb	r2, [r7, #3]
 8000560:	741a      	strb	r2, [r3, #16]

    // if the pusher passes the end of the buffer, put it back at the start of the buffer
    if ( cq->pusher == CIRCULAR_QUEUE_SIZE ) cq->pusher = 0;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800056a:	d102      	bne.n	8000572 <cq_push+0x2e>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]

    // set the full flag if the pusher moves to the same position as the puller
    cq->isfull = ( cq->pusher == cq->puller );
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	429a      	cmp	r2, r3
 800057c:	bf0c      	ite	eq
 800057e:	2301      	moveq	r3, #1
 8000580:	2300      	movne	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	60da      	str	r2, [r3, #12]

    // clear the empty flag
    cq->isempty = 0;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <cq_pull>:
/*
Pulls the next element from the circular queue
@ param cq - the circular queue to pull from
@ return the character from the queue
*/
char cq_pull( circular_queue * cq ) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

    // pull the character out of the queue and increment the puller
    char c = cq->buffer[(cq->puller)++];
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	1c59      	adds	r1, r3, #1
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	6051      	str	r1, [r2, #4]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	7c1b      	ldrb	r3, [r3, #16]
 80005b4:	73fb      	strb	r3, [r7, #15]

    // if the pusher passes the end of the buffer, put it back at the start of the buffer
    if ( cq->puller == CIRCULAR_QUEUE_SIZE ) cq->puller = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005be:	d102      	bne.n	80005c6 <cq_pull+0x2a>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]

    // set the empty flag if the puller moves to the same position as the pusher
    cq->isempty = ( cq->puller == cq->pusher );
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685a      	ldr	r2, [r3, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	609a      	str	r2, [r3, #8]

    // clear the full flag
    cq->isfull = 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]

    // return the character
    return c;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <cq_isempty>:
/*
Determines whether a circular queue is empty or not
@ param cq - the circular queue to analyze
@ return 1 if the circular queue is empty, 0 otherwise
*/
int cq_isempty( circular_queue * cq ) {
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
    return cq->isempty;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <cq_isfull>:
/*
Determines whether a circular queue is full or not
@ param cq - the circular queue to analyze
@ return 1 if the circular queue is full, 0 otherwise
*/
int cq_isfull( circular_queue * cq ) {
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
    return cq->isfull;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	68db      	ldr	r3, [r3, #12]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a25      	ldr	r2, [pc, #148]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d13c      	bne.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x8c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063c:	4823      	ldr	r0, [pc, #140]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800063e:	f001 f9a5 	bl	800198c <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000648:	f001 f988 	bl	800195c <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d115      	bne.n	800067e <HAL_TIM_PeriodElapsedCallback+0x5a>
			currentState = COLLISION;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	481b      	ldr	r0, [pc, #108]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000660:	f001 f994 	bl	800198c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066a:	4818      	ldr	r0, [pc, #96]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800066c:	f001 f98e 	bl	800198c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000676:	4815      	ldr	r0, [pc, #84]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000678:	f001 f988 	bl	800198c <HAL_GPIO_WritePin>
		}
	}
	else if (htim->Instance == TIM8){
		wait_trans = 0;
	}
}
 800067c:	e020      	b.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
			currentState = IDLE;
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
			firstEdge = 1;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000690:	480e      	ldr	r0, [pc, #56]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000692:	f001 f97b 	bl	800198c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069c:	480b      	ldr	r0, [pc, #44]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800069e:	f001 f975 	bl	800198c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006aa:	f001 f96f 	bl	800198c <HAL_GPIO_WritePin>
}
 80006ae:	e007      	b.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
	else if (htim->Instance == TIM8){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d102      	bne.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
		wait_trans = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010000 	.word	0x40010000
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020800 	.word	0x40020800
 80006d4:	2000130c 	.word	0x2000130c
 80006d8:	20000000 	.word	0x20000000
 80006dc:	40010400 	.word	0x40010400
 80006e0:	200014c4 	.word	0x200014c4

080006e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9){
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f4:	d17f      	bne.n	80007f6 <HAL_GPIO_EXTI_Callback+0x112>
		if(bitCount == 7)
 80006f6:	4b42      	ldr	r3, [pc, #264]	; (8000800 <HAL_GPIO_EXTI_Callback+0x11c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b07      	cmp	r3, #7
 80006fc:	d104      	bne.n	8000708 <HAL_GPIO_EXTI_Callback+0x24>
			receiveBuffer[byteCount] = 0;
 80006fe:	4b41      	ldr	r3, [pc, #260]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a41      	ldr	r2, [pc, #260]	; (8000808 <HAL_GPIO_EXTI_Callback+0x124>)
 8000704:	2100      	movs	r1, #0
 8000706:	54d1      	strb	r1, [r2, r3]
		if(firstEdge)
 8000708:	4b40      	ldr	r3, [pc, #256]	; (800080c <HAL_GPIO_EXTI_Callback+0x128>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01a      	beq.n	8000746 <HAL_GPIO_EXTI_Callback+0x62>
		{
			TIM2->CNT = 0;
 8000710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
			firstEdge = 0;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <HAL_GPIO_EXTI_Callback+0x128>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
			// Read logic-0
			receiveBuffer[byteCount] |= 0b0<<bitCount--;
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3b01      	subs	r3, #1
 8000724:	4a36      	ldr	r2, [pc, #216]	; (8000800 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	2100      	movs	r1, #0
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a36      	ldr	r2, [pc, #216]	; (8000808 <HAL_GPIO_EXTI_Callback+0x124>)
 8000730:	5cd3      	ldrb	r3, [r2, r3]
 8000732:	b25a      	sxtb	r2, r3
 8000734:	b24b      	sxtb	r3, r1
 8000736:	4313      	orrs	r3, r2
 8000738:	b25a      	sxtb	r2, r3
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b2d1      	uxtb	r1, r2
 8000740:	4a31      	ldr	r2, [pc, #196]	; (8000808 <HAL_GPIO_EXTI_Callback+0x124>)
 8000742:	54d1      	strb	r1, [r2, r3]
 8000744:	e03f      	b.n	80007c6 <HAL_GPIO_EXTI_Callback+0xe2>
		}
		else
		{
			if(TIM2->CNT > 600) // This is a clock synchronization edge
 8000746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000750:	d939      	bls.n	80007c6 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				TIM2->CNT = 0;
 8000752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
				// Read bit
				uint8_t value = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 800075a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075e:	482c      	ldr	r0, [pc, #176]	; (8000810 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000760:	f001 f8fc 	bl	800195c <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]
				receiveBuffer[byteCount] |= value<<bitCount--;
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <HAL_GPIO_EXTI_Callback+0x11c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1e59      	subs	r1, r3, #1
 8000770:	4823      	ldr	r0, [pc, #140]	; (8000800 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000772:	6001      	str	r1, [r0, #0]
 8000774:	fa02 f103 	lsl.w	r1, r2, r3
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <HAL_GPIO_EXTI_Callback+0x124>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	b25a      	sxtb	r2, r3
 8000782:	b24b      	sxtb	r3, r1
 8000784:	4313      	orrs	r3, r2
 8000786:	b25a      	sxtb	r2, r3
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	b2d1      	uxtb	r1, r2
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <HAL_GPIO_EXTI_Callback+0x124>)
 8000790:	54d1      	strb	r1, [r2, r3]
				if(bitCount < 0)
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	da0e      	bge.n	80007b8 <HAL_GPIO_EXTI_Callback+0xd4>
				{
					printf("%c", receiveBuffer[byteCount]);
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a1a      	ldr	r2, [pc, #104]	; (8000808 <HAL_GPIO_EXTI_Callback+0x124>)
 80007a0:	5cd3      	ldrb	r3, [r2, r3]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fac6 	bl	8002d34 <putchar>
					byteCount++;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 80007b0:	6013      	str	r3, [r2, #0]
					bitCount = 7;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_GPIO_EXTI_Callback+0x11c>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
				}
				if(byteCount == 30)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b1e      	cmp	r3, #30
 80007be:	d102      	bne.n	80007c6 <HAL_GPIO_EXTI_Callback+0xe2>
					byteCount = 0;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_GPIO_EXTI_Callback+0x120>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
			}

		}
		currentState = BUSY;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <HAL_GPIO_EXTI_Callback+0x130>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d2:	4811      	ldr	r0, [pc, #68]	; (8000818 <HAL_GPIO_EXTI_Callback+0x134>)
 80007d4:	f001 f8da 	bl	800198c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <HAL_GPIO_EXTI_Callback+0x134>)
 80007e0:	f001 f8d4 	bl	800198c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <HAL_GPIO_EXTI_Callback+0x134>)
 80007ec:	f001 f8ce 	bl	800198c <HAL_GPIO_WritePin>
		TIM1->CNT = 0;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_GPIO_EXTI_Callback+0x138>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24

	}
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000004 	.word	0x20000004
 8000804:	20000094 	.word	0x20000094
 8000808:	200014a4 	.word	0x200014a4
 800080c:	20000000 	.word	0x20000000
 8000810:	40020800 	.word	0x40020800
 8000814:	2000130c 	.word	0x2000130c
 8000818:	40020400 	.word	0x40020400
 800081c:	40010000 	.word	0x40010000

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fd81 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f8fb 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f000 fa51 	bl	8000cd4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000832:	f000 f963 	bl	8000afc <MX_TIM1_Init>
  MX_TIM8_Init();
 8000836:	f000 f9fd 	bl	8000c34 <MX_TIM8_Init>
  MX_TIM2_Init();
 800083a:	f000 f9af 	bl	8000b9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800083e:	486d      	ldr	r0, [pc, #436]	; (80009f4 <main+0x1d4>)
 8000840:	f001 fe06 	bl	8002450 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000844:	486c      	ldr	r0, [pc, #432]	; (80009f8 <main+0x1d8>)
 8000846:	f001 fe03 	bl	8002450 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800084a:	486c      	ldr	r0, [pc, #432]	; (80009fc <main+0x1dc>)
 800084c:	f001 fe00 	bl	8002450 <HAL_TIM_Base_Start_IT>

  uart_init(57600,F_CPU);
 8000850:	496b      	ldr	r1, [pc, #428]	; (8000a00 <main+0x1e0>)
 8000852:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 8000856:	f000 fbf9 	bl	800104c <uart_init>
  printf("Hello\n");
 800085a:	486a      	ldr	r0, [pc, #424]	; (8000a04 <main+0x1e4>)
 800085c:	f002 faee 	bl	8002e3c <puts>

  uint8_t endTransmitData = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	77fb      	strb	r3, [r7, #31]
  int readCount = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
LOOP_START:
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086e:	4866      	ldr	r0, [pc, #408]	; (8000a08 <main+0x1e8>)
 8000870:	f001 f88c 	bl	800198c <HAL_GPIO_WritePin>

	  //int readCount = scanf("%s",buffer);
	  char c;

	  if(!uart_isempty())
 8000874:	f000 fcce 	bl	8001214 <uart_isempty>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d114      	bne.n	80008a8 <main+0x88>
	  {
		  c = uart_getc();
 800087e:	f000 fcd3 	bl	8001228 <uart_getc>
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
		  if(c == '\r')
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b0d      	cmp	r3, #13
 800088a:	d107      	bne.n	800089c <main+0x7c>
		  {
			  endTransmitData = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	77fb      	strb	r3, [r7, #31]
			  buffer[readCount] = 0;
 8000890:	4a5e      	ldr	r2, [pc, #376]	; (8000a0c <main+0x1ec>)
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	4413      	add	r3, r2
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e005      	b.n	80008a8 <main+0x88>
		  }
		  else
		  {
			  buffer[readCount++] = c;
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	61ba      	str	r2, [r7, #24]
 80008a2:	495a      	ldr	r1, [pc, #360]	; (8000a0c <main+0x1ec>)
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	54ca      	strb	r2, [r1, r3]
		  }
	  }
	  //int readCount = 1;
	  //buffer[0] = 0xFF;
	  //buffer[1] = 0x00;
	  int length = readCount;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	603b      	str	r3, [r7, #0]
	  //send data
	  if (endTransmitData){
 80008ac:	7ffb      	ldrb	r3, [r7, #31]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0da      	beq.n	8000868 <main+0x48>
		  endTransmitData = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	77fb      	strb	r3, [r7, #31]
		  readCount = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
//		  printf("read count: %d, buffer: %s\n", length, buffer);
		  for (int i = 0; i < length;i++){
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e041      	b.n	8000944 <main+0x124>
//			  printf("Buffer:"BYTE_TO_BINARY_PATTERN "\n",BYTE_TO_BINARY(*(buffer+i)));
			  output[i] = 0;
 80008c0:	4a53      	ldr	r2, [pc, #332]	; (8000a10 <main+0x1f0>)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	2100      	movs	r1, #0
 80008c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for (int j = 0; j < 8; j++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	e033      	b.n	8000938 <main+0x118>
				  if (buffer[i] & 0b1<<j)
 80008d0:	4a4e      	ldr	r2, [pc, #312]	; (8000a0c <main+0x1ec>)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	fa42 f303 	asr.w	r3, r2, r3
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d012      	beq.n	800090e <main+0xee>
					  output[i] |= 0b01<<((j*2));
 80008e8:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <main+0x1f0>)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21b      	sxth	r3, r3
 8000902:	b299      	uxth	r1, r3
 8000904:	4a42      	ldr	r2, [pc, #264]	; (8000a10 <main+0x1f0>)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800090c:	e011      	b.n	8000932 <main+0x112>
				  else
					  output[i] |= 0b10<<((j*2));
 800090e:	4a40      	ldr	r2, [pc, #256]	; (8000a10 <main+0x1f0>)
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000916:	b21a      	sxth	r2, r3
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2102      	movs	r1, #2
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	b21b      	sxth	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b21b      	sxth	r3, r3
 8000928:	b299      	uxth	r1, r3
 800092a:	4a39      	ldr	r2, [pc, #228]	; (8000a10 <main+0x1f0>)
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for (int j = 0; j < 8; j++){
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3301      	adds	r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	2b07      	cmp	r3, #7
 800093c:	ddc8      	ble.n	80008d0 <main+0xb0>
		  for (int i = 0; i < length;i++){
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbb9      	blt.n	80008c0 <main+0xa0>
		  }
//		  for (int i = 0; i < length;i++){
//				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
//						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
//		  }
		  while (currentState == COLLISION || currentState == BUSY);
 800094c:	bf00      	nop
 800094e:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <main+0x1f4>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d0fb      	beq.n	800094e <main+0x12e>
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <main+0x1f4>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f7      	beq.n	800094e <main+0x12e>
		  currentState = BUSY;
 800095e:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <main+0x1f4>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	482b      	ldr	r0, [pc, #172]	; (8000a18 <main+0x1f8>)
 800096c:	f001 f80e 	bl	800198c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000976:	4828      	ldr	r0, [pc, #160]	; (8000a18 <main+0x1f8>)
 8000978:	f001 f808 	bl	800198c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	4825      	ldr	r0, [pc, #148]	; (8000a18 <main+0x1f8>)
 8000984:	f001 f802 	bl	800198c <HAL_GPIO_WritePin>
			  for (int i = 0; i < length;i++){
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e02d      	b.n	80009ea <main+0x1ca>
				  for (int j = 15; j >= 0; j--){
 800098e:	230f      	movs	r3, #15
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	e024      	b.n	80009de <main+0x1be>
					  if (currentState == COLLISION)
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <main+0x1f4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d100      	bne.n	800099e <main+0x17e>
						  goto LOOP_START;
 800099c:	e764      	b.n	8000868 <main+0x48>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, (output[i] & 1<<j)? GPIO_PIN_SET:GPIO_PIN_RESET);
 800099e:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <main+0x1f0>)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	fa42 f303 	asr.w	r3, r2, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009bc:	4812      	ldr	r0, [pc, #72]	; (8000a08 <main+0x1e8>)
 80009be:	f000 ffe5 	bl	800198c <HAL_GPIO_WritePin>
					  TIM1->CNT = 0;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <main+0x1fc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
					  DELAY_500MS
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <main+0x200>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	bf00      	nop
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <main+0x200>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d0fb      	beq.n	80009d0 <main+0x1b0>
				  for (int j = 15; j >= 0; j--){
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	3b01      	subs	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	dad7      	bge.n	8000994 <main+0x174>
			  for (int i = 0; i < length;i++){
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbcd      	blt.n	800098e <main+0x16e>
  {
 80009f2:	e739      	b.n	8000868 <main+0x48>
 80009f4:	20001410 	.word	0x20001410
 80009f8:	200010c4 	.word	0x200010c4
 80009fc:	20001458 	.word	0x20001458
 8000a00:	0280de80 	.word	0x0280de80
 8000a04:	08003930 	.word	0x08003930
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	20001310 	.word	0x20001310
 8000a10:	2000110c 	.word	0x2000110c
 8000a14:	2000130c 	.word	0x2000130c
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40010000 	.word	0x40010000
 8000a20:	200014c4 	.word	0x200014c4

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2234      	movs	r2, #52	; 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 f976 	bl	8002d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <SystemClock_Config+0xd0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <SystemClock_Config+0xd0>)
 8000a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <SystemClock_Config+0xd0>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a94:	2308      	movs	r3, #8
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a98:	23a8      	movs	r3, #168	; 0xa8
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 f9e1 	bl	8001e74 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ab8:	f000 f97e 	bl	8000db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2105      	movs	r1, #5
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 ff88 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ae6:	f000 f967 	bl	8000db8 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3750      	adds	r7, #80	; 0x50
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <MX_TIM1_Init+0x9c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 153;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b20:	2299      	movs	r2, #153	; 0x99
 8000b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b2c:	f640 125f 	movw	r2, #2399	; 0x95f
 8000b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b46:	f001 fc33 	bl	80023b0 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b50:	f000 f932 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b62:	f001 fded 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b6c:	f000 f924 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b7e:	f002 f809 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b88:	f000 f916 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20001410 	.word	0x20001410
 8000b98:	40010000 	.word	0x40010000

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 153;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bc2:	2299      	movs	r2, #153	; 0x99
 8000bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1100;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bce:	f240 424c 	movw	r2, #1100	; 0x44c
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000be2:	f001 fbe5 	bl	80023b0 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bec:	f000 f8e4 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bfe:	f001 fd9f 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c08:	f000 f8d6 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000c1a:	f001 ffbb 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 f8c8 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20001458 	.word	0x20001458

08000c34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <MX_TIM8_Init+0x9c>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 153;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c58:	2299      	movs	r2, #153	; 0x99
 8000c5a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 553;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c64:	f240 2229 	movw	r2, #553	; 0x229
 8000c68:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c7c:	4813      	ldr	r0, [pc, #76]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c7e:	f001 fb97 	bl	80023b0 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000c88:	f000 f896 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000c9a:	f001 fd51 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000ca4:	f000 f888 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_TIM8_Init+0x98>)
 8000cb6:	f001 ff6d 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000cc0:	f000 f87a 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200010c4 	.word	0x200010c4
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_GPIO_Init+0xd8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a2e      	ldr	r2, [pc, #184]	; (8000dac <MX_GPIO_Init+0xd8>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <MX_GPIO_Init+0xd8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <MX_GPIO_Init+0xd8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a27      	ldr	r2, [pc, #156]	; (8000dac <MX_GPIO_Init+0xd8>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_GPIO_Init+0xd8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d28:	4821      	ldr	r0, [pc, #132]	; (8000db0 <MX_GPIO_Init+0xdc>)
 8000d2a:	f000 fe2f 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d34:	481f      	ldr	r0, [pc, #124]	; (8000db4 <MX_GPIO_Init+0xe0>)
 8000d36:	f000 fe29 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <MX_GPIO_Init+0xdc>)
 8000d54:	f000 fc6e 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <MX_GPIO_Init+0xe0>)
 8000d72:	f000 fc5f 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d7c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d82:	2302      	movs	r3, #2
 8000d84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <MX_GPIO_Init+0xe0>)
 8000d8e:	f000 fc51 	bl	8001634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	2017      	movs	r0, #23
 8000d98:	f000 fc15 	bl	80015c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f000 fc2e 	bl	80015fe <HAL_NVIC_EnableIRQ>

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40020800 	.word	0x40020800

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <HAL_TIM_Base_MspInit+0xa8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d116      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2019      	movs	r0, #25
 8000e48:	f000 fbbd 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e4c:	2019      	movs	r0, #25
 8000e4e:	f000 fbd6 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e52:	e02e      	b.n	8000eb2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5c:	d10e      	bne.n	8000e7c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
}
 8000e7a:	e01a      	b.n	8000eb2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d115      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_TIM_Base_MspInit+0xac>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	202c      	movs	r0, #44	; 0x2c
 8000ea8:	f000 fb8d 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000eac:	202c      	movs	r0, #44	; 0x2c
 8000eae:	f000 fba6 	bl	80015fe <HAL_NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 fa5c 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000f20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f24:	f000 fd4c 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f32:	f001 fafd 	bl	8002530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20001410 	.word	0x20001410

08000f40 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000f46:	f001 faf3 	bl	8002530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200010c4 	.word	0x200010c4

08000f54 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	return -1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7c:	605a      	str	r2, [r3, #4]
	return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_isatty>:

int _isatty(int file)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	return 1;
 8000f94:	2301      	movs	r3, #1
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f001 fe62 	bl	8002cb4 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20020000 	.word	0x20020000
 800101c:	00000400 	.word	0x00000400
 8001020:	20000098 	.word	0x20000098
 8001024:	200014e0 	.word	0x200014e0

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <uart_init>:
/**
 * Initializes USART2 as a UART
 * @param baud - the baud rate
 * @param sysclk - the frequency of the system clock in Hz
 */
void uart_init(int baud, int sysclk) {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 8001052:	af00      	add	r7, sp, #0
 8001054:	f8c7 0814 	str.w	r0, [r7, #2068]	; 0x814
 8001058:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810

    // define the input and output buffer
    input_buffer = cq_init();
 800105c:	4c36      	ldr	r4, [pc, #216]	; (8001138 <uart_init+0xec>)
 800105e:	463b      	mov	r3, r7
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa4b 	bl	80004fc <cq_init>
 8001066:	463b      	mov	r3, r7
 8001068:	4620      	mov	r0, r4
 800106a:	4619      	mov	r1, r3
 800106c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001070:	461a      	mov	r2, r3
 8001072:	f001 fe49 	bl	8002d08 <memcpy>
    output_buffer = cq_init();
 8001076:	4c31      	ldr	r4, [pc, #196]	; (800113c <uart_init+0xf0>)
 8001078:	463b      	mov	r3, r7
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa3e 	bl	80004fc <cq_init>
 8001080:	463b      	mov	r3, r7
 8001082:	4620      	mov	r0, r4
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 6301 	mov.w	r3, #2064	; 0x810
 800108a:	461a      	mov	r2, r3
 800108c:	f001 fe3c 	bl	8002d08 <memcpy>

    // enable GPIOA in RCC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <uart_init+0xf4>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <uart_init+0xf4>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6313      	str	r3, [r2, #48]	; 0x30

    // enable USART2 in RCC
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <uart_init+0xf4>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <uart_init+0xf4>)
 80010a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a6:	6413      	str	r3, [r2, #64]	; 0x40

    // set PA2 and PA3 as pullup
    GPIOA->PUPDR |= (0b01 << GPIO_PUPDR_PUPD2_Pos | 0b01 << GPIO_PUPDR_PUPD3_Pos);
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <uart_init+0xf8>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <uart_init+0xf8>)
 80010ae:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80010b2:	60d3      	str	r3, [r2, #12]

    // clear PA2 and PA3 mode
    GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <uart_init+0xf8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <uart_init+0xf8>)
 80010ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010be:	6013      	str	r3, [r2, #0]

    // set PA2 and PA3 mode to alternate function
    GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos | 0b10 << GPIO_MODER_MODER3_Pos);
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <uart_init+0xf8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <uart_init+0xf8>)
 80010c6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80010ca:	6013      	str	r3, [r2, #0]

    // clear alternate function select for PA2 and PA3
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <uart_init+0xf8>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <uart_init+0xf8>)
 80010d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80010d6:	6213      	str	r3, [r2, #32]

    // select USART1..3 (AF7) as the alternate function for PA3 and PA2
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos | 7 << GPIO_AFRL_AFSEL3_Pos);
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <uart_init+0xf8>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a19      	ldr	r2, [pc, #100]	; (8001144 <uart_init+0xf8>)
 80010de:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80010e2:	6213      	str	r3, [r2, #32]

    // set USART2's baud rate
    USART2->BRR = sysclk / baud;
 80010e4:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 80010e8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80010ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <uart_init+0xfc>)
 80010f2:	609a      	str	r2, [r3, #8]

    // enable USART2's UART, RX, and TX
    USART2->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <uart_init+0xfc>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	4a13      	ldr	r2, [pc, #76]	; (8001148 <uart_init+0xfc>)
 80010fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010fe:	f043 030c 	orr.w	r3, r3, #12
 8001102:	60d3      	str	r3, [r2, #12]

    // enable USART2's TXE interrupt and RXNE interrupt
    USART2->CR1 |= (USART_CR1_TXEIE | USART_CR1_RXNEIE);
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <uart_init+0xfc>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <uart_init+0xfc>)
 800110a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800110e:	60d3      	str	r3, [r2, #12]

    // enable USART2 interrupts in NVIC
    NVIC->ISER[1] |= (1 << 6);
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <uart_init+0x100>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <uart_init+0x100>)
 8001116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111a:	6053      	str	r3, [r2, #4]

    // set output buffer source
    setvbuf(stdout, NULL, _IONBF, 0);
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <uart_init+0x104>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6898      	ldr	r0, [r3, #8]
 8001122:	2300      	movs	r3, #0
 8001124:	2202      	movs	r2, #2
 8001126:	2100      	movs	r1, #0
 8001128:	f001 fe90 	bl	8002e4c <setvbuf>

}
 800112c:	bf00      	nop
 800112e:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	bf00      	nop
 8001138:	2000009c 	.word	0x2000009c
 800113c:	200008ac 	.word	0x200008ac
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000
 8001148:	40004400 	.word	0x40004400
 800114c:	e000e100 	.word	0xe000e100
 8001150:	20000014 	.word	0x20000014

08001154 <_read>:
 * @param file - not implemented (ignored)
 * @param ptr - where the read data should be put
 * @param len - the number of characters to read
 * @return the number of characters read
 */
int _read(int file, char * ptr, int len) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]

    // wait until the input buffer receives some data
    while (cq_isempty(&input_buffer));
 8001160:	bf00      	nop
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <_read+0x60>)
 8001164:	f7ff fa45 	bl	80005f2 <cq_isempty>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <_read+0xe>

    int char_count = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]

    // pull from the circular queue until it is empty
    while (!cq_isempty(&input_buffer)) {
 8001172:	e00c      	b.n	800118e <_read+0x3a>
        char_count++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
        *ptr = cq_pull(&input_buffer);
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <_read+0x60>)
 800117c:	f7ff fa0e 	bl	800059c <cq_pull>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	701a      	strb	r2, [r3, #0]
        ptr++;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3301      	adds	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
    while (!cq_isempty(&input_buffer)) {
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <_read+0x60>)
 8001190:	f7ff fa2f 	bl	80005f2 <cq_isempty>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0ec      	beq.n	8001174 <_read+0x20>
    }

    if (*ptr == '\r') *ptr = '\n';
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b0d      	cmp	r3, #13
 80011a0:	d102      	bne.n	80011a8 <_read+0x54>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	220a      	movs	r2, #10
 80011a6:	701a      	strb	r2, [r3, #0]

    return char_count;
 80011a8:	697b      	ldr	r3, [r7, #20]

}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000009c 	.word	0x2000009c

080011b8 <_write>:
 * @param file - not implemented (ignored)
 * @param ptr - where the characters should be read from
 * @param len - the number of characters to read
 * @return the number of characters read
 */
int _write(int file, char * ptr, int len) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]

    int char_count = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

    // push characters to the output buffer until we write len characters or the buffer fills up
    while (char_count < len && !cq_isfull(&output_buffer)) {
 80011c8:	e00b      	b.n	80011e2 <_write+0x2a>
        cq_push(&output_buffer, *ptr);
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	480e      	ldr	r0, [pc, #56]	; (800120c <_write+0x54>)
 80011d2:	f7ff f9b7 	bl	8000544 <cq_push>
        char_count++;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
        ptr++;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3301      	adds	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
    while (char_count < len && !cq_isfull(&output_buffer)) {
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	da05      	bge.n	80011f6 <_write+0x3e>
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <_write+0x54>)
 80011ec:	f7ff fa0d 	bl	800060a <cq_isfull>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0e9      	beq.n	80011ca <_write+0x12>
    }

    // enable TXE interrupts so the data can be transmitted
    USART2->CR1 |= USART_CR1_TXEIE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <_write+0x58>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_write+0x58>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001200:	60d3      	str	r3, [r2, #12]

    return char_count;
 8001202:	697b      	ldr	r3, [r7, #20]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200008ac 	.word	0x200008ac
 8001210:	40004400 	.word	0x40004400

08001214 <uart_isempty>:

int uart_isempty()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	return cq_isempty(&input_buffer);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <uart_isempty+0x10>)
 800121a:	f7ff f9ea 	bl	80005f2 <cq_isempty>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000009c 	.word	0x2000009c

08001228 <uart_getc>:

char uart_getc()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	return cq_pull(&input_buffer);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <uart_getc+0x10>)
 800122e:	f7ff f9b5 	bl	800059c <cq_pull>
 8001232:	4603      	mov	r3, r0
}
 8001234:	4618      	mov	r0, r3
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000009c 	.word	0x2000009c

0800123c <USART2_IRQHandler>:

/**
 * USART2 interrupt request handler
 */
void USART2_IRQHandler(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

    // if the RDR has received data and the input buffer is not full
    if ((USART2->SR & USART_SR_RXNE) && !cq_isfull(&input_buffer)) {
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <USART2_IRQHandler+0x90>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	2b00      	cmp	r3, #0
 800124c:	d020      	beq.n	8001290 <USART2_IRQHandler+0x54>
 800124e:	4820      	ldr	r0, [pc, #128]	; (80012d0 <USART2_IRQHandler+0x94>)
 8001250:	f7ff f9db 	bl	800060a <cq_isfull>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d11a      	bne.n	8001290 <USART2_IRQHandler+0x54>

        // read the RDR
        char c = USART2->DR;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <USART2_IRQHandler+0x90>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	71fb      	strb	r3, [r7, #7]

        // push the char in the RDR into the input buffer
        cq_push(&input_buffer, c);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4619      	mov	r1, r3
 8001264:	481a      	ldr	r0, [pc, #104]	; (80012d0 <USART2_IRQHandler+0x94>)
 8001266:	f7ff f96d 	bl	8000544 <cq_push>

        // echo the character to the output buffer
        if (!cq_isfull(&output_buffer)) {
 800126a:	481a      	ldr	r0, [pc, #104]	; (80012d4 <USART2_IRQHandler+0x98>)
 800126c:	f7ff f9cd 	bl	800060a <cq_isfull>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d104      	bne.n	8001280 <USART2_IRQHandler+0x44>
            cq_push(&output_buffer, c);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4619      	mov	r1, r3
 800127a:	4816      	ldr	r0, [pc, #88]	; (80012d4 <USART2_IRQHandler+0x98>)
 800127c:	f7ff f962 	bl	8000544 <cq_push>
        }

        // enable TXE interrupts so the echo can be pushed
        USART2->CR1 |= USART_CR1_TXEIE;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <USART2_IRQHandler+0x90>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4a11      	ldr	r2, [pc, #68]	; (80012cc <USART2_IRQHandler+0x90>)
 8001286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128a:	60d3      	str	r3, [r2, #12]
    if ((USART2->SR & USART_SR_RXNE) && !cq_isfull(&input_buffer)) {
 800128c:	bf00      	nop
            // disable TXE interrupts
            USART2->CR1 &= ~(USART_CR1_TXEIE);

        }
    }
}
 800128e:	e019      	b.n	80012c4 <USART2_IRQHandler+0x88>
    else if (USART2->SR & USART_SR_TXE) {
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <USART2_IRQHandler+0x90>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <USART2_IRQHandler+0x88>
        if (!cq_isempty(&output_buffer)) {
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <USART2_IRQHandler+0x98>)
 800129e:	f7ff f9a8 	bl	80005f2 <cq_isempty>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d107      	bne.n	80012b8 <USART2_IRQHandler+0x7c>
            USART2->DR = cq_pull(&output_buffer);
 80012a8:	480a      	ldr	r0, [pc, #40]	; (80012d4 <USART2_IRQHandler+0x98>)
 80012aa:	f7ff f977 	bl	800059c <cq_pull>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <USART2_IRQHandler+0x90>)
 80012b4:	605a      	str	r2, [r3, #4]
}
 80012b6:	e005      	b.n	80012c4 <USART2_IRQHandler+0x88>
            USART2->CR1 &= ~(USART_CR1_TXEIE);
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <USART2_IRQHandler+0x90>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4a03      	ldr	r2, [pc, #12]	; (80012cc <USART2_IRQHandler+0x90>)
 80012be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40004400 	.word	0x40004400
 80012d0:	2000009c 	.word	0x2000009c
 80012d4:	200008ac 	.word	0x200008ac

080012d8 <Reset_Handler>:
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopFillZerobss+0x12>
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopFillZerobss+0x16>)
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <LoopFillZerobss+0x1a>)
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <LoopFillZerobss+0x1e>)
 80012e2:	2300      	movs	r3, #0
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:
 80012e6:	58d4      	ldr	r4, [r2, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:
 80012ec:	18c4      	adds	r4, r0, r3
 80012ee:	428c      	cmp	r4, r1
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopFillZerobss+0x22>)
 80012f4:	4c0b      	ldr	r4, [pc, #44]	; (8001324 <LoopFillZerobss+0x26>)
 80012f6:	2300      	movs	r3, #0
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:
 80012fe:	42a2      	cmp	r2, r4
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>
 8001302:	f7ff fe91 	bl	8001028 <SystemInit>
 8001306:	f001 fcdb 	bl	8002cc0 <__libc_init_array>
 800130a:	f7ff fa89 	bl	8000820 <main>
 800130e:	4770      	bx	lr
 8001310:	20020000 	.word	0x20020000
 8001314:	20000000 	.word	0x20000000
 8001318:	20000078 	.word	0x20000078
 800131c:	080039bc 	.word	0x080039bc
 8001320:	20000078 	.word	0x20000078
 8001324:	200014dc 	.word	0x200014dc

08001328 <ADC_IRQHandler>:
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <HAL_Init+0x40>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_Init+0x40>)
 8001342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_Init+0x40>)
 800134e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 f92b 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f808 	bl	8001370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff fd30 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023c00 	.word	0x40023c00

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_InitTick+0x54>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f943 	bl	800161a <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f000 f90b 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_InitTick+0x5c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000010 	.word	0x20000010
 80013cc:	2000000c 	.word	0x2000000c

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000010 	.word	0x20000010
 80013f4:	200014c8 	.word	0x200014c8

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200014c8 	.word	0x200014c8

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <__NVIC_EnableIRQ+0x38>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff8e 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff29 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff3e 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff8e 	bl	8001504 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5d 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff31 	bl	8001474 <__NVIC_EnableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffa2 	bl	800156c <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e165      	b.n	800191c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8154 	bne.w	8001916 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d005      	beq.n	8001686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	2b02      	cmp	r3, #2
 8001684:	d130      	bne.n	80016e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d017      	beq.n	8001724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80ae 	beq.w	8001916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <HAL_GPIO_Init+0x300>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a5c      	ldr	r2, [pc, #368]	; (8001934 <HAL_GPIO_Init+0x300>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <HAL_GPIO_Init+0x300>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_GPIO_Init+0x304>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4f      	ldr	r2, [pc, #316]	; (800193c <HAL_GPIO_Init+0x308>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x21a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4e      	ldr	r2, [pc, #312]	; (8001940 <HAL_GPIO_Init+0x30c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x216>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_GPIO_Init+0x310>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x212>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_GPIO_Init+0x314>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x20e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4b      	ldr	r2, [pc, #300]	; (800194c <HAL_GPIO_Init+0x318>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x20a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <HAL_GPIO_Init+0x31c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x206>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a49      	ldr	r2, [pc, #292]	; (8001954 <HAL_GPIO_Init+0x320>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x202>
 8001832:	2306      	movs	r3, #6
 8001834:	e00c      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 8001836:	2307      	movs	r3, #7
 8001838:	e00a      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 800183a:	2305      	movs	r3, #5
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 800183e:	2304      	movs	r3, #4
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 800184e:	2300      	movs	r3, #0
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001860:	4935      	ldr	r1, [pc, #212]	; (8001938 <HAL_GPIO_Init+0x304>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_GPIO_Init+0x324>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001892:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_GPIO_Init+0x324>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x324>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018bc:	4a26      	ldr	r2, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x324>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_GPIO_Init+0x324>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_GPIO_Init+0x324>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_GPIO_Init+0x324>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_GPIO_Init+0x324>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	f67f ae96 	bls.w	8001650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40013800 	.word	0x40013800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400
 8001944:	40020800 	.word	0x40020800
 8001948:	40020c00 	.word	0x40020c00
 800194c:	40021000 	.word	0x40021000
 8001950:	40021400 	.word	0x40021400
 8001954:	40021800 	.word	0x40021800
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e001      	b.n	800197e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a8:	e003      	b.n	80019b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	619a      	str	r2, [r3, #24]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fe80 	bl	80006e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40013c00 	.word	0x40013c00

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cc      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b68      	ldr	r3, [pc, #416]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d90c      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b65      	ldr	r3, [pc, #404]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b8      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a44:	4b59      	ldr	r3, [pc, #356]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a58      	ldr	r2, [pc, #352]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a52      	ldr	r2, [pc, #328]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b50      	ldr	r3, [pc, #320]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	494d      	ldr	r1, [pc, #308]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d044      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e067      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b37      	ldr	r3, [pc, #220]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4934      	ldr	r1, [pc, #208]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff fc8a 	bl	80013f8 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff fc86 	bl	80013f8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e04f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d20c      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e032      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4916      	ldr	r1, [pc, #88]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	490e      	ldr	r1, [pc, #56]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b76:	f000 f821 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	490a      	ldr	r1, [pc, #40]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	5ccb      	ldrb	r3, [r1, r3]
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fbea 	bl	8001370 <HAL_InitTick>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08003938 	.word	0x08003938
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	2000000c 	.word	0x2000000c

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	b087      	sub	sp, #28
 8001bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001bc8:	2600      	movs	r6, #0
 8001bca:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001bcc:	2600      	movs	r6, #0
 8001bce:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bd4:	2600      	movs	r6, #0
 8001bd6:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd8:	4ea3      	ldr	r6, [pc, #652]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bda:	68b6      	ldr	r6, [r6, #8]
 8001bdc:	f006 060c 	and.w	r6, r6, #12
 8001be0:	2e0c      	cmp	r6, #12
 8001be2:	f200 8137 	bhi.w	8001e54 <HAL_RCC_GetSysClockFreq+0x298>
 8001be6:	f20f 0c08 	addw	ip, pc, #8
 8001bea:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001bee:	bf00      	nop
 8001bf0:	08001c25 	.word	0x08001c25
 8001bf4:	08001e55 	.word	0x08001e55
 8001bf8:	08001e55 	.word	0x08001e55
 8001bfc:	08001e55 	.word	0x08001e55
 8001c00:	08001c2b 	.word	0x08001c2b
 8001c04:	08001e55 	.word	0x08001e55
 8001c08:	08001e55 	.word	0x08001e55
 8001c0c:	08001e55 	.word	0x08001e55
 8001c10:	08001c31 	.word	0x08001c31
 8001c14:	08001e55 	.word	0x08001e55
 8001c18:	08001e55 	.word	0x08001e55
 8001c1c:	08001e55 	.word	0x08001e55
 8001c20:	08001d47 	.word	0x08001d47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4b91      	ldr	r3, [pc, #580]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001c26:	613b      	str	r3, [r7, #16]
       break;
 8001c28:	e117      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c2a:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c2c:	613b      	str	r3, [r7, #16]
      break;
 8001c2e:	e114      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c30:	4b8d      	ldr	r3, [pc, #564]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c38:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3a:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c46:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	099b      	lsrs	r3, r3, #6
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001c56:	f04f 0500 	mov.w	r5, #0
 8001c5a:	ea02 0004 	and.w	r0, r2, r4
 8001c5e:	ea03 0105 	and.w	r1, r3, r5
 8001c62:	4b83      	ldr	r3, [pc, #524]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c64:	fb03 f201 	mul.w	r2, r3, r1
 8001c68:	2300      	movs	r3, #0
 8001c6a:	fb03 f300 	mul.w	r3, r3, r0
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c72:	fba0 0102 	umull	r0, r1, r0, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	4619      	mov	r1, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	f7fe fabf 	bl	8000204 <__aeabi_uldivmod>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e04c      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	461a      	mov	r2, r3
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ca0:	f04f 0100 	mov.w	r1, #0
 8001ca4:	ea02 0800 	and.w	r8, r2, r0
 8001ca8:	ea03 0901 	and.w	r9, r3, r1
 8001cac:	4640      	mov	r0, r8
 8001cae:	4649      	mov	r1, r9
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	014b      	lsls	r3, r1, #5
 8001cba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cbe:	0142      	lsls	r2, r0, #5
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	ebb0 0008 	subs.w	r0, r0, r8
 8001cc8:	eb61 0109 	sbc.w	r1, r1, r9
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	018b      	lsls	r3, r1, #6
 8001cd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cda:	0182      	lsls	r2, r0, #6
 8001cdc:	1a12      	subs	r2, r2, r0
 8001cde:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	00d9      	lsls	r1, r3, #3
 8001cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cf0:	00d0      	lsls	r0, r2, #3
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	eb12 0208 	adds.w	r2, r2, r8
 8001cfa:	eb43 0309 	adc.w	r3, r3, r9
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0299      	lsls	r1, r3, #10
 8001d08:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d0c:	0290      	lsls	r0, r2, #10
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f7fe fa71 	bl	8000204 <__aeabi_uldivmod>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4613      	mov	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d2a:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	3301      	adds	r3, #1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	613b      	str	r3, [r7, #16]
      break;
 8001d44:	e089      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d46:	4948      	ldr	r1, [pc, #288]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d48:	6849      	ldr	r1, [r1, #4]
 8001d4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d4e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d50:	4945      	ldr	r1, [pc, #276]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d52:	6849      	ldr	r1, [r1, #4]
 8001d54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d024      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5c:	4942      	ldr	r1, [pc, #264]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d5e:	6849      	ldr	r1, [r1, #4]
 8001d60:	0989      	lsrs	r1, r1, #6
 8001d62:	4608      	mov	r0, r1
 8001d64:	f04f 0100 	mov.w	r1, #0
 8001d68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d6c:	f04f 0500 	mov.w	r5, #0
 8001d70:	ea00 0204 	and.w	r2, r0, r4
 8001d74:	ea01 0305 	and.w	r3, r1, r5
 8001d78:	493d      	ldr	r1, [pc, #244]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d7a:	fb01 f003 	mul.w	r0, r1, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	fb01 f102 	mul.w	r1, r1, r2
 8001d84:	1844      	adds	r4, r0, r1
 8001d86:	493a      	ldr	r1, [pc, #232]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d88:	fba2 0101 	umull	r0, r1, r2, r1
 8001d8c:	1863      	adds	r3, r4, r1
 8001d8e:	4619      	mov	r1, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	f7fe fa34 	bl	8000204 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e04a      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da6:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	461a      	mov	r2, r3
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	ea02 0400 	and.w	r4, r2, r0
 8001dbe:	ea03 0501 	and.w	r5, r3, r1
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	014b      	lsls	r3, r1, #5
 8001dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dd4:	0142      	lsls	r2, r0, #5
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	1b00      	subs	r0, r0, r4
 8001ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	018b      	lsls	r3, r1, #6
 8001dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dee:	0182      	lsls	r2, r0, #6
 8001df0:	1a12      	subs	r2, r2, r0
 8001df2:	eb63 0301 	sbc.w	r3, r3, r1
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	00d9      	lsls	r1, r3, #3
 8001e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e04:	00d0      	lsls	r0, r2, #3
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	1912      	adds	r2, r2, r4
 8001e0c:	eb45 0303 	adc.w	r3, r5, r3
 8001e10:	f04f 0000 	mov.w	r0, #0
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	0299      	lsls	r1, r3, #10
 8001e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e1e:	0290      	lsls	r0, r2, #10
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	f7fe f9e8 	bl	8000204 <__aeabi_uldivmod>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	0f1b      	lsrs	r3, r3, #28
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	613b      	str	r3, [r7, #16]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e56:	613b      	str	r3, [r7, #16]
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	693b      	ldr	r3, [r7, #16]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	017d7840 	.word	0x017d7840

08001e74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e28d      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8083 	beq.w	8001f9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e94:	4b94      	ldr	r3, [pc, #592]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d019      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ea0:	4b91      	ldr	r3, [pc, #580]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eac:	4b8e      	ldr	r3, [pc, #568]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b8b      	ldr	r3, [pc, #556]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d112      	bne.n	8001eec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed2:	d10b      	bne.n	8001eec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d05b      	beq.n	8001f98 <HAL_RCC_OscConfig+0x124>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d157      	bne.n	8001f98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e25a      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCC_OscConfig+0x90>
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7b      	ldr	r2, [pc, #492]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e01d      	b.n	8001f40 <HAL_RCC_OscConfig+0xcc>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0xb4>
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a75      	ldr	r2, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a72      	ldr	r2, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0xcc>
 8001f28:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6e      	ldr	r2, [pc, #440]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b6c      	ldr	r3, [pc, #432]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6b      	ldr	r2, [pc, #428]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff fa56 	bl	80013f8 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff fa52 	bl	80013f8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e21f      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0xdc>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fa42 	bl	80013f8 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fa3e 	bl	80013f8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e20b      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x104>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06f      	beq.n	8002086 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fa6:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d017      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x186>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1d3      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_OscConfig+0x278>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f9eb 	bl	80013f8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff f9e7 	bl	80013f8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1b4      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4925      	ldr	r1, [pc, #148]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x278>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f9ca 	bl	80013f8 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff f9c6 	bl	80013f8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e193      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d036      	beq.n	8002100 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_RCC_OscConfig+0x27c>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff f9aa 	bl	80013f8 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff f9a6 	bl	80013f8 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e173      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x234>
 80020c6:	e01b      	b.n	8002100 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7ff f993 	bl	80013f8 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e00e      	b.n	80020f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff f98f 	bl	80013f8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d907      	bls.n	80020f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e15c      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	42470000 	.word	0x42470000
 80020f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b8a      	ldr	r3, [pc, #552]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ea      	bne.n	80020d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8097 	beq.w	800223c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b83      	ldr	r3, [pc, #524]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a7e      	ldr	r2, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b7c      	ldr	r3, [pc, #496]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b79      	ldr	r3, [pc, #484]	; (8002324 <HAL_RCC_OscConfig+0x4b0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b76      	ldr	r3, [pc, #472]	; (8002324 <HAL_RCC_OscConfig+0x4b0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a75      	ldr	r2, [pc, #468]	; (8002324 <HAL_RCC_OscConfig+0x4b0>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff f94f 	bl	80013f8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff f94b 	bl	80013f8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e118      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b6c      	ldr	r3, [pc, #432]	; (8002324 <HAL_RCC_OscConfig+0x4b0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x31e>
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x358>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x340>
 800219a:	4b61      	ldr	r3, [pc, #388]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a60      	ldr	r2, [pc, #384]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0x358>
 80021b4:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a59      	ldr	r2, [pc, #356]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	4b57      	ldr	r3, [pc, #348]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a56      	ldr	r2, [pc, #344]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	f023 0304 	bic.w	r3, r3, #4
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f910 	bl	80013f8 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff f90c 	bl	80013f8 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0d7      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ee      	beq.n	80021dc <HAL_RCC_OscConfig+0x368>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff f8fa 	bl	80013f8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff f8f6 	bl	80013f8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0c1      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	4b40      	ldr	r3, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a3a      	ldr	r2, [pc, #232]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80ad 	beq.w	80023a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d060      	beq.n	8002314 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d145      	bne.n	80022e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_OscConfig+0x4b4>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7ff f8ca 	bl	80013f8 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff f8c6 	bl	80013f8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e093      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	019b      	lsls	r3, r3, #6
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	071b      	lsls	r3, r3, #28
 80022b2:	491b      	ldr	r1, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x4b4>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7ff f89b 	bl	80013f8 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c6:	f7ff f897 	bl	80013f8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e064      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x452>
 80022e4:	e05c      	b.n	80023a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_OscConfig+0x4b4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff f884 	bl	80013f8 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f4:	f7ff f880 	bl	80013f8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04d      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x480>
 8002312:	e045      	b.n	80023a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e040      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000
 8002328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <HAL_RCC_OscConfig+0x538>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d030      	beq.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d129      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d122      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800235c:	4013      	ands	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002364:	4293      	cmp	r3, r2
 8002366:	d119      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	3b01      	subs	r3, #1
 8002376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d10f      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e041      	b.n	8002446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fd1c 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f000 fa96 	bl	8002920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d001      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e04e      	b.n	8002506 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_TIM_Base_Start_IT+0xc4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d022      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x80>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002492:	d01d      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x80>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_TIM_Base_Start_IT+0xc8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d018      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x80>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1e      	ldr	r2, [pc, #120]	; (800251c <HAL_TIM_Base_Start_IT+0xcc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x80>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_TIM_Base_Start_IT+0xd0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x80>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_TIM_Base_Start_IT+0xd4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x80>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_TIM_Base_Start_IT+0xd8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x80>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_TIM_Base_Start_IT+0xdc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d010      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	e007      	b.n	8002504 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40010000 	.word	0x40010000
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800
 8002520:	40000c00 	.word	0x40000c00
 8002524:	40010400 	.word	0x40010400
 8002528:	40014000 	.word	0x40014000
 800252c:	40001800 	.word	0x40001800

08002530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b02      	cmp	r3, #2
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0202 	mvn.w	r2, #2
 800255c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9b5 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f9a7 	bl	80028ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f9b8 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0204 	mvn.w	r2, #4
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f98b 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f97d 	bl	80028ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f98e 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d11b      	bne.n	8002634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0208 	mvn.w	r2, #8
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2204      	movs	r2, #4
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f961 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f953 	bl	80028ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f964 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b10      	cmp	r3, #16
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b10      	cmp	r3, #16
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0210 	mvn.w	r2, #16
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2208      	movs	r2, #8
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f937 	bl	80028e2 <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f929 	bl	80028ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f93a 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0201 	mvn.w	r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fd ffb8 	bl	8000624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b80      	cmp	r3, #128	; 0x80
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fae0 	bl	8002ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8ff 	bl	800290a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b20      	cmp	r3, #32
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b20      	cmp	r3, #32
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0220 	mvn.w	r2, #32
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 faaa 	bl	8002c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e0b4      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x186>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	d03e      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0xd4>
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279a:	f200 8087 	bhi.w	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	f000 8086 	beq.w	80028b2 <HAL_TIM_ConfigClockSource+0x172>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027aa:	d87f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b70      	cmp	r3, #112	; 0x70
 80027ae:	d01a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0xa6>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d87b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d050      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x11a>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d877      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d03c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xfa>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d873      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d058      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x13a>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d86f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b30      	cmp	r3, #48	; 0x30
 80027ce:	d064      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d86b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d060      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d867      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d05a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	e062      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f000 f9ad 	bl	8002b54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	609a      	str	r2, [r3, #8]
      break;
 8002812:	e04f      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f000 f996 	bl	8002b54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002836:	609a      	str	r2, [r3, #8]
      break;
 8002838:	e03c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f90a 	bl	8002a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2150      	movs	r1, #80	; 0x50
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f963 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 8002858:	e02c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f929 	bl	8002abe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2160      	movs	r1, #96	; 0x60
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f953 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 8002878:	e01c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f8ea 	bl	8002a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f943 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 8002898:	e00c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 f93a 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028aa:	e003      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
      break;
 80028b0:	e000      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <TIM_Base_SetConfig+0x114>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293e:	d00f      	beq.n	8002960 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3d      	ldr	r2, [pc, #244]	; (8002a38 <TIM_Base_SetConfig+0x118>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00b      	beq.n	8002960 <TIM_Base_SetConfig+0x40>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <TIM_Base_SetConfig+0x11c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_Base_SetConfig+0x40>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3b      	ldr	r2, [pc, #236]	; (8002a40 <TIM_Base_SetConfig+0x120>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_Base_SetConfig+0x40>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3a      	ldr	r2, [pc, #232]	; (8002a44 <TIM_Base_SetConfig+0x124>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d108      	bne.n	8002972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a2f      	ldr	r2, [pc, #188]	; (8002a34 <TIM_Base_SetConfig+0x114>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d02b      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d027      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a2c      	ldr	r2, [pc, #176]	; (8002a38 <TIM_Base_SetConfig+0x118>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d023      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <TIM_Base_SetConfig+0x11c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01f      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <TIM_Base_SetConfig+0x120>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01b      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <TIM_Base_SetConfig+0x124>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d017      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <TIM_Base_SetConfig+0x128>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <TIM_Base_SetConfig+0x12c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00f      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <TIM_Base_SetConfig+0x130>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00b      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <TIM_Base_SetConfig+0x134>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <TIM_Base_SetConfig+0x138>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <TIM_Base_SetConfig+0xb2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <TIM_Base_SetConfig+0x13c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d108      	bne.n	80029e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <TIM_Base_SetConfig+0x114>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0xf8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <TIM_Base_SetConfig+0x124>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800
 8002a40:	40000c00 	.word	0x40000c00
 8002a44:	40010400 	.word	0x40010400
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	40001800 	.word	0x40001800
 8002a58:	40001c00 	.word	0x40001c00
 8002a5c:	40002000 	.word	0x40002000

08002a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 030a 	bic.w	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b087      	sub	sp, #28
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f023 0210 	bic.w	r2, r3, #16
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	031b      	lsls	r3, r3, #12
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002afa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f043 0307 	orr.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	609a      	str	r2, [r3, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e05a      	b.n	8002c62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d01d      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10c      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40010400 	.word	0x40010400
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40001800 	.word	0x40001800

08002c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <__errno>:
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <__errno+0x8>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000014 	.word	0x20000014

08002cc0 <__libc_init_array>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	4d0d      	ldr	r5, [pc, #52]	; (8002cf8 <__libc_init_array+0x38>)
 8002cc4:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <__libc_init_array+0x3c>)
 8002cc6:	1b64      	subs	r4, r4, r5
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	2600      	movs	r6, #0
 8002ccc:	42a6      	cmp	r6, r4
 8002cce:	d109      	bne.n	8002ce4 <__libc_init_array+0x24>
 8002cd0:	4d0b      	ldr	r5, [pc, #44]	; (8002d00 <__libc_init_array+0x40>)
 8002cd2:	4c0c      	ldr	r4, [pc, #48]	; (8002d04 <__libc_init_array+0x44>)
 8002cd4:	f000 fe20 	bl	8003918 <_init>
 8002cd8:	1b64      	subs	r4, r4, r5
 8002cda:	10a4      	asrs	r4, r4, #2
 8002cdc:	2600      	movs	r6, #0
 8002cde:	42a6      	cmp	r6, r4
 8002ce0:	d105      	bne.n	8002cee <__libc_init_array+0x2e>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce8:	4798      	blx	r3
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7ee      	b.n	8002ccc <__libc_init_array+0xc>
 8002cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf2:	4798      	blx	r3
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e7f2      	b.n	8002cde <__libc_init_array+0x1e>
 8002cf8:	080039b4 	.word	0x080039b4
 8002cfc:	080039b4 	.word	0x080039b4
 8002d00:	080039b4 	.word	0x080039b4
 8002d04:	080039b8 	.word	0x080039b8

08002d08 <memcpy>:
 8002d08:	440a      	add	r2, r1
 8002d0a:	4291      	cmp	r1, r2
 8002d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d10:	d100      	bne.n	8002d14 <memcpy+0xc>
 8002d12:	4770      	bx	lr
 8002d14:	b510      	push	{r4, lr}
 8002d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d1e:	4291      	cmp	r1, r2
 8002d20:	d1f9      	bne.n	8002d16 <memcpy+0xe>
 8002d22:	bd10      	pop	{r4, pc}

08002d24 <memset>:
 8002d24:	4402      	add	r2, r0
 8002d26:	4603      	mov	r3, r0
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <memset+0xa>
 8002d2c:	4770      	bx	lr
 8002d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d32:	e7f9      	b.n	8002d28 <memset+0x4>

08002d34 <putchar>:
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <putchar+0x28>)
 8002d36:	b513      	push	{r0, r1, r4, lr}
 8002d38:	681c      	ldr	r4, [r3, #0]
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	b134      	cbz	r4, 8002d4c <putchar+0x18>
 8002d3e:	69a3      	ldr	r3, [r4, #24]
 8002d40:	b923      	cbnz	r3, 8002d4c <putchar+0x18>
 8002d42:	9001      	str	r0, [sp, #4]
 8002d44:	4620      	mov	r0, r4
 8002d46:	f000 fb21 	bl	800338c <__sinit>
 8002d4a:	9901      	ldr	r1, [sp, #4]
 8002d4c:	68a2      	ldr	r2, [r4, #8]
 8002d4e:	4620      	mov	r0, r4
 8002d50:	b002      	add	sp, #8
 8002d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d56:	f000 bccf 	b.w	80036f8 <_putc_r>
 8002d5a:	bf00      	nop
 8002d5c:	20000014 	.word	0x20000014

08002d60 <_puts_r>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	460e      	mov	r6, r1
 8002d64:	4605      	mov	r5, r0
 8002d66:	b118      	cbz	r0, 8002d70 <_puts_r+0x10>
 8002d68:	6983      	ldr	r3, [r0, #24]
 8002d6a:	b90b      	cbnz	r3, 8002d70 <_puts_r+0x10>
 8002d6c:	f000 fb0e 	bl	800338c <__sinit>
 8002d70:	69ab      	ldr	r3, [r5, #24]
 8002d72:	68ac      	ldr	r4, [r5, #8]
 8002d74:	b913      	cbnz	r3, 8002d7c <_puts_r+0x1c>
 8002d76:	4628      	mov	r0, r5
 8002d78:	f000 fb08 	bl	800338c <__sinit>
 8002d7c:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <_puts_r+0xd0>)
 8002d7e:	429c      	cmp	r4, r3
 8002d80:	d120      	bne.n	8002dc4 <_puts_r+0x64>
 8002d82:	686c      	ldr	r4, [r5, #4]
 8002d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d86:	07db      	lsls	r3, r3, #31
 8002d88:	d405      	bmi.n	8002d96 <_puts_r+0x36>
 8002d8a:	89a3      	ldrh	r3, [r4, #12]
 8002d8c:	0598      	lsls	r0, r3, #22
 8002d8e:	d402      	bmi.n	8002d96 <_puts_r+0x36>
 8002d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d92:	f000 fb99 	bl	80034c8 <__retarget_lock_acquire_recursive>
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	0719      	lsls	r1, r3, #28
 8002d9a:	d51d      	bpl.n	8002dd8 <_puts_r+0x78>
 8002d9c:	6923      	ldr	r3, [r4, #16]
 8002d9e:	b1db      	cbz	r3, 8002dd8 <_puts_r+0x78>
 8002da0:	3e01      	subs	r6, #1
 8002da2:	68a3      	ldr	r3, [r4, #8]
 8002da4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002da8:	3b01      	subs	r3, #1
 8002daa:	60a3      	str	r3, [r4, #8]
 8002dac:	bb39      	cbnz	r1, 8002dfe <_puts_r+0x9e>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da38      	bge.n	8002e24 <_puts_r+0xc4>
 8002db2:	4622      	mov	r2, r4
 8002db4:	210a      	movs	r1, #10
 8002db6:	4628      	mov	r0, r5
 8002db8:	f000 f90e 	bl	8002fd8 <__swbuf_r>
 8002dbc:	3001      	adds	r0, #1
 8002dbe:	d011      	beq.n	8002de4 <_puts_r+0x84>
 8002dc0:	250a      	movs	r5, #10
 8002dc2:	e011      	b.n	8002de8 <_puts_r+0x88>
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <_puts_r+0xd4>)
 8002dc6:	429c      	cmp	r4, r3
 8002dc8:	d101      	bne.n	8002dce <_puts_r+0x6e>
 8002dca:	68ac      	ldr	r4, [r5, #8]
 8002dcc:	e7da      	b.n	8002d84 <_puts_r+0x24>
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <_puts_r+0xd8>)
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	bf08      	it	eq
 8002dd4:	68ec      	ldreq	r4, [r5, #12]
 8002dd6:	e7d5      	b.n	8002d84 <_puts_r+0x24>
 8002dd8:	4621      	mov	r1, r4
 8002dda:	4628      	mov	r0, r5
 8002ddc:	f000 f94e 	bl	800307c <__swsetup_r>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d0dd      	beq.n	8002da0 <_puts_r+0x40>
 8002de4:	f04f 35ff 	mov.w	r5, #4294967295
 8002de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dea:	07da      	lsls	r2, r3, #31
 8002dec:	d405      	bmi.n	8002dfa <_puts_r+0x9a>
 8002dee:	89a3      	ldrh	r3, [r4, #12]
 8002df0:	059b      	lsls	r3, r3, #22
 8002df2:	d402      	bmi.n	8002dfa <_puts_r+0x9a>
 8002df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002df6:	f000 fb68 	bl	80034ca <__retarget_lock_release_recursive>
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da04      	bge.n	8002e0c <_puts_r+0xac>
 8002e02:	69a2      	ldr	r2, [r4, #24]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dc06      	bgt.n	8002e16 <_puts_r+0xb6>
 8002e08:	290a      	cmp	r1, #10
 8002e0a:	d004      	beq.n	8002e16 <_puts_r+0xb6>
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	6022      	str	r2, [r4, #0]
 8002e12:	7019      	strb	r1, [r3, #0]
 8002e14:	e7c5      	b.n	8002da2 <_puts_r+0x42>
 8002e16:	4622      	mov	r2, r4
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f000 f8dd 	bl	8002fd8 <__swbuf_r>
 8002e1e:	3001      	adds	r0, #1
 8002e20:	d1bf      	bne.n	8002da2 <_puts_r+0x42>
 8002e22:	e7df      	b.n	8002de4 <_puts_r+0x84>
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	250a      	movs	r5, #10
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	6022      	str	r2, [r4, #0]
 8002e2c:	701d      	strb	r5, [r3, #0]
 8002e2e:	e7db      	b.n	8002de8 <_puts_r+0x88>
 8002e30:	0800396c 	.word	0x0800396c
 8002e34:	0800398c 	.word	0x0800398c
 8002e38:	0800394c 	.word	0x0800394c

08002e3c <puts>:
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <puts+0xc>)
 8002e3e:	4601      	mov	r1, r0
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	f7ff bf8d 	b.w	8002d60 <_puts_r>
 8002e46:	bf00      	nop
 8002e48:	20000014 	.word	0x20000014

08002e4c <setvbuf>:
 8002e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002e50:	461d      	mov	r5, r3
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <setvbuf+0x17c>)
 8002e54:	681f      	ldr	r7, [r3, #0]
 8002e56:	4604      	mov	r4, r0
 8002e58:	460e      	mov	r6, r1
 8002e5a:	4690      	mov	r8, r2
 8002e5c:	b127      	cbz	r7, 8002e68 <setvbuf+0x1c>
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	b913      	cbnz	r3, 8002e68 <setvbuf+0x1c>
 8002e62:	4638      	mov	r0, r7
 8002e64:	f000 fa92 	bl	800338c <__sinit>
 8002e68:	4b58      	ldr	r3, [pc, #352]	; (8002fcc <setvbuf+0x180>)
 8002e6a:	429c      	cmp	r4, r3
 8002e6c:	d167      	bne.n	8002f3e <setvbuf+0xf2>
 8002e6e:	687c      	ldr	r4, [r7, #4]
 8002e70:	f1b8 0f02 	cmp.w	r8, #2
 8002e74:	d006      	beq.n	8002e84 <setvbuf+0x38>
 8002e76:	f1b8 0f01 	cmp.w	r8, #1
 8002e7a:	f200 809f 	bhi.w	8002fbc <setvbuf+0x170>
 8002e7e:	2d00      	cmp	r5, #0
 8002e80:	f2c0 809c 	blt.w	8002fbc <setvbuf+0x170>
 8002e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e86:	07db      	lsls	r3, r3, #31
 8002e88:	d405      	bmi.n	8002e96 <setvbuf+0x4a>
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	0598      	lsls	r0, r3, #22
 8002e8e:	d402      	bmi.n	8002e96 <setvbuf+0x4a>
 8002e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e92:	f000 fb19 	bl	80034c8 <__retarget_lock_acquire_recursive>
 8002e96:	4621      	mov	r1, r4
 8002e98:	4638      	mov	r0, r7
 8002e9a:	f000 f9e3 	bl	8003264 <_fflush_r>
 8002e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ea0:	b141      	cbz	r1, 8002eb4 <setvbuf+0x68>
 8002ea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ea6:	4299      	cmp	r1, r3
 8002ea8:	d002      	beq.n	8002eb0 <setvbuf+0x64>
 8002eaa:	4638      	mov	r0, r7
 8002eac:	f000 fb7a 	bl	80035a4 <_free_r>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6363      	str	r3, [r4, #52]	; 0x34
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61a3      	str	r3, [r4, #24]
 8002eb8:	6063      	str	r3, [r4, #4]
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	0619      	lsls	r1, r3, #24
 8002ebe:	d503      	bpl.n	8002ec8 <setvbuf+0x7c>
 8002ec0:	6921      	ldr	r1, [r4, #16]
 8002ec2:	4638      	mov	r0, r7
 8002ec4:	f000 fb6e 	bl	80035a4 <_free_r>
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	f1b8 0f02 	cmp.w	r8, #2
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	d06c      	beq.n	8002fb4 <setvbuf+0x168>
 8002eda:	ab01      	add	r3, sp, #4
 8002edc:	466a      	mov	r2, sp
 8002ede:	4621      	mov	r1, r4
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	f000 faf3 	bl	80034cc <__swhatbuf_r>
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	4318      	orrs	r0, r3
 8002eea:	81a0      	strh	r0, [r4, #12]
 8002eec:	2d00      	cmp	r5, #0
 8002eee:	d130      	bne.n	8002f52 <setvbuf+0x106>
 8002ef0:	9d00      	ldr	r5, [sp, #0]
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f000 fb4e 	bl	8003594 <malloc>
 8002ef8:	4606      	mov	r6, r0
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d155      	bne.n	8002faa <setvbuf+0x15e>
 8002efe:	f8dd 9000 	ldr.w	r9, [sp]
 8002f02:	45a9      	cmp	r9, r5
 8002f04:	d14a      	bne.n	8002f9c <setvbuf+0x150>
 8002f06:	f04f 35ff 	mov.w	r5, #4294967295
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60a2      	str	r2, [r4, #8]
 8002f0e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002f12:	6022      	str	r2, [r4, #0]
 8002f14:	6122      	str	r2, [r4, #16]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f1c:	6162      	str	r2, [r4, #20]
 8002f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	07d2      	lsls	r2, r2, #31
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	d405      	bmi.n	8002f36 <setvbuf+0xea>
 8002f2a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f2e:	d102      	bne.n	8002f36 <setvbuf+0xea>
 8002f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f32:	f000 faca 	bl	80034ca <__retarget_lock_release_recursive>
 8002f36:	4628      	mov	r0, r5
 8002f38:	b003      	add	sp, #12
 8002f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <setvbuf+0x184>)
 8002f40:	429c      	cmp	r4, r3
 8002f42:	d101      	bne.n	8002f48 <setvbuf+0xfc>
 8002f44:	68bc      	ldr	r4, [r7, #8]
 8002f46:	e793      	b.n	8002e70 <setvbuf+0x24>
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <setvbuf+0x188>)
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	bf08      	it	eq
 8002f4e:	68fc      	ldreq	r4, [r7, #12]
 8002f50:	e78e      	b.n	8002e70 <setvbuf+0x24>
 8002f52:	2e00      	cmp	r6, #0
 8002f54:	d0cd      	beq.n	8002ef2 <setvbuf+0xa6>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	b913      	cbnz	r3, 8002f60 <setvbuf+0x114>
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	f000 fa16 	bl	800338c <__sinit>
 8002f60:	f1b8 0f01 	cmp.w	r8, #1
 8002f64:	bf08      	it	eq
 8002f66:	89a3      	ldrheq	r3, [r4, #12]
 8002f68:	6026      	str	r6, [r4, #0]
 8002f6a:	bf04      	itt	eq
 8002f6c:	f043 0301 	orreq.w	r3, r3, #1
 8002f70:	81a3      	strheq	r3, [r4, #12]
 8002f72:	89a2      	ldrh	r2, [r4, #12]
 8002f74:	f012 0308 	ands.w	r3, r2, #8
 8002f78:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002f7c:	d01c      	beq.n	8002fb8 <setvbuf+0x16c>
 8002f7e:	07d3      	lsls	r3, r2, #31
 8002f80:	bf41      	itttt	mi
 8002f82:	2300      	movmi	r3, #0
 8002f84:	426d      	negmi	r5, r5
 8002f86:	60a3      	strmi	r3, [r4, #8]
 8002f88:	61a5      	strmi	r5, [r4, #24]
 8002f8a:	bf58      	it	pl
 8002f8c:	60a5      	strpl	r5, [r4, #8]
 8002f8e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002f90:	f015 0501 	ands.w	r5, r5, #1
 8002f94:	d115      	bne.n	8002fc2 <setvbuf+0x176>
 8002f96:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002f9a:	e7c8      	b.n	8002f2e <setvbuf+0xe2>
 8002f9c:	4648      	mov	r0, r9
 8002f9e:	f000 faf9 	bl	8003594 <malloc>
 8002fa2:	4606      	mov	r6, r0
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d0ae      	beq.n	8002f06 <setvbuf+0xba>
 8002fa8:	464d      	mov	r5, r9
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	e7d0      	b.n	8002f56 <setvbuf+0x10a>
 8002fb4:	2500      	movs	r5, #0
 8002fb6:	e7a8      	b.n	8002f0a <setvbuf+0xbe>
 8002fb8:	60a3      	str	r3, [r4, #8]
 8002fba:	e7e8      	b.n	8002f8e <setvbuf+0x142>
 8002fbc:	f04f 35ff 	mov.w	r5, #4294967295
 8002fc0:	e7b9      	b.n	8002f36 <setvbuf+0xea>
 8002fc2:	2500      	movs	r5, #0
 8002fc4:	e7b7      	b.n	8002f36 <setvbuf+0xea>
 8002fc6:	bf00      	nop
 8002fc8:	20000014 	.word	0x20000014
 8002fcc:	0800396c 	.word	0x0800396c
 8002fd0:	0800398c 	.word	0x0800398c
 8002fd4:	0800394c 	.word	0x0800394c

08002fd8 <__swbuf_r>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	460e      	mov	r6, r1
 8002fdc:	4614      	mov	r4, r2
 8002fde:	4605      	mov	r5, r0
 8002fe0:	b118      	cbz	r0, 8002fea <__swbuf_r+0x12>
 8002fe2:	6983      	ldr	r3, [r0, #24]
 8002fe4:	b90b      	cbnz	r3, 8002fea <__swbuf_r+0x12>
 8002fe6:	f000 f9d1 	bl	800338c <__sinit>
 8002fea:	4b21      	ldr	r3, [pc, #132]	; (8003070 <__swbuf_r+0x98>)
 8002fec:	429c      	cmp	r4, r3
 8002fee:	d12b      	bne.n	8003048 <__swbuf_r+0x70>
 8002ff0:	686c      	ldr	r4, [r5, #4]
 8002ff2:	69a3      	ldr	r3, [r4, #24]
 8002ff4:	60a3      	str	r3, [r4, #8]
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	071a      	lsls	r2, r3, #28
 8002ffa:	d52f      	bpl.n	800305c <__swbuf_r+0x84>
 8002ffc:	6923      	ldr	r3, [r4, #16]
 8002ffe:	b36b      	cbz	r3, 800305c <__swbuf_r+0x84>
 8003000:	6923      	ldr	r3, [r4, #16]
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	1ac0      	subs	r0, r0, r3
 8003006:	6963      	ldr	r3, [r4, #20]
 8003008:	b2f6      	uxtb	r6, r6
 800300a:	4283      	cmp	r3, r0
 800300c:	4637      	mov	r7, r6
 800300e:	dc04      	bgt.n	800301a <__swbuf_r+0x42>
 8003010:	4621      	mov	r1, r4
 8003012:	4628      	mov	r0, r5
 8003014:	f000 f926 	bl	8003264 <_fflush_r>
 8003018:	bb30      	cbnz	r0, 8003068 <__swbuf_r+0x90>
 800301a:	68a3      	ldr	r3, [r4, #8]
 800301c:	3b01      	subs	r3, #1
 800301e:	60a3      	str	r3, [r4, #8]
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	6022      	str	r2, [r4, #0]
 8003026:	701e      	strb	r6, [r3, #0]
 8003028:	6963      	ldr	r3, [r4, #20]
 800302a:	3001      	adds	r0, #1
 800302c:	4283      	cmp	r3, r0
 800302e:	d004      	beq.n	800303a <__swbuf_r+0x62>
 8003030:	89a3      	ldrh	r3, [r4, #12]
 8003032:	07db      	lsls	r3, r3, #31
 8003034:	d506      	bpl.n	8003044 <__swbuf_r+0x6c>
 8003036:	2e0a      	cmp	r6, #10
 8003038:	d104      	bne.n	8003044 <__swbuf_r+0x6c>
 800303a:	4621      	mov	r1, r4
 800303c:	4628      	mov	r0, r5
 800303e:	f000 f911 	bl	8003264 <_fflush_r>
 8003042:	b988      	cbnz	r0, 8003068 <__swbuf_r+0x90>
 8003044:	4638      	mov	r0, r7
 8003046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <__swbuf_r+0x9c>)
 800304a:	429c      	cmp	r4, r3
 800304c:	d101      	bne.n	8003052 <__swbuf_r+0x7a>
 800304e:	68ac      	ldr	r4, [r5, #8]
 8003050:	e7cf      	b.n	8002ff2 <__swbuf_r+0x1a>
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <__swbuf_r+0xa0>)
 8003054:	429c      	cmp	r4, r3
 8003056:	bf08      	it	eq
 8003058:	68ec      	ldreq	r4, [r5, #12]
 800305a:	e7ca      	b.n	8002ff2 <__swbuf_r+0x1a>
 800305c:	4621      	mov	r1, r4
 800305e:	4628      	mov	r0, r5
 8003060:	f000 f80c 	bl	800307c <__swsetup_r>
 8003064:	2800      	cmp	r0, #0
 8003066:	d0cb      	beq.n	8003000 <__swbuf_r+0x28>
 8003068:	f04f 37ff 	mov.w	r7, #4294967295
 800306c:	e7ea      	b.n	8003044 <__swbuf_r+0x6c>
 800306e:	bf00      	nop
 8003070:	0800396c 	.word	0x0800396c
 8003074:	0800398c 	.word	0x0800398c
 8003078:	0800394c 	.word	0x0800394c

0800307c <__swsetup_r>:
 800307c:	4b32      	ldr	r3, [pc, #200]	; (8003148 <__swsetup_r+0xcc>)
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	681d      	ldr	r5, [r3, #0]
 8003082:	4606      	mov	r6, r0
 8003084:	460c      	mov	r4, r1
 8003086:	b125      	cbz	r5, 8003092 <__swsetup_r+0x16>
 8003088:	69ab      	ldr	r3, [r5, #24]
 800308a:	b913      	cbnz	r3, 8003092 <__swsetup_r+0x16>
 800308c:	4628      	mov	r0, r5
 800308e:	f000 f97d 	bl	800338c <__sinit>
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <__swsetup_r+0xd0>)
 8003094:	429c      	cmp	r4, r3
 8003096:	d10f      	bne.n	80030b8 <__swsetup_r+0x3c>
 8003098:	686c      	ldr	r4, [r5, #4]
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030a0:	0719      	lsls	r1, r3, #28
 80030a2:	d42c      	bmi.n	80030fe <__swsetup_r+0x82>
 80030a4:	06dd      	lsls	r5, r3, #27
 80030a6:	d411      	bmi.n	80030cc <__swsetup_r+0x50>
 80030a8:	2309      	movs	r3, #9
 80030aa:	6033      	str	r3, [r6, #0]
 80030ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030b0:	81a3      	strh	r3, [r4, #12]
 80030b2:	f04f 30ff 	mov.w	r0, #4294967295
 80030b6:	e03e      	b.n	8003136 <__swsetup_r+0xba>
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <__swsetup_r+0xd4>)
 80030ba:	429c      	cmp	r4, r3
 80030bc:	d101      	bne.n	80030c2 <__swsetup_r+0x46>
 80030be:	68ac      	ldr	r4, [r5, #8]
 80030c0:	e7eb      	b.n	800309a <__swsetup_r+0x1e>
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <__swsetup_r+0xd8>)
 80030c4:	429c      	cmp	r4, r3
 80030c6:	bf08      	it	eq
 80030c8:	68ec      	ldreq	r4, [r5, #12]
 80030ca:	e7e6      	b.n	800309a <__swsetup_r+0x1e>
 80030cc:	0758      	lsls	r0, r3, #29
 80030ce:	d512      	bpl.n	80030f6 <__swsetup_r+0x7a>
 80030d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030d2:	b141      	cbz	r1, 80030e6 <__swsetup_r+0x6a>
 80030d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030d8:	4299      	cmp	r1, r3
 80030da:	d002      	beq.n	80030e2 <__swsetup_r+0x66>
 80030dc:	4630      	mov	r0, r6
 80030de:	f000 fa61 	bl	80035a4 <_free_r>
 80030e2:	2300      	movs	r3, #0
 80030e4:	6363      	str	r3, [r4, #52]	; 0x34
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030ec:	81a3      	strh	r3, [r4, #12]
 80030ee:	2300      	movs	r3, #0
 80030f0:	6063      	str	r3, [r4, #4]
 80030f2:	6923      	ldr	r3, [r4, #16]
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	81a3      	strh	r3, [r4, #12]
 80030fe:	6923      	ldr	r3, [r4, #16]
 8003100:	b94b      	cbnz	r3, 8003116 <__swsetup_r+0x9a>
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d003      	beq.n	8003116 <__swsetup_r+0x9a>
 800310e:	4621      	mov	r1, r4
 8003110:	4630      	mov	r0, r6
 8003112:	f000 f9ff 	bl	8003514 <__smakebuf_r>
 8003116:	89a0      	ldrh	r0, [r4, #12]
 8003118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800311c:	f010 0301 	ands.w	r3, r0, #1
 8003120:	d00a      	beq.n	8003138 <__swsetup_r+0xbc>
 8003122:	2300      	movs	r3, #0
 8003124:	60a3      	str	r3, [r4, #8]
 8003126:	6963      	ldr	r3, [r4, #20]
 8003128:	425b      	negs	r3, r3
 800312a:	61a3      	str	r3, [r4, #24]
 800312c:	6923      	ldr	r3, [r4, #16]
 800312e:	b943      	cbnz	r3, 8003142 <__swsetup_r+0xc6>
 8003130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003134:	d1ba      	bne.n	80030ac <__swsetup_r+0x30>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	0781      	lsls	r1, r0, #30
 800313a:	bf58      	it	pl
 800313c:	6963      	ldrpl	r3, [r4, #20]
 800313e:	60a3      	str	r3, [r4, #8]
 8003140:	e7f4      	b.n	800312c <__swsetup_r+0xb0>
 8003142:	2000      	movs	r0, #0
 8003144:	e7f7      	b.n	8003136 <__swsetup_r+0xba>
 8003146:	bf00      	nop
 8003148:	20000014 	.word	0x20000014
 800314c:	0800396c 	.word	0x0800396c
 8003150:	0800398c 	.word	0x0800398c
 8003154:	0800394c 	.word	0x0800394c

08003158 <__sflush_r>:
 8003158:	898a      	ldrh	r2, [r1, #12]
 800315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315e:	4605      	mov	r5, r0
 8003160:	0710      	lsls	r0, r2, #28
 8003162:	460c      	mov	r4, r1
 8003164:	d458      	bmi.n	8003218 <__sflush_r+0xc0>
 8003166:	684b      	ldr	r3, [r1, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	dc05      	bgt.n	8003178 <__sflush_r+0x20>
 800316c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	dc02      	bgt.n	8003178 <__sflush_r+0x20>
 8003172:	2000      	movs	r0, #0
 8003174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800317a:	2e00      	cmp	r6, #0
 800317c:	d0f9      	beq.n	8003172 <__sflush_r+0x1a>
 800317e:	2300      	movs	r3, #0
 8003180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003184:	682f      	ldr	r7, [r5, #0]
 8003186:	602b      	str	r3, [r5, #0]
 8003188:	d032      	beq.n	80031f0 <__sflush_r+0x98>
 800318a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800318c:	89a3      	ldrh	r3, [r4, #12]
 800318e:	075a      	lsls	r2, r3, #29
 8003190:	d505      	bpl.n	800319e <__sflush_r+0x46>
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	1ac0      	subs	r0, r0, r3
 8003196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003198:	b10b      	cbz	r3, 800319e <__sflush_r+0x46>
 800319a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800319c:	1ac0      	subs	r0, r0, r3
 800319e:	2300      	movs	r3, #0
 80031a0:	4602      	mov	r2, r0
 80031a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031a4:	6a21      	ldr	r1, [r4, #32]
 80031a6:	4628      	mov	r0, r5
 80031a8:	47b0      	blx	r6
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	d106      	bne.n	80031be <__sflush_r+0x66>
 80031b0:	6829      	ldr	r1, [r5, #0]
 80031b2:	291d      	cmp	r1, #29
 80031b4:	d82c      	bhi.n	8003210 <__sflush_r+0xb8>
 80031b6:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <__sflush_r+0x108>)
 80031b8:	40ca      	lsrs	r2, r1
 80031ba:	07d6      	lsls	r6, r2, #31
 80031bc:	d528      	bpl.n	8003210 <__sflush_r+0xb8>
 80031be:	2200      	movs	r2, #0
 80031c0:	6062      	str	r2, [r4, #4]
 80031c2:	04d9      	lsls	r1, r3, #19
 80031c4:	6922      	ldr	r2, [r4, #16]
 80031c6:	6022      	str	r2, [r4, #0]
 80031c8:	d504      	bpl.n	80031d4 <__sflush_r+0x7c>
 80031ca:	1c42      	adds	r2, r0, #1
 80031cc:	d101      	bne.n	80031d2 <__sflush_r+0x7a>
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	b903      	cbnz	r3, 80031d4 <__sflush_r+0x7c>
 80031d2:	6560      	str	r0, [r4, #84]	; 0x54
 80031d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d6:	602f      	str	r7, [r5, #0]
 80031d8:	2900      	cmp	r1, #0
 80031da:	d0ca      	beq.n	8003172 <__sflush_r+0x1a>
 80031dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031e0:	4299      	cmp	r1, r3
 80031e2:	d002      	beq.n	80031ea <__sflush_r+0x92>
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 f9dd 	bl	80035a4 <_free_r>
 80031ea:	2000      	movs	r0, #0
 80031ec:	6360      	str	r0, [r4, #52]	; 0x34
 80031ee:	e7c1      	b.n	8003174 <__sflush_r+0x1c>
 80031f0:	6a21      	ldr	r1, [r4, #32]
 80031f2:	2301      	movs	r3, #1
 80031f4:	4628      	mov	r0, r5
 80031f6:	47b0      	blx	r6
 80031f8:	1c41      	adds	r1, r0, #1
 80031fa:	d1c7      	bne.n	800318c <__sflush_r+0x34>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0c4      	beq.n	800318c <__sflush_r+0x34>
 8003202:	2b1d      	cmp	r3, #29
 8003204:	d001      	beq.n	800320a <__sflush_r+0xb2>
 8003206:	2b16      	cmp	r3, #22
 8003208:	d101      	bne.n	800320e <__sflush_r+0xb6>
 800320a:	602f      	str	r7, [r5, #0]
 800320c:	e7b1      	b.n	8003172 <__sflush_r+0x1a>
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003214:	81a3      	strh	r3, [r4, #12]
 8003216:	e7ad      	b.n	8003174 <__sflush_r+0x1c>
 8003218:	690f      	ldr	r7, [r1, #16]
 800321a:	2f00      	cmp	r7, #0
 800321c:	d0a9      	beq.n	8003172 <__sflush_r+0x1a>
 800321e:	0793      	lsls	r3, r2, #30
 8003220:	680e      	ldr	r6, [r1, #0]
 8003222:	bf08      	it	eq
 8003224:	694b      	ldreq	r3, [r1, #20]
 8003226:	600f      	str	r7, [r1, #0]
 8003228:	bf18      	it	ne
 800322a:	2300      	movne	r3, #0
 800322c:	eba6 0807 	sub.w	r8, r6, r7
 8003230:	608b      	str	r3, [r1, #8]
 8003232:	f1b8 0f00 	cmp.w	r8, #0
 8003236:	dd9c      	ble.n	8003172 <__sflush_r+0x1a>
 8003238:	6a21      	ldr	r1, [r4, #32]
 800323a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800323c:	4643      	mov	r3, r8
 800323e:	463a      	mov	r2, r7
 8003240:	4628      	mov	r0, r5
 8003242:	47b0      	blx	r6
 8003244:	2800      	cmp	r0, #0
 8003246:	dc06      	bgt.n	8003256 <__sflush_r+0xfe>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	e78e      	b.n	8003174 <__sflush_r+0x1c>
 8003256:	4407      	add	r7, r0
 8003258:	eba8 0800 	sub.w	r8, r8, r0
 800325c:	e7e9      	b.n	8003232 <__sflush_r+0xda>
 800325e:	bf00      	nop
 8003260:	20400001 	.word	0x20400001

08003264 <_fflush_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	4605      	mov	r5, r0
 800326a:	460c      	mov	r4, r1
 800326c:	b913      	cbnz	r3, 8003274 <_fflush_r+0x10>
 800326e:	2500      	movs	r5, #0
 8003270:	4628      	mov	r0, r5
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	b118      	cbz	r0, 800327e <_fflush_r+0x1a>
 8003276:	6983      	ldr	r3, [r0, #24]
 8003278:	b90b      	cbnz	r3, 800327e <_fflush_r+0x1a>
 800327a:	f000 f887 	bl	800338c <__sinit>
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <_fflush_r+0x6c>)
 8003280:	429c      	cmp	r4, r3
 8003282:	d11b      	bne.n	80032bc <_fflush_r+0x58>
 8003284:	686c      	ldr	r4, [r5, #4]
 8003286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ef      	beq.n	800326e <_fflush_r+0xa>
 800328e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003290:	07d0      	lsls	r0, r2, #31
 8003292:	d404      	bmi.n	800329e <_fflush_r+0x3a>
 8003294:	0599      	lsls	r1, r3, #22
 8003296:	d402      	bmi.n	800329e <_fflush_r+0x3a>
 8003298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800329a:	f000 f915 	bl	80034c8 <__retarget_lock_acquire_recursive>
 800329e:	4628      	mov	r0, r5
 80032a0:	4621      	mov	r1, r4
 80032a2:	f7ff ff59 	bl	8003158 <__sflush_r>
 80032a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032a8:	07da      	lsls	r2, r3, #31
 80032aa:	4605      	mov	r5, r0
 80032ac:	d4e0      	bmi.n	8003270 <_fflush_r+0xc>
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	059b      	lsls	r3, r3, #22
 80032b2:	d4dd      	bmi.n	8003270 <_fflush_r+0xc>
 80032b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032b6:	f000 f908 	bl	80034ca <__retarget_lock_release_recursive>
 80032ba:	e7d9      	b.n	8003270 <_fflush_r+0xc>
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <_fflush_r+0x70>)
 80032be:	429c      	cmp	r4, r3
 80032c0:	d101      	bne.n	80032c6 <_fflush_r+0x62>
 80032c2:	68ac      	ldr	r4, [r5, #8]
 80032c4:	e7df      	b.n	8003286 <_fflush_r+0x22>
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <_fflush_r+0x74>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	bf08      	it	eq
 80032cc:	68ec      	ldreq	r4, [r5, #12]
 80032ce:	e7da      	b.n	8003286 <_fflush_r+0x22>
 80032d0:	0800396c 	.word	0x0800396c
 80032d4:	0800398c 	.word	0x0800398c
 80032d8:	0800394c 	.word	0x0800394c

080032dc <std>:
 80032dc:	2300      	movs	r3, #0
 80032de:	b510      	push	{r4, lr}
 80032e0:	4604      	mov	r4, r0
 80032e2:	e9c0 3300 	strd	r3, r3, [r0]
 80032e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ea:	6083      	str	r3, [r0, #8]
 80032ec:	8181      	strh	r1, [r0, #12]
 80032ee:	6643      	str	r3, [r0, #100]	; 0x64
 80032f0:	81c2      	strh	r2, [r0, #14]
 80032f2:	6183      	str	r3, [r0, #24]
 80032f4:	4619      	mov	r1, r3
 80032f6:	2208      	movs	r2, #8
 80032f8:	305c      	adds	r0, #92	; 0x5c
 80032fa:	f7ff fd13 	bl	8002d24 <memset>
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <std+0x38>)
 8003300:	6263      	str	r3, [r4, #36]	; 0x24
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <std+0x3c>)
 8003304:	62a3      	str	r3, [r4, #40]	; 0x28
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <std+0x40>)
 8003308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <std+0x44>)
 800330c:	6224      	str	r4, [r4, #32]
 800330e:	6323      	str	r3, [r4, #48]	; 0x30
 8003310:	bd10      	pop	{r4, pc}
 8003312:	bf00      	nop
 8003314:	080037a9 	.word	0x080037a9
 8003318:	080037cb 	.word	0x080037cb
 800331c:	08003803 	.word	0x08003803
 8003320:	08003827 	.word	0x08003827

08003324 <_cleanup_r>:
 8003324:	4901      	ldr	r1, [pc, #4]	; (800332c <_cleanup_r+0x8>)
 8003326:	f000 b8af 	b.w	8003488 <_fwalk_reent>
 800332a:	bf00      	nop
 800332c:	08003265 	.word	0x08003265

08003330 <__sfmoreglue>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	1e4a      	subs	r2, r1, #1
 8003334:	2568      	movs	r5, #104	; 0x68
 8003336:	4355      	muls	r5, r2
 8003338:	460e      	mov	r6, r1
 800333a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800333e:	f000 f981 	bl	8003644 <_malloc_r>
 8003342:	4604      	mov	r4, r0
 8003344:	b140      	cbz	r0, 8003358 <__sfmoreglue+0x28>
 8003346:	2100      	movs	r1, #0
 8003348:	e9c0 1600 	strd	r1, r6, [r0]
 800334c:	300c      	adds	r0, #12
 800334e:	60a0      	str	r0, [r4, #8]
 8003350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003354:	f7ff fce6 	bl	8002d24 <memset>
 8003358:	4620      	mov	r0, r4
 800335a:	bd70      	pop	{r4, r5, r6, pc}

0800335c <__sfp_lock_acquire>:
 800335c:	4801      	ldr	r0, [pc, #4]	; (8003364 <__sfp_lock_acquire+0x8>)
 800335e:	f000 b8b3 	b.w	80034c8 <__retarget_lock_acquire_recursive>
 8003362:	bf00      	nop
 8003364:	200014d4 	.word	0x200014d4

08003368 <__sfp_lock_release>:
 8003368:	4801      	ldr	r0, [pc, #4]	; (8003370 <__sfp_lock_release+0x8>)
 800336a:	f000 b8ae 	b.w	80034ca <__retarget_lock_release_recursive>
 800336e:	bf00      	nop
 8003370:	200014d4 	.word	0x200014d4

08003374 <__sinit_lock_acquire>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__sinit_lock_acquire+0x8>)
 8003376:	f000 b8a7 	b.w	80034c8 <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	200014cf 	.word	0x200014cf

08003380 <__sinit_lock_release>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sinit_lock_release+0x8>)
 8003382:	f000 b8a2 	b.w	80034ca <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	200014cf 	.word	0x200014cf

0800338c <__sinit>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	f7ff fff0 	bl	8003374 <__sinit_lock_acquire>
 8003394:	69a3      	ldr	r3, [r4, #24]
 8003396:	b11b      	cbz	r3, 80033a0 <__sinit+0x14>
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f7ff bff0 	b.w	8003380 <__sinit_lock_release>
 80033a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033a4:	6523      	str	r3, [r4, #80]	; 0x50
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <__sinit+0x68>)
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <__sinit+0x6c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80033ae:	42a3      	cmp	r3, r4
 80033b0:	bf04      	itt	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	61a3      	streq	r3, [r4, #24]
 80033b6:	4620      	mov	r0, r4
 80033b8:	f000 f820 	bl	80033fc <__sfp>
 80033bc:	6060      	str	r0, [r4, #4]
 80033be:	4620      	mov	r0, r4
 80033c0:	f000 f81c 	bl	80033fc <__sfp>
 80033c4:	60a0      	str	r0, [r4, #8]
 80033c6:	4620      	mov	r0, r4
 80033c8:	f000 f818 	bl	80033fc <__sfp>
 80033cc:	2200      	movs	r2, #0
 80033ce:	60e0      	str	r0, [r4, #12]
 80033d0:	2104      	movs	r1, #4
 80033d2:	6860      	ldr	r0, [r4, #4]
 80033d4:	f7ff ff82 	bl	80032dc <std>
 80033d8:	68a0      	ldr	r0, [r4, #8]
 80033da:	2201      	movs	r2, #1
 80033dc:	2109      	movs	r1, #9
 80033de:	f7ff ff7d 	bl	80032dc <std>
 80033e2:	68e0      	ldr	r0, [r4, #12]
 80033e4:	2202      	movs	r2, #2
 80033e6:	2112      	movs	r1, #18
 80033e8:	f7ff ff78 	bl	80032dc <std>
 80033ec:	2301      	movs	r3, #1
 80033ee:	61a3      	str	r3, [r4, #24]
 80033f0:	e7d2      	b.n	8003398 <__sinit+0xc>
 80033f2:	bf00      	nop
 80033f4:	08003948 	.word	0x08003948
 80033f8:	08003325 	.word	0x08003325

080033fc <__sfp>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	4607      	mov	r7, r0
 8003400:	f7ff ffac 	bl	800335c <__sfp_lock_acquire>
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <__sfp+0x84>)
 8003406:	681e      	ldr	r6, [r3, #0]
 8003408:	69b3      	ldr	r3, [r6, #24]
 800340a:	b913      	cbnz	r3, 8003412 <__sfp+0x16>
 800340c:	4630      	mov	r0, r6
 800340e:	f7ff ffbd 	bl	800338c <__sinit>
 8003412:	3648      	adds	r6, #72	; 0x48
 8003414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003418:	3b01      	subs	r3, #1
 800341a:	d503      	bpl.n	8003424 <__sfp+0x28>
 800341c:	6833      	ldr	r3, [r6, #0]
 800341e:	b30b      	cbz	r3, 8003464 <__sfp+0x68>
 8003420:	6836      	ldr	r6, [r6, #0]
 8003422:	e7f7      	b.n	8003414 <__sfp+0x18>
 8003424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003428:	b9d5      	cbnz	r5, 8003460 <__sfp+0x64>
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <__sfp+0x88>)
 800342c:	60e3      	str	r3, [r4, #12]
 800342e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003432:	6665      	str	r5, [r4, #100]	; 0x64
 8003434:	f000 f847 	bl	80034c6 <__retarget_lock_init_recursive>
 8003438:	f7ff ff96 	bl	8003368 <__sfp_lock_release>
 800343c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003444:	6025      	str	r5, [r4, #0]
 8003446:	61a5      	str	r5, [r4, #24]
 8003448:	2208      	movs	r2, #8
 800344a:	4629      	mov	r1, r5
 800344c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003450:	f7ff fc68 	bl	8002d24 <memset>
 8003454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800345c:	4620      	mov	r0, r4
 800345e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003460:	3468      	adds	r4, #104	; 0x68
 8003462:	e7d9      	b.n	8003418 <__sfp+0x1c>
 8003464:	2104      	movs	r1, #4
 8003466:	4638      	mov	r0, r7
 8003468:	f7ff ff62 	bl	8003330 <__sfmoreglue>
 800346c:	4604      	mov	r4, r0
 800346e:	6030      	str	r0, [r6, #0]
 8003470:	2800      	cmp	r0, #0
 8003472:	d1d5      	bne.n	8003420 <__sfp+0x24>
 8003474:	f7ff ff78 	bl	8003368 <__sfp_lock_release>
 8003478:	230c      	movs	r3, #12
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	e7ee      	b.n	800345c <__sfp+0x60>
 800347e:	bf00      	nop
 8003480:	08003948 	.word	0x08003948
 8003484:	ffff0001 	.word	0xffff0001

08003488 <_fwalk_reent>:
 8003488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800348c:	4606      	mov	r6, r0
 800348e:	4688      	mov	r8, r1
 8003490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003494:	2700      	movs	r7, #0
 8003496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800349a:	f1b9 0901 	subs.w	r9, r9, #1
 800349e:	d505      	bpl.n	80034ac <_fwalk_reent+0x24>
 80034a0:	6824      	ldr	r4, [r4, #0]
 80034a2:	2c00      	cmp	r4, #0
 80034a4:	d1f7      	bne.n	8003496 <_fwalk_reent+0xe>
 80034a6:	4638      	mov	r0, r7
 80034a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ac:	89ab      	ldrh	r3, [r5, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d907      	bls.n	80034c2 <_fwalk_reent+0x3a>
 80034b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034b6:	3301      	adds	r3, #1
 80034b8:	d003      	beq.n	80034c2 <_fwalk_reent+0x3a>
 80034ba:	4629      	mov	r1, r5
 80034bc:	4630      	mov	r0, r6
 80034be:	47c0      	blx	r8
 80034c0:	4307      	orrs	r7, r0
 80034c2:	3568      	adds	r5, #104	; 0x68
 80034c4:	e7e9      	b.n	800349a <_fwalk_reent+0x12>

080034c6 <__retarget_lock_init_recursive>:
 80034c6:	4770      	bx	lr

080034c8 <__retarget_lock_acquire_recursive>:
 80034c8:	4770      	bx	lr

080034ca <__retarget_lock_release_recursive>:
 80034ca:	4770      	bx	lr

080034cc <__swhatbuf_r>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	460e      	mov	r6, r1
 80034d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d4:	2900      	cmp	r1, #0
 80034d6:	b096      	sub	sp, #88	; 0x58
 80034d8:	4614      	mov	r4, r2
 80034da:	461d      	mov	r5, r3
 80034dc:	da07      	bge.n	80034ee <__swhatbuf_r+0x22>
 80034de:	2300      	movs	r3, #0
 80034e0:	602b      	str	r3, [r5, #0]
 80034e2:	89b3      	ldrh	r3, [r6, #12]
 80034e4:	061a      	lsls	r2, r3, #24
 80034e6:	d410      	bmi.n	800350a <__swhatbuf_r+0x3e>
 80034e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ec:	e00e      	b.n	800350c <__swhatbuf_r+0x40>
 80034ee:	466a      	mov	r2, sp
 80034f0:	f000 f9c0 	bl	8003874 <_fstat_r>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	dbf2      	blt.n	80034de <__swhatbuf_r+0x12>
 80034f8:	9a01      	ldr	r2, [sp, #4]
 80034fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003502:	425a      	negs	r2, r3
 8003504:	415a      	adcs	r2, r3
 8003506:	602a      	str	r2, [r5, #0]
 8003508:	e7ee      	b.n	80034e8 <__swhatbuf_r+0x1c>
 800350a:	2340      	movs	r3, #64	; 0x40
 800350c:	2000      	movs	r0, #0
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	b016      	add	sp, #88	; 0x58
 8003512:	bd70      	pop	{r4, r5, r6, pc}

08003514 <__smakebuf_r>:
 8003514:	898b      	ldrh	r3, [r1, #12]
 8003516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003518:	079d      	lsls	r5, r3, #30
 800351a:	4606      	mov	r6, r0
 800351c:	460c      	mov	r4, r1
 800351e:	d507      	bpl.n	8003530 <__smakebuf_r+0x1c>
 8003520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	2301      	movs	r3, #1
 800352a:	6163      	str	r3, [r4, #20]
 800352c:	b002      	add	sp, #8
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	ab01      	add	r3, sp, #4
 8003532:	466a      	mov	r2, sp
 8003534:	f7ff ffca 	bl	80034cc <__swhatbuf_r>
 8003538:	9900      	ldr	r1, [sp, #0]
 800353a:	4605      	mov	r5, r0
 800353c:	4630      	mov	r0, r6
 800353e:	f000 f881 	bl	8003644 <_malloc_r>
 8003542:	b948      	cbnz	r0, 8003558 <__smakebuf_r+0x44>
 8003544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003548:	059a      	lsls	r2, r3, #22
 800354a:	d4ef      	bmi.n	800352c <__smakebuf_r+0x18>
 800354c:	f023 0303 	bic.w	r3, r3, #3
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	e7e3      	b.n	8003520 <__smakebuf_r+0xc>
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <__smakebuf_r+0x7c>)
 800355a:	62b3      	str	r3, [r6, #40]	; 0x28
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	6020      	str	r0, [r4, #0]
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	81a3      	strh	r3, [r4, #12]
 8003566:	9b00      	ldr	r3, [sp, #0]
 8003568:	6163      	str	r3, [r4, #20]
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	6120      	str	r0, [r4, #16]
 800356e:	b15b      	cbz	r3, 8003588 <__smakebuf_r+0x74>
 8003570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003574:	4630      	mov	r0, r6
 8003576:	f000 f98f 	bl	8003898 <_isatty_r>
 800357a:	b128      	cbz	r0, 8003588 <__smakebuf_r+0x74>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	89a0      	ldrh	r0, [r4, #12]
 800358a:	4305      	orrs	r5, r0
 800358c:	81a5      	strh	r5, [r4, #12]
 800358e:	e7cd      	b.n	800352c <__smakebuf_r+0x18>
 8003590:	08003325 	.word	0x08003325

08003594 <malloc>:
 8003594:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <malloc+0xc>)
 8003596:	4601      	mov	r1, r0
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	f000 b853 	b.w	8003644 <_malloc_r>
 800359e:	bf00      	nop
 80035a0:	20000014 	.word	0x20000014

080035a4 <_free_r>:
 80035a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d048      	beq.n	800363c <_free_r+0x98>
 80035aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035ae:	9001      	str	r0, [sp, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f1a1 0404 	sub.w	r4, r1, #4
 80035b6:	bfb8      	it	lt
 80035b8:	18e4      	addlt	r4, r4, r3
 80035ba:	f000 f98f 	bl	80038dc <__malloc_lock>
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <_free_r+0x9c>)
 80035c0:	9801      	ldr	r0, [sp, #4]
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	4615      	mov	r5, r2
 80035c6:	b933      	cbnz	r3, 80035d6 <_free_r+0x32>
 80035c8:	6063      	str	r3, [r4, #4]
 80035ca:	6014      	str	r4, [r2, #0]
 80035cc:	b003      	add	sp, #12
 80035ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035d2:	f000 b989 	b.w	80038e8 <__malloc_unlock>
 80035d6:	42a3      	cmp	r3, r4
 80035d8:	d90b      	bls.n	80035f2 <_free_r+0x4e>
 80035da:	6821      	ldr	r1, [r4, #0]
 80035dc:	1862      	adds	r2, r4, r1
 80035de:	4293      	cmp	r3, r2
 80035e0:	bf04      	itt	eq
 80035e2:	681a      	ldreq	r2, [r3, #0]
 80035e4:	685b      	ldreq	r3, [r3, #4]
 80035e6:	6063      	str	r3, [r4, #4]
 80035e8:	bf04      	itt	eq
 80035ea:	1852      	addeq	r2, r2, r1
 80035ec:	6022      	streq	r2, [r4, #0]
 80035ee:	602c      	str	r4, [r5, #0]
 80035f0:	e7ec      	b.n	80035cc <_free_r+0x28>
 80035f2:	461a      	mov	r2, r3
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	b10b      	cbz	r3, 80035fc <_free_r+0x58>
 80035f8:	42a3      	cmp	r3, r4
 80035fa:	d9fa      	bls.n	80035f2 <_free_r+0x4e>
 80035fc:	6811      	ldr	r1, [r2, #0]
 80035fe:	1855      	adds	r5, r2, r1
 8003600:	42a5      	cmp	r5, r4
 8003602:	d10b      	bne.n	800361c <_free_r+0x78>
 8003604:	6824      	ldr	r4, [r4, #0]
 8003606:	4421      	add	r1, r4
 8003608:	1854      	adds	r4, r2, r1
 800360a:	42a3      	cmp	r3, r4
 800360c:	6011      	str	r1, [r2, #0]
 800360e:	d1dd      	bne.n	80035cc <_free_r+0x28>
 8003610:	681c      	ldr	r4, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	6053      	str	r3, [r2, #4]
 8003616:	4421      	add	r1, r4
 8003618:	6011      	str	r1, [r2, #0]
 800361a:	e7d7      	b.n	80035cc <_free_r+0x28>
 800361c:	d902      	bls.n	8003624 <_free_r+0x80>
 800361e:	230c      	movs	r3, #12
 8003620:	6003      	str	r3, [r0, #0]
 8003622:	e7d3      	b.n	80035cc <_free_r+0x28>
 8003624:	6825      	ldr	r5, [r4, #0]
 8003626:	1961      	adds	r1, r4, r5
 8003628:	428b      	cmp	r3, r1
 800362a:	bf04      	itt	eq
 800362c:	6819      	ldreq	r1, [r3, #0]
 800362e:	685b      	ldreq	r3, [r3, #4]
 8003630:	6063      	str	r3, [r4, #4]
 8003632:	bf04      	itt	eq
 8003634:	1949      	addeq	r1, r1, r5
 8003636:	6021      	streq	r1, [r4, #0]
 8003638:	6054      	str	r4, [r2, #4]
 800363a:	e7c7      	b.n	80035cc <_free_r+0x28>
 800363c:	b003      	add	sp, #12
 800363e:	bd30      	pop	{r4, r5, pc}
 8003640:	200010bc 	.word	0x200010bc

08003644 <_malloc_r>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	1ccd      	adds	r5, r1, #3
 8003648:	f025 0503 	bic.w	r5, r5, #3
 800364c:	3508      	adds	r5, #8
 800364e:	2d0c      	cmp	r5, #12
 8003650:	bf38      	it	cc
 8003652:	250c      	movcc	r5, #12
 8003654:	2d00      	cmp	r5, #0
 8003656:	4606      	mov	r6, r0
 8003658:	db01      	blt.n	800365e <_malloc_r+0x1a>
 800365a:	42a9      	cmp	r1, r5
 800365c:	d903      	bls.n	8003666 <_malloc_r+0x22>
 800365e:	230c      	movs	r3, #12
 8003660:	6033      	str	r3, [r6, #0]
 8003662:	2000      	movs	r0, #0
 8003664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003666:	f000 f939 	bl	80038dc <__malloc_lock>
 800366a:	4921      	ldr	r1, [pc, #132]	; (80036f0 <_malloc_r+0xac>)
 800366c:	680a      	ldr	r2, [r1, #0]
 800366e:	4614      	mov	r4, r2
 8003670:	b99c      	cbnz	r4, 800369a <_malloc_r+0x56>
 8003672:	4f20      	ldr	r7, [pc, #128]	; (80036f4 <_malloc_r+0xb0>)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b923      	cbnz	r3, 8003682 <_malloc_r+0x3e>
 8003678:	4621      	mov	r1, r4
 800367a:	4630      	mov	r0, r6
 800367c:	f000 f884 	bl	8003788 <_sbrk_r>
 8003680:	6038      	str	r0, [r7, #0]
 8003682:	4629      	mov	r1, r5
 8003684:	4630      	mov	r0, r6
 8003686:	f000 f87f 	bl	8003788 <_sbrk_r>
 800368a:	1c43      	adds	r3, r0, #1
 800368c:	d123      	bne.n	80036d6 <_malloc_r+0x92>
 800368e:	230c      	movs	r3, #12
 8003690:	6033      	str	r3, [r6, #0]
 8003692:	4630      	mov	r0, r6
 8003694:	f000 f928 	bl	80038e8 <__malloc_unlock>
 8003698:	e7e3      	b.n	8003662 <_malloc_r+0x1e>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	1b5b      	subs	r3, r3, r5
 800369e:	d417      	bmi.n	80036d0 <_malloc_r+0x8c>
 80036a0:	2b0b      	cmp	r3, #11
 80036a2:	d903      	bls.n	80036ac <_malloc_r+0x68>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	441c      	add	r4, r3
 80036a8:	6025      	str	r5, [r4, #0]
 80036aa:	e004      	b.n	80036b6 <_malloc_r+0x72>
 80036ac:	6863      	ldr	r3, [r4, #4]
 80036ae:	42a2      	cmp	r2, r4
 80036b0:	bf0c      	ite	eq
 80036b2:	600b      	streq	r3, [r1, #0]
 80036b4:	6053      	strne	r3, [r2, #4]
 80036b6:	4630      	mov	r0, r6
 80036b8:	f000 f916 	bl	80038e8 <__malloc_unlock>
 80036bc:	f104 000b 	add.w	r0, r4, #11
 80036c0:	1d23      	adds	r3, r4, #4
 80036c2:	f020 0007 	bic.w	r0, r0, #7
 80036c6:	1ac2      	subs	r2, r0, r3
 80036c8:	d0cc      	beq.n	8003664 <_malloc_r+0x20>
 80036ca:	1a1b      	subs	r3, r3, r0
 80036cc:	50a3      	str	r3, [r4, r2]
 80036ce:	e7c9      	b.n	8003664 <_malloc_r+0x20>
 80036d0:	4622      	mov	r2, r4
 80036d2:	6864      	ldr	r4, [r4, #4]
 80036d4:	e7cc      	b.n	8003670 <_malloc_r+0x2c>
 80036d6:	1cc4      	adds	r4, r0, #3
 80036d8:	f024 0403 	bic.w	r4, r4, #3
 80036dc:	42a0      	cmp	r0, r4
 80036de:	d0e3      	beq.n	80036a8 <_malloc_r+0x64>
 80036e0:	1a21      	subs	r1, r4, r0
 80036e2:	4630      	mov	r0, r6
 80036e4:	f000 f850 	bl	8003788 <_sbrk_r>
 80036e8:	3001      	adds	r0, #1
 80036ea:	d1dd      	bne.n	80036a8 <_malloc_r+0x64>
 80036ec:	e7cf      	b.n	800368e <_malloc_r+0x4a>
 80036ee:	bf00      	nop
 80036f0:	200010bc 	.word	0x200010bc
 80036f4:	200010c0 	.word	0x200010c0

080036f8 <_putc_r>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	460d      	mov	r5, r1
 80036fc:	4614      	mov	r4, r2
 80036fe:	4606      	mov	r6, r0
 8003700:	b118      	cbz	r0, 800370a <_putc_r+0x12>
 8003702:	6983      	ldr	r3, [r0, #24]
 8003704:	b90b      	cbnz	r3, 800370a <_putc_r+0x12>
 8003706:	f7ff fe41 	bl	800338c <__sinit>
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <_putc_r+0x84>)
 800370c:	429c      	cmp	r4, r3
 800370e:	d124      	bne.n	800375a <_putc_r+0x62>
 8003710:	6874      	ldr	r4, [r6, #4]
 8003712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003714:	07d8      	lsls	r0, r3, #31
 8003716:	d405      	bmi.n	8003724 <_putc_r+0x2c>
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	0599      	lsls	r1, r3, #22
 800371c:	d402      	bmi.n	8003724 <_putc_r+0x2c>
 800371e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003720:	f7ff fed2 	bl	80034c8 <__retarget_lock_acquire_recursive>
 8003724:	68a3      	ldr	r3, [r4, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	60a3      	str	r3, [r4, #8]
 800372c:	da05      	bge.n	800373a <_putc_r+0x42>
 800372e:	69a2      	ldr	r2, [r4, #24]
 8003730:	4293      	cmp	r3, r2
 8003732:	db1c      	blt.n	800376e <_putc_r+0x76>
 8003734:	b2eb      	uxtb	r3, r5
 8003736:	2b0a      	cmp	r3, #10
 8003738:	d019      	beq.n	800376e <_putc_r+0x76>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	6022      	str	r2, [r4, #0]
 8003740:	701d      	strb	r5, [r3, #0]
 8003742:	b2ed      	uxtb	r5, r5
 8003744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003746:	07da      	lsls	r2, r3, #31
 8003748:	d405      	bmi.n	8003756 <_putc_r+0x5e>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	059b      	lsls	r3, r3, #22
 800374e:	d402      	bmi.n	8003756 <_putc_r+0x5e>
 8003750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003752:	f7ff feba 	bl	80034ca <__retarget_lock_release_recursive>
 8003756:	4628      	mov	r0, r5
 8003758:	bd70      	pop	{r4, r5, r6, pc}
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <_putc_r+0x88>)
 800375c:	429c      	cmp	r4, r3
 800375e:	d101      	bne.n	8003764 <_putc_r+0x6c>
 8003760:	68b4      	ldr	r4, [r6, #8]
 8003762:	e7d6      	b.n	8003712 <_putc_r+0x1a>
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <_putc_r+0x8c>)
 8003766:	429c      	cmp	r4, r3
 8003768:	bf08      	it	eq
 800376a:	68f4      	ldreq	r4, [r6, #12]
 800376c:	e7d1      	b.n	8003712 <_putc_r+0x1a>
 800376e:	4629      	mov	r1, r5
 8003770:	4622      	mov	r2, r4
 8003772:	4630      	mov	r0, r6
 8003774:	f7ff fc30 	bl	8002fd8 <__swbuf_r>
 8003778:	4605      	mov	r5, r0
 800377a:	e7e3      	b.n	8003744 <_putc_r+0x4c>
 800377c:	0800396c 	.word	0x0800396c
 8003780:	0800398c 	.word	0x0800398c
 8003784:	0800394c 	.word	0x0800394c

08003788 <_sbrk_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	4d06      	ldr	r5, [pc, #24]	; (80037a4 <_sbrk_r+0x1c>)
 800378c:	2300      	movs	r3, #0
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	f7fd fc12 	bl	8000fbc <_sbrk>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_sbrk_r+0x1a>
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_sbrk_r+0x1a>
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	200014d8 	.word	0x200014d8

080037a8 <__sread>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	460c      	mov	r4, r1
 80037ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b0:	f000 f8a0 	bl	80038f4 <_read_r>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	bfab      	itete	ge
 80037b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037ba:	89a3      	ldrhlt	r3, [r4, #12]
 80037bc:	181b      	addge	r3, r3, r0
 80037be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037c2:	bfac      	ite	ge
 80037c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037c6:	81a3      	strhlt	r3, [r4, #12]
 80037c8:	bd10      	pop	{r4, pc}

080037ca <__swrite>:
 80037ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ce:	461f      	mov	r7, r3
 80037d0:	898b      	ldrh	r3, [r1, #12]
 80037d2:	05db      	lsls	r3, r3, #23
 80037d4:	4605      	mov	r5, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	4616      	mov	r6, r2
 80037da:	d505      	bpl.n	80037e8 <__swrite+0x1e>
 80037dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e0:	2302      	movs	r3, #2
 80037e2:	2200      	movs	r2, #0
 80037e4:	f000 f868 	bl	80038b8 <_lseek_r>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	4632      	mov	r2, r6
 80037f6:	463b      	mov	r3, r7
 80037f8:	4628      	mov	r0, r5
 80037fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037fe:	f000 b817 	b.w	8003830 <_write_r>

08003802 <__sseek>:
 8003802:	b510      	push	{r4, lr}
 8003804:	460c      	mov	r4, r1
 8003806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380a:	f000 f855 	bl	80038b8 <_lseek_r>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	bf15      	itete	ne
 8003814:	6560      	strne	r0, [r4, #84]	; 0x54
 8003816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800381a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800381e:	81a3      	strheq	r3, [r4, #12]
 8003820:	bf18      	it	ne
 8003822:	81a3      	strhne	r3, [r4, #12]
 8003824:	bd10      	pop	{r4, pc}

08003826 <__sclose>:
 8003826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382a:	f000 b813 	b.w	8003854 <_close_r>
	...

08003830 <_write_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d07      	ldr	r5, [pc, #28]	; (8003850 <_write_r+0x20>)
 8003834:	4604      	mov	r4, r0
 8003836:	4608      	mov	r0, r1
 8003838:	4611      	mov	r1, r2
 800383a:	2200      	movs	r2, #0
 800383c:	602a      	str	r2, [r5, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	f7fd fcba 	bl	80011b8 <_write>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_write_r+0x1e>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_write_r+0x1e>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	200014d8 	.word	0x200014d8

08003854 <_close_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4d06      	ldr	r5, [pc, #24]	; (8003870 <_close_r+0x1c>)
 8003858:	2300      	movs	r3, #0
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	602b      	str	r3, [r5, #0]
 8003860:	f7fd fb78 	bl	8000f54 <_close>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d102      	bne.n	800386e <_close_r+0x1a>
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	b103      	cbz	r3, 800386e <_close_r+0x1a>
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	200014d8 	.word	0x200014d8

08003874 <_fstat_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4d07      	ldr	r5, [pc, #28]	; (8003894 <_fstat_r+0x20>)
 8003878:	2300      	movs	r3, #0
 800387a:	4604      	mov	r4, r0
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	f7fd fb73 	bl	8000f6c <_fstat>
 8003886:	1c43      	adds	r3, r0, #1
 8003888:	d102      	bne.n	8003890 <_fstat_r+0x1c>
 800388a:	682b      	ldr	r3, [r5, #0]
 800388c:	b103      	cbz	r3, 8003890 <_fstat_r+0x1c>
 800388e:	6023      	str	r3, [r4, #0]
 8003890:	bd38      	pop	{r3, r4, r5, pc}
 8003892:	bf00      	nop
 8003894:	200014d8 	.word	0x200014d8

08003898 <_isatty_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4d06      	ldr	r5, [pc, #24]	; (80038b4 <_isatty_r+0x1c>)
 800389c:	2300      	movs	r3, #0
 800389e:	4604      	mov	r4, r0
 80038a0:	4608      	mov	r0, r1
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	f7fd fb72 	bl	8000f8c <_isatty>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	d102      	bne.n	80038b2 <_isatty_r+0x1a>
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	b103      	cbz	r3, 80038b2 <_isatty_r+0x1a>
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
 80038b4:	200014d8 	.word	0x200014d8

080038b8 <_lseek_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4d07      	ldr	r5, [pc, #28]	; (80038d8 <_lseek_r+0x20>)
 80038bc:	4604      	mov	r4, r0
 80038be:	4608      	mov	r0, r1
 80038c0:	4611      	mov	r1, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	602a      	str	r2, [r5, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	f7fd fb6b 	bl	8000fa2 <_lseek>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d102      	bne.n	80038d6 <_lseek_r+0x1e>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	b103      	cbz	r3, 80038d6 <_lseek_r+0x1e>
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	bd38      	pop	{r3, r4, r5, pc}
 80038d8:	200014d8 	.word	0x200014d8

080038dc <__malloc_lock>:
 80038dc:	4801      	ldr	r0, [pc, #4]	; (80038e4 <__malloc_lock+0x8>)
 80038de:	f7ff bdf3 	b.w	80034c8 <__retarget_lock_acquire_recursive>
 80038e2:	bf00      	nop
 80038e4:	200014d0 	.word	0x200014d0

080038e8 <__malloc_unlock>:
 80038e8:	4801      	ldr	r0, [pc, #4]	; (80038f0 <__malloc_unlock+0x8>)
 80038ea:	f7ff bdee 	b.w	80034ca <__retarget_lock_release_recursive>
 80038ee:	bf00      	nop
 80038f0:	200014d0 	.word	0x200014d0

080038f4 <_read_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	4d07      	ldr	r5, [pc, #28]	; (8003914 <_read_r+0x20>)
 80038f8:	4604      	mov	r4, r0
 80038fa:	4608      	mov	r0, r1
 80038fc:	4611      	mov	r1, r2
 80038fe:	2200      	movs	r2, #0
 8003900:	602a      	str	r2, [r5, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	f7fd fc26 	bl	8001154 <_read>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	d102      	bne.n	8003912 <_read_r+0x1e>
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	b103      	cbz	r3, 8003912 <_read_r+0x1e>
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	200014d8 	.word	0x200014d8

08003918 <_init>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr

08003924 <_fini>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	bf00      	nop
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr
