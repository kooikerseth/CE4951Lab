
CE4951Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f30  08003f30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f38  08003f38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000070  08003fb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08003fb0  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d14f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e20  00000000  00000000  0002d1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fc7  00000000  00000000  00030508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca2b  00000000  00000000  000534cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0e9a  00000000  00000000  0005fefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130d94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003534  00000000  00000000  00130de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e08 	.word	0x08003e08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003e08 	.word	0x08003e08

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a24      	ldr	r2, [pc, #144]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d139      	bne.n	800063e <HAL_TIM_PeriodElapsedCallback+0x86>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	4822      	ldr	r0, [pc, #136]	; (800065c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005d2:	f001 f9b9 	bl	8001948 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 80005d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80005dc:	f001 f99c 	bl	8001918 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d115      	bne.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x5a>
			currentState = COLLISION;
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f2:	481a      	ldr	r0, [pc, #104]	; (800065c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005f4:	f001 f9a8 	bl	8001948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fe:	4817      	ldr	r0, [pc, #92]	; (800065c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000600:	f001 f9a2 	bl	8001948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060a:	4814      	ldr	r0, [pc, #80]	; (800065c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800060c:	f001 f99c 	bl	8001948 <HAL_GPIO_WritePin>
		}
	}
	else if (htim->Instance == TIM8){
		wait_trans = 0;
	}
}
 8000610:	e01d      	b.n	800064e <HAL_TIM_PeriodElapsedCallback+0x96>
			currentState = IDLE;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	480f      	ldr	r0, [pc, #60]	; (800065c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000620:	f001 f992 	bl	8001948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800062c:	f001 f98c 	bl	8001948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000636:	4809      	ldr	r0, [pc, #36]	; (800065c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000638:	f001 f986 	bl	8001948 <HAL_GPIO_WritePin>
}
 800063c:	e007      	b.n	800064e <HAL_TIM_PeriodElapsedCallback+0x96>
	else if (htim->Instance == TIM8){
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d102      	bne.n	800064e <HAL_TIM_PeriodElapsedCallback+0x96>
		wait_trans = 0;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40010000 	.word	0x40010000
 800065c:	40020400 	.word	0x40020400
 8000660:	40020800 	.word	0x40020800
 8000664:	200002e0 	.word	0x200002e0
 8000668:	40010400 	.word	0x40010400
 800066c:	20000430 	.word	0x20000430

08000670 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9){
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000680:	d117      	bne.n	80006b2 <HAL_GPIO_EXTI_Callback+0x42>
		currentState = BUSY;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_GPIO_EXTI_Callback+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000690:	f001 f95a 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x50>)
 800069c:	f001 f954 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x50>)
 80006a8:	f001 f94e 	bl	8001948 <HAL_GPIO_WritePin>
		TIM1->CNT = 0;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200002e0 	.word	0x200002e0
 80006c0:	40020400 	.word	0x40020400
 80006c4:	40010000 	.word	0x40010000

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006cc:	b09e      	sub	sp, #120	; 0x78
 80006ce:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f000 fe0a 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 fa50 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f000 fb5a 	bl	8000d90 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006dc:	f000 fab8 	bl	8000c50 <MX_TIM1_Init>
  MX_TIM8_Init();
 80006e0:	f000 fb06 	bl	8000cf0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006e4:	48ae      	ldr	r0, [pc, #696]	; (80009a0 <main+0x2d8>)
 80006e6:	f001 fe91 	bl	800240c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80006ea:	48ae      	ldr	r0, [pc, #696]	; (80009a4 <main+0x2dc>)
 80006ec:	f001 fe8e 	bl	800240c <HAL_TIM_Base_Start_IT>

  init_usart2(57600,F_CPU);
 80006f0:	49ad      	ldr	r1, [pc, #692]	; (80009a8 <main+0x2e0>)
 80006f2:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 80006f6:	f000 fd75 	bl	80011e4 <init_usart2>
  printf("Hello\n");
 80006fa:	48ac      	ldr	r0, [pc, #688]	; (80009ac <main+0x2e4>)
 80006fc:	f002 fb70 	bl	8002de0 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
LOOP_START:
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	48aa      	ldr	r0, [pc, #680]	; (80009b0 <main+0x2e8>)
 8000708:	f001 f91e 	bl	8001948 <HAL_GPIO_WritePin>

//	  int readCount = scanf("%s",buffer);
	  int readCount = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
	  buffer[0] = 0xFF;
 8000710:	4ba8      	ldr	r3, [pc, #672]	; (80009b4 <main+0x2ec>)
 8000712:	22ff      	movs	r2, #255	; 0xff
 8000714:	701a      	strb	r2, [r3, #0]
	  buffer[1] = 0x00;
 8000716:	4ba7      	ldr	r3, [pc, #668]	; (80009b4 <main+0x2ec>)
 8000718:	2200      	movs	r2, #0
 800071a:	705a      	strb	r2, [r3, #1]
	  int length = strlen(buffer);
 800071c:	48a5      	ldr	r0, [pc, #660]	; (80009b4 <main+0x2ec>)
 800071e:	f7ff fd77 	bl	8000210 <strlen>
 8000722:	4603      	mov	r3, r0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24

	  //send data
	  if (readCount){
 8000726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0e9      	beq.n	8000700 <main+0x38>
		  printf("read count: %d, buffer: %s\n", length, buffer);
 800072c:	4aa1      	ldr	r2, [pc, #644]	; (80009b4 <main+0x2ec>)
 800072e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000730:	48a1      	ldr	r0, [pc, #644]	; (80009b8 <main+0x2f0>)
 8000732:	f002 facf 	bl	8002cd4 <iprintf>
		  for (int i = 0; i < length;i++){
 8000736:	2300      	movs	r3, #0
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800073a:	e0a9      	b.n	8000890 <main+0x1c8>
			  printf("Buffer:"BYTE_TO_BINARY_PATTERN "\n",BYTE_TO_BINARY(*(buffer+i)));
 800073c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800073e:	4a9d      	ldr	r2, [pc, #628]	; (80009b4 <main+0x2ec>)
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b25b      	sxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	da01      	bge.n	800074e <main+0x86>
 800074a:	2531      	movs	r5, #49	; 0x31
 800074c:	e000      	b.n	8000750 <main+0x88>
 800074e:	2530      	movs	r5, #48	; 0x30
 8000750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000752:	4a98      	ldr	r2, [pc, #608]	; (80009b4 <main+0x2ec>)
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <main+0x9c>
 8000760:	2631      	movs	r6, #49	; 0x31
 8000762:	e000      	b.n	8000766 <main+0x9e>
 8000764:	2630      	movs	r6, #48	; 0x30
 8000766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000768:	4a92      	ldr	r2, [pc, #584]	; (80009b4 <main+0x2ec>)
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <main+0xb4>
 8000776:	f04f 0c31 	mov.w	ip, #49	; 0x31
 800077a:	e001      	b.n	8000780 <main+0xb8>
 800077c:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8000780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000782:	4a8c      	ldr	r2, [pc, #560]	; (80009b4 <main+0x2ec>)
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <main+0xce>
 8000790:	2331      	movs	r3, #49	; 0x31
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	e001      	b.n	800079a <main+0xd2>
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	61fb      	str	r3, [r7, #28]
 800079a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800079c:	4985      	ldr	r1, [pc, #532]	; (80009b4 <main+0x2ec>)
 800079e:	440a      	add	r2, r1
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	f002 0208 	and.w	r2, r2, #8
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d001      	beq.n	80007ae <main+0xe6>
 80007aa:	2231      	movs	r2, #49	; 0x31
 80007ac:	e000      	b.n	80007b0 <main+0xe8>
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80007b2:	4880      	ldr	r0, [pc, #512]	; (80009b4 <main+0x2ec>)
 80007b4:	4401      	add	r1, r0
 80007b6:	7809      	ldrb	r1, [r1, #0]
 80007b8:	f001 0104 	and.w	r1, r1, #4
 80007bc:	2900      	cmp	r1, #0
 80007be:	d001      	beq.n	80007c4 <main+0xfc>
 80007c0:	2131      	movs	r1, #49	; 0x31
 80007c2:	e000      	b.n	80007c6 <main+0xfe>
 80007c4:	2130      	movs	r1, #48	; 0x30
 80007c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80007c8:	4c7a      	ldr	r4, [pc, #488]	; (80009b4 <main+0x2ec>)
 80007ca:	4420      	add	r0, r4
 80007cc:	7800      	ldrb	r0, [r0, #0]
 80007ce:	f000 0002 	and.w	r0, r0, #2
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d001      	beq.n	80007da <main+0x112>
 80007d6:	2031      	movs	r0, #49	; 0x31
 80007d8:	e000      	b.n	80007dc <main+0x114>
 80007da:	2030      	movs	r0, #48	; 0x30
 80007dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007de:	4c75      	ldr	r4, [pc, #468]	; (80009b4 <main+0x2ec>)
 80007e0:	4423      	add	r3, r4
 80007e2:	461c      	mov	r4, r3
 80007e4:	7824      	ldrb	r4, [r4, #0]
 80007e6:	f004 0401 	and.w	r4, r4, #1
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d001      	beq.n	80007f2 <main+0x12a>
 80007ee:	2431      	movs	r4, #49	; 0x31
 80007f0:	e000      	b.n	80007f4 <main+0x12c>
 80007f2:	2430      	movs	r4, #48	; 0x30
 80007f4:	9404      	str	r4, [sp, #16]
 80007f6:	9003      	str	r0, [sp, #12]
 80007f8:	9102      	str	r1, [sp, #8]
 80007fa:	9201      	str	r2, [sp, #4]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4663      	mov	r3, ip
 8000802:	4632      	mov	r2, r6
 8000804:	4629      	mov	r1, r5
 8000806:	486d      	ldr	r0, [pc, #436]	; (80009bc <main+0x2f4>)
 8000808:	f002 fa64 	bl	8002cd4 <iprintf>
			  output[i] = 0;
 800080c:	4a6c      	ldr	r2, [pc, #432]	; (80009c0 <main+0x2f8>)
 800080e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000810:	2100      	movs	r1, #0
 8000812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for (int j = 0; j < 8; j++){
 8000816:	2300      	movs	r3, #0
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
 800081a:	e033      	b.n	8000884 <main+0x1bc>
				  if (buffer[i] & 0b1<<j)
 800081c:	4a65      	ldr	r2, [pc, #404]	; (80009b4 <main+0x2ec>)
 800081e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000828:	fa42 f303 	asr.w	r3, r2, r3
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d012      	beq.n	800085a <main+0x192>
					  output[i] |= 0b01<<((j*2));
 8000834:	4a62      	ldr	r2, [pc, #392]	; (80009c0 <main+0x2f8>)
 8000836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800083c:	b21a      	sxth	r2, r3
 800083e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	2101      	movs	r1, #1
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b299      	uxth	r1, r3
 8000850:	4a5b      	ldr	r2, [pc, #364]	; (80009c0 <main+0x2f8>)
 8000852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000854:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000858:	e011      	b.n	800087e <main+0x1b6>
				  else
					  output[i] |= 0b10<<((j*2));
 800085a:	4a59      	ldr	r2, [pc, #356]	; (80009c0 <main+0x2f8>)
 800085c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800085e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000862:	b21a      	sxth	r2, r3
 8000864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2102      	movs	r1, #2
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21b      	sxth	r3, r3
 8000874:	b299      	uxth	r1, r3
 8000876:	4a52      	ldr	r2, [pc, #328]	; (80009c0 <main+0x2f8>)
 8000878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800087a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for (int j = 0; j < 8; j++){
 800087e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000880:	3301      	adds	r3, #1
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
 8000884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000886:	2b07      	cmp	r3, #7
 8000888:	ddc8      	ble.n	800081c <main+0x154>
		  for (int i = 0; i < length;i++){
 800088a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800088c:	3301      	adds	r3, #1
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	429a      	cmp	r2, r3
 8000896:	f6ff af51 	blt.w	800073c <main+0x74>

			  }
		  }
		  for (int i = 0; i < length;i++){
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
 800089e:	e103      	b.n	8000aa8 <main+0x3e0>
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 80008a0:	4a47      	ldr	r2, [pc, #284]	; (80009c0 <main+0x2f8>)
 80008a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <main+0x1f2>
 80008b4:	f04f 0c31 	mov.w	ip, #49	; 0x31
 80008b8:	e001      	b.n	80008be <main+0x1f6>
 80008ba:	f04f 0c30 	mov.w	ip, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 80008be:	4a40      	ldr	r2, [pc, #256]	; (80009c0 <main+0x2f8>)
 80008c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <main+0x210>
 80008d2:	f04f 0e31 	mov.w	lr, #49	; 0x31
 80008d6:	e001      	b.n	80008dc <main+0x214>
 80008d8:	f04f 0e30 	mov.w	lr, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 80008dc:	4a38      	ldr	r2, [pc, #224]	; (80009c0 <main+0x2f8>)
 80008de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	f003 0320 	and.w	r3, r3, #32
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <main+0x22e>
 80008f0:	f04f 0831 	mov.w	r8, #49	; 0x31
 80008f4:	e001      	b.n	80008fa <main+0x232>
 80008f6:	f04f 0830 	mov.w	r8, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 80008fa:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <main+0x2f8>)
 80008fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	b29b      	uxth	r3, r3
 8000906:	f003 0310 	and.w	r3, r3, #16
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <main+0x24a>
 800090e:	2531      	movs	r5, #49	; 0x31
 8000910:	e000      	b.n	8000914 <main+0x24c>
 8000912:	2530      	movs	r5, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000914:	4a2a      	ldr	r2, [pc, #168]	; (80009c0 <main+0x2f8>)
 8000916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	b29b      	uxth	r3, r3
 8000920:	f003 0308 	and.w	r3, r3, #8
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <main+0x264>
 8000928:	2631      	movs	r6, #49	; 0x31
 800092a:	e000      	b.n	800092e <main+0x266>
 800092c:	2630      	movs	r6, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 800092e:	4a24      	ldr	r2, [pc, #144]	; (80009c0 <main+0x2f8>)
 8000930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	f003 0304 	and.w	r3, r3, #4
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <main+0x280>
 8000942:	2331      	movs	r3, #49	; 0x31
 8000944:	61fb      	str	r3, [r7, #28]
 8000946:	e001      	b.n	800094c <main+0x284>
 8000948:	2330      	movs	r3, #48	; 0x30
 800094a:	61fb      	str	r3, [r7, #28]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 800094c:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <main+0x2f8>)
 800094e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29b      	uxth	r3, r3
 8000958:	f003 0302 	and.w	r3, r3, #2
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <main+0x29e>
 8000960:	2331      	movs	r3, #49	; 0x31
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	e001      	b.n	800096a <main+0x2a2>
 8000966:	2330      	movs	r3, #48	; 0x30
 8000968:	61bb      	str	r3, [r7, #24]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <main+0x2f8>)
 800096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b29b      	uxth	r3, r3
 8000976:	f003 0301 	and.w	r3, r3, #1
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <main+0x2bc>
 800097e:	2331      	movs	r3, #49	; 0x31
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e001      	b.n	8000988 <main+0x2c0>
 8000984:	2330      	movs	r3, #48	; 0x30
 8000986:	617b      	str	r3, [r7, #20]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <main+0x2f8>)
 800098a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000990:	f003 0380 	and.w	r3, r3, #128	; 0x80
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000994:	2b00      	cmp	r3, #0
 8000996:	d015      	beq.n	80009c4 <main+0x2fc>
 8000998:	2331      	movs	r3, #49	; 0x31
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	e014      	b.n	80009c8 <main+0x300>
 800099e:	bf00      	nop
 80009a0:	200003e4 	.word	0x200003e4
 80009a4:	20000098 	.word	0x20000098
 80009a8:	0280de80 	.word	0x0280de80
 80009ac:	08003e20 	.word	0x08003e20
 80009b0:	40020800 	.word	0x40020800
 80009b4:	200002e4 	.word	0x200002e4
 80009b8:	08003e28 	.word	0x08003e28
 80009bc:	08003e44 	.word	0x08003e44
 80009c0:	200000e0 	.word	0x200000e0
 80009c4:	2330      	movs	r3, #48	; 0x30
 80009c6:	613b      	str	r3, [r7, #16]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 80009c8:	4a64      	ldr	r2, [pc, #400]	; (8000b5c <main+0x494>)
 80009ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <main+0x316>
 80009d8:	2331      	movs	r3, #49	; 0x31
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e001      	b.n	80009e2 <main+0x31a>
 80009de:	2330      	movs	r3, #48	; 0x30
 80009e0:	60fb      	str	r3, [r7, #12]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 80009e2:	4a5e      	ldr	r2, [pc, #376]	; (8000b5c <main+0x494>)
 80009e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ea:	f003 0320 	and.w	r3, r3, #32
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <main+0x330>
 80009f2:	2331      	movs	r3, #49	; 0x31
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	e001      	b.n	80009fc <main+0x334>
 80009f8:	2330      	movs	r3, #48	; 0x30
 80009fa:	60bb      	str	r3, [r7, #8]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 80009fc:	4a57      	ldr	r2, [pc, #348]	; (8000b5c <main+0x494>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a04:	f003 0310 	and.w	r3, r3, #16
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <main+0x34a>
 8000a0c:	2331      	movs	r3, #49	; 0x31
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	e001      	b.n	8000a16 <main+0x34e>
 8000a12:	2330      	movs	r3, #48	; 0x30
 8000a14:	607b      	str	r3, [r7, #4]
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000a16:	4a51      	ldr	r2, [pc, #324]	; (8000b5c <main+0x494>)
 8000a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1e:	f003 0308 	and.w	r3, r3, #8
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <main+0x362>
 8000a26:	2431      	movs	r4, #49	; 0x31
 8000a28:	e000      	b.n	8000a2c <main+0x364>
 8000a2a:	2430      	movs	r4, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000a2c:	4a4b      	ldr	r2, [pc, #300]	; (8000b5c <main+0x494>)
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a34:	f003 0304 	and.w	r3, r3, #4
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <main+0x378>
 8000a3c:	2031      	movs	r0, #49	; 0x31
 8000a3e:	e000      	b.n	8000a42 <main+0x37a>
 8000a40:	2030      	movs	r0, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000a42:	4a46      	ldr	r2, [pc, #280]	; (8000b5c <main+0x494>)
 8000a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4a:	f003 0302 	and.w	r3, r3, #2
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <main+0x38e>
 8000a52:	2131      	movs	r1, #49	; 0x31
 8000a54:	e000      	b.n	8000a58 <main+0x390>
 8000a56:	2130      	movs	r1, #48	; 0x30
						  BYTE_TO_BINARY(output[i]>>8),BYTE_TO_BINARY(output[i]));
 8000a58:	4a40      	ldr	r2, [pc, #256]	; (8000b5c <main+0x494>)
 8000a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a60:	f003 0301 	and.w	r3, r3, #1
				  printf("Man:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <main+0x3a4>
 8000a68:	2331      	movs	r3, #49	; 0x31
 8000a6a:	e000      	b.n	8000a6e <main+0x3a6>
 8000a6c:	2330      	movs	r3, #48	; 0x30
 8000a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8000a70:	910b      	str	r1, [sp, #44]	; 0x2c
 8000a72:	900a      	str	r0, [sp, #40]	; 0x28
 8000a74:	9409      	str	r4, [sp, #36]	; 0x24
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	9308      	str	r3, [sp, #32]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	9307      	str	r3, [sp, #28]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	9306      	str	r3, [sp, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	9305      	str	r3, [sp, #20]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	9304      	str	r3, [sp, #16]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	9303      	str	r3, [sp, #12]
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	9601      	str	r6, [sp, #4]
 8000a94:	9500      	str	r5, [sp, #0]
 8000a96:	4643      	mov	r3, r8
 8000a98:	4672      	mov	r2, lr
 8000a9a:	4661      	mov	r1, ip
 8000a9c:	4830      	ldr	r0, [pc, #192]	; (8000b60 <main+0x498>)
 8000a9e:	f002 f919 	bl	8002cd4 <iprintf>
		  for (int i = 0; i < length;i++){
 8000aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8000aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	429a      	cmp	r2, r3
 8000aae:	f6ff aef7 	blt.w	80008a0 <main+0x1d8>
		  }
		  while (currentState == COLLISION || currentState == BUSY);
 8000ab2:	bf00      	nop
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <main+0x49c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d0fb      	beq.n	8000ab4 <main+0x3ec>
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <main+0x49c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f7      	beq.n	8000ab4 <main+0x3ec>
		  currentState = BUSY;
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <main+0x49c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad0:	4825      	ldr	r0, [pc, #148]	; (8000b68 <main+0x4a0>)
 8000ad2:	f000 ff39 	bl	8001948 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000adc:	4822      	ldr	r0, [pc, #136]	; (8000b68 <main+0x4a0>)
 8000ade:	f000 ff33 	bl	8001948 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae8:	481f      	ldr	r0, [pc, #124]	; (8000b68 <main+0x4a0>)
 8000aea:	f000 ff2d 	bl	8001948 <HAL_GPIO_WritePin>
			  for (int i = 0; i < length;i++){
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
 8000af2:	e02d      	b.n	8000b50 <main+0x488>
				  for (int j = 15; j >= 0; j--){
 8000af4:	230f      	movs	r3, #15
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af8:	e024      	b.n	8000b44 <main+0x47c>
					  if (currentState == COLLISION)
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <main+0x49c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d100      	bne.n	8000b04 <main+0x43c>
						  goto LOOP_START;
 8000b02:	e5fd      	b.n	8000700 <main+0x38>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, (output[i] & 1<<j)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <main+0x494>)
 8000b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	fa42 f303 	asr.w	r3, r2, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	4812      	ldr	r0, [pc, #72]	; (8000b6c <main+0x4a4>)
 8000b24:	f000 ff10 	bl	8001948 <HAL_GPIO_WritePin>
					  TIM1->CNT = 0;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <main+0x4a8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
					  DELAY_500MS
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <main+0x4ac>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	bf00      	nop
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <main+0x4ac>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d0fb      	beq.n	8000b36 <main+0x46e>
				  for (int j = 15; j >= 0; j--){
 8000b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b40:	3b01      	subs	r3, #1
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	dad7      	bge.n	8000afa <main+0x432>
			  for (int i = 0; i < length;i++){
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbcd      	blt.n	8000af4 <main+0x42c>
  {
 8000b58:	e5d2      	b.n	8000700 <main+0x38>
 8000b5a:	bf00      	nop
 8000b5c:	200000e0 	.word	0x200000e0
 8000b60:	08003e60 	.word	0x08003e60
 8000b64:	200002e0 	.word	0x200002e0
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40010000 	.word	0x40010000
 8000b74:	20000430 	.word	0x20000430

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	; 0x50
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2234      	movs	r2, #52	; 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 f89c 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <SystemClock_Config+0xd0>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <SystemClock_Config+0xd0>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <SystemClock_Config+0xd0>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <SystemClock_Config+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <SystemClock_Config+0xd4>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <SystemClock_Config+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be8:	2308      	movs	r3, #8
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bec:	23a8      	movs	r3, #168	; 0xa8
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 f915 	bl	8001e30 <HAL_RCC_OscConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c0c:	f000 f932 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c10:	230f      	movs	r3, #15
 8000c12:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2302      	movs	r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 febc 	bl	80019ac <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c3a:	f000 f91b 	bl	8000e74 <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3750      	adds	r7, #80	; 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <MX_TIM1_Init+0x9c>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 153;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000c74:	2299      	movs	r2, #153	; 0x99
 8000c76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1099;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000c80:	f240 424b 	movw	r2, #1099	; 0x44b
 8000c84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000c9a:	f001 fb67 	bl	800236c <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ca4:	f000 f8e6 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000cb6:	f001 fd21 	bl	80026fc <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cc0:	f000 f8d8 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_TIM1_Init+0x98>)
 8000cd2:	f001 ff3d 	bl	8002b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cdc:	f000 f8ca 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200003e4 	.word	0x200003e4
 8000cec:	40010000 	.word	0x40010000

08000cf0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <MX_TIM8_Init+0x9c>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 153;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d14:	2299      	movs	r2, #153	; 0x99
 8000d16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 553;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d20:	f240 2229 	movw	r2, #553	; 0x229
 8000d24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d3a:	f001 fb17 	bl	800236c <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000d44:	f000 f896 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d56:	f001 fcd1 	bl	80026fc <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000d60:	f000 f888 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_TIM8_Init+0x98>)
 8000d72:	f001 feed 	bl	8002b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000d7c:	f000 f87a 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000098 	.word	0x20000098
 8000d8c:	40010400 	.word	0x40010400

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000de4:	4821      	ldr	r0, [pc, #132]	; (8000e6c <MX_GPIO_Init+0xdc>)
 8000de6:	f000 fdaf 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df0:	481f      	ldr	r0, [pc, #124]	; (8000e70 <MX_GPIO_Init+0xe0>)
 8000df2:	f000 fda9 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000df6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4817      	ldr	r0, [pc, #92]	; (8000e6c <MX_GPIO_Init+0xdc>)
 8000e10:	f000 fbee 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4810      	ldr	r0, [pc, #64]	; (8000e70 <MX_GPIO_Init+0xe0>)
 8000e2e:	f000 fbdf 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e38:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4619      	mov	r1, r3
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <MX_GPIO_Init+0xe0>)
 8000e4a:	f000 fbd1 	bl	80015f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2017      	movs	r0, #23
 8000e54:	f000 fb95 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e58:	2017      	movs	r0, #23
 8000e5a:	f000 fbae 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40020800 	.word	0x40020800

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <HAL_TIM_Base_MspInit+0x80>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d116      	bne.n	8000f10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2019      	movs	r0, #25
 8000f04:	f000 fb3d 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f08:	2019      	movs	r0, #25
 8000f0a:	f000 fb56 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f0e:	e01a      	b.n	8000f46 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM8)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_TIM_Base_MspInit+0x88>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d115      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x84>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	202c      	movs	r0, #44	; 0x2c
 8000f3c:	f000 fb21 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000f40:	202c      	movs	r0, #44	; 0x2c
 8000f42:	f000 fb3a 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010000 	.word	0x40010000
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40010400 	.word	0x40010400

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f9f0 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000fb4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fb8:	f000 fce0 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fc6:	f001 fa91 	bl	80024ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200003e4 	.word	0x200003e4

08000fd4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000fda:	f001 fa87 	bl	80024ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000098 	.word	0x20000098

08000fe8 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001010:	605a      	str	r2, [r3, #4]
	return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_isatty>:

int _isatty(int file)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001036:	b480      	push	{r7}
 8001038:	b085      	sub	sp, #20
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	return 0;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f001 fdf6 	bl	8002c70 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20020000 	.word	0x20020000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	2000008c 	.word	0x2000008c
 80010b8:	20000448 	.word	0x20000448

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e012      	b.n	800111c <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 80010fc:	f000 f836 	bl	800116c <usart2_getch>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b0a      	cmp	r3, #10
 800110e:	d00a      	beq.n	8001126 <_read+0x46>
		ptr++;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3301      	adds	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbe8      	blt.n	80010f6 <_read+0x16>
 8001124:	e000      	b.n	8001128 <_read+0x48>
		if(*ptr == '\n') break;
 8001126:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 8001128:	693b      	ldr	r3, [r7, #16]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_write>:

int _write(int file, char *ptr, int len)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e009      	b.n	8001158 <_write+0x26>
	{
		usart2_putch(*ptr++);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f82f 	bl	80011b0 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbf1      	blt.n	8001144 <_write+0x12>
	}
	return len;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <usart2_getch>:



char usart2_getch(){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 8001172:	bf00      	nop
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <usart2_getch+0x3c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	2b20      	cmp	r3, #32
 800117e:	d1f9      	bne.n	8001174 <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <usart2_getch+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f811 	bl	80011b0 <usart2_putch>

	if (c == '\r'){  // If character is CR
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b0d      	cmp	r3, #13
 8001192:	d104      	bne.n	800119e <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 8001194:	200a      	movs	r0, #10
 8001196:	f000 f80b 	bl	80011b0 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 800119a:	230a      	movs	r3, #10
 800119c:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 800119e:	79fb      	ldrb	r3, [r7, #7]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40004400 	.word	0x40004400
 80011ac:	40004404 	.word	0x40004404

080011b0 <usart2_putch>:

void usart2_putch(char c){
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 80011ba:	bf00      	nop
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <usart2_putch+0x2c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c4:	2b80      	cmp	r3, #128	; 0x80
 80011c6:	d1f9      	bne.n	80011bc <usart2_putch+0xc>
	*(USART_DR) = c;
 80011c8:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <usart2_putch+0x30>)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	6013      	str	r3, [r2, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40004400 	.word	0x40004400
 80011e0:	40004404 	.word	0x40004404

080011e4 <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	// Enable clocks for GPIOA and USART2
	*(RCC_AHB1ENR) |= (1<<GPIOAEN);
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <init_usart2+0x8c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <init_usart2+0x8c>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6013      	str	r3, [r2, #0]
	*(RCC_APB1ENR) |= (1<<USART2EN);
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <init_usart2+0x90>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <init_usart2+0x90>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	6013      	str	r3, [r2, #0]

	// Function 7 of PORTA pins is USART
	*(GPIOA_AFRL) &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <init_usart2+0x94>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <init_usart2+0x94>)
 800120c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001210:	6013      	str	r3, [r2, #0]
	*(GPIOA_AFRL) |= (0b01110111<<8);  // Choose function 7 for both PA3 and PA2
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <init_usart2+0x94>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <init_usart2+0x94>)
 8001218:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800121c:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) &= (0xFFFFFF0F);  // Clear mode bits for PA3 and PA2
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <init_usart2+0x98>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <init_usart2+0x98>)
 8001224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001228:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) |= (0b1010<<4);  // Both PA3 and PA2 in alt function mode
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <init_usart2+0x98>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <init_usart2+0x98>)
 8001230:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001234:	6013      	str	r3, [r2, #0]
	//USART2_init();  //8n1 no flow control
	// over8 = 0..oversample by 16
	// M = 0..1 start bit, data size is 8, 1 stop bit
	// PCE= 0..Parity check not enabled
	// no interrupts... using polling
	*(USART_CR1) = (1<<UE)|(1<<TE)|(1<<RE); // Enable UART, Tx and Rx
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <init_usart2+0x9c>)
 8001238:	f242 020c 	movw	r2, #8204	; 0x200c
 800123c:	601a      	str	r2, [r3, #0]
	*(USART_CR2) = 0;  // This is the default, but do it anyway
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <init_usart2+0xa0>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
	*(USART_CR3) = 0;  // This is the default, but do it anyway
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <init_usart2+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
	*(USART_BRR) = sysclk/baud;
 800124a:	4910      	ldr	r1, [pc, #64]	; (800128c <init_usart2+0xa8>)
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	fbb2 f3f3 	udiv	r3, r2, r3
 8001254:	600b      	str	r3, [r1, #0]

	/* I'm not sure if this is needed for standard IO*/
	 //setvbuf(stderr, NULL, _IONBF, 0);
	 //setvbuf(stdin, NULL, _IONBF, 0);
	 setvbuf(stdout, NULL, _IONBF, 0);
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <init_usart2+0xac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6898      	ldr	r0, [r3, #8]
 800125c:	2300      	movs	r3, #0
 800125e:	2202      	movs	r2, #2
 8001260:	2100      	movs	r1, #0
 8001262:	f001 fdc5 	bl	8002df0 <setvbuf>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023830 	.word	0x40023830
 8001274:	40023840 	.word	0x40023840
 8001278:	40020020 	.word	0x40020020
 800127c:	40020000 	.word	0x40020000
 8001280:	4000440c 	.word	0x4000440c
 8001284:	40004410 	.word	0x40004410
 8001288:	40004414 	.word	0x40004414
 800128c:	40004408 	.word	0x40004408
 8001290:	2000000c 	.word	0x2000000c

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129a:	490e      	ldr	r1, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b0:	4c0b      	ldr	r4, [pc, #44]	; (80012e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012be:	f7ff fefd 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f001 fcdb 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff f9ff 	bl	80006c8 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012d8:	08003f40 	.word	0x08003f40
  ldr r2, =_sbss
 80012dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012e0:	20000448 	.word	0x20000448

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_Init+0x40>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_Init+0x40>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_Init+0x40>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 f92b 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	200f      	movs	r0, #15
 8001318:	f000 f808 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff fdb0 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x54>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f943 	bl	80015d6 <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 f90b 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000434 	.word	0x20000434

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000434 	.word	0x20000434

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff3e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff31 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	e165      	b.n	80018d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8154 	bne.w	80018d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d005      	beq.n	8001642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163e:	2b02      	cmp	r3, #2
 8001640:	d130      	bne.n	80016a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 0201 	and.w	r2, r3, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d017      	beq.n	80016e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d123      	bne.n	8001734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80ae 	beq.w	80018d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_GPIO_Init+0x300>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a5c      	ldr	r2, [pc, #368]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001792:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_GPIO_Init+0x304>)
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_GPIO_Init+0x308>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d025      	beq.n	800180a <HAL_GPIO_Init+0x21a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_GPIO_Init+0x30c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01f      	beq.n	8001806 <HAL_GPIO_Init+0x216>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4d      	ldr	r2, [pc, #308]	; (8001900 <HAL_GPIO_Init+0x310>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x212>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <HAL_GPIO_Init+0x314>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x20e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4b      	ldr	r2, [pc, #300]	; (8001908 <HAL_GPIO_Init+0x318>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x20a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4a      	ldr	r2, [pc, #296]	; (800190c <HAL_GPIO_Init+0x31c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x206>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a49      	ldr	r2, [pc, #292]	; (8001910 <HAL_GPIO_Init+0x320>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x202>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e00c      	b.n	800180c <HAL_GPIO_Init+0x21c>
 80017f2:	2307      	movs	r3, #7
 80017f4:	e00a      	b.n	800180c <HAL_GPIO_Init+0x21c>
 80017f6:	2305      	movs	r3, #5
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x21c>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x21c>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x21c>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x21c>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x21c>
 800180a:	2300      	movs	r3, #0
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	4935      	ldr	r1, [pc, #212]	; (80018f4 <HAL_GPIO_Init+0x304>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182a:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_GPIO_Init+0x324>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184e:	4a31      	ldr	r2, [pc, #196]	; (8001914 <HAL_GPIO_Init+0x324>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_GPIO_Init+0x324>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001878:	4a26      	ldr	r2, [pc, #152]	; (8001914 <HAL_GPIO_Init+0x324>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187e:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_GPIO_Init+0x324>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <HAL_GPIO_Init+0x324>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_GPIO_Init+0x324>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018cc:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_GPIO_Init+0x324>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	f67f ae96 	bls.w	800160c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40021400 	.word	0x40021400
 8001910:	40021800 	.word	0x40021800
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe68 	bl	8000670 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0cc      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d90c      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a18:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	494d      	ldr	r1, [pc, #308]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d044      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d119      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e067      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4934      	ldr	r1, [pc, #208]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fc8a 	bl	80013b4 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff fc86 	bl	80013b4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e04f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d20c      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	490e      	ldr	r1, [pc, #56]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 f821 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	490a      	ldr	r1, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fbea 	bl	800132c <HAL_InitTick>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08003e88 	.word	0x08003e88
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b7c:	b087      	sub	sp, #28
 8001b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b80:	2600      	movs	r6, #0
 8001b82:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001b84:	2600      	movs	r6, #0
 8001b86:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001b88:	2600      	movs	r6, #0
 8001b8a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001b8c:	2600      	movs	r6, #0
 8001b8e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b90:	2600      	movs	r6, #0
 8001b92:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b94:	4ea3      	ldr	r6, [pc, #652]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b96:	68b6      	ldr	r6, [r6, #8]
 8001b98:	f006 060c 	and.w	r6, r6, #12
 8001b9c:	2e0c      	cmp	r6, #12
 8001b9e:	f200 8137 	bhi.w	8001e10 <HAL_RCC_GetSysClockFreq+0x298>
 8001ba2:	f20f 0c08 	addw	ip, pc, #8
 8001ba6:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001baa:	bf00      	nop
 8001bac:	08001be1 	.word	0x08001be1
 8001bb0:	08001e11 	.word	0x08001e11
 8001bb4:	08001e11 	.word	0x08001e11
 8001bb8:	08001e11 	.word	0x08001e11
 8001bbc:	08001be7 	.word	0x08001be7
 8001bc0:	08001e11 	.word	0x08001e11
 8001bc4:	08001e11 	.word	0x08001e11
 8001bc8:	08001e11 	.word	0x08001e11
 8001bcc:	08001bed 	.word	0x08001bed
 8001bd0:	08001e11 	.word	0x08001e11
 8001bd4:	08001e11 	.word	0x08001e11
 8001bd8:	08001e11 	.word	0x08001e11
 8001bdc:	08001d03 	.word	0x08001d03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b91      	ldr	r3, [pc, #580]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001be2:	613b      	str	r3, [r7, #16]
       break;
 8001be4:	e117      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be6:	4b91      	ldr	r3, [pc, #580]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001be8:	613b      	str	r3, [r7, #16]
      break;
 8001bea:	e114      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bec:	4b8d      	ldr	r3, [pc, #564]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf6:	4b8b      	ldr	r3, [pc, #556]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d024      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001c12:	f04f 0500 	mov.w	r5, #0
 8001c16:	ea02 0004 	and.w	r0, r2, r4
 8001c1a:	ea03 0105 	and.w	r1, r3, r5
 8001c1e:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c20:	fb03 f201 	mul.w	r2, r3, r1
 8001c24:	2300      	movs	r3, #0
 8001c26:	fb03 f300 	mul.w	r3, r3, r0
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a7f      	ldr	r2, [pc, #508]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c2e:	fba0 0102 	umull	r0, r1, r0, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	4619      	mov	r1, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	f7fe fb3f 	bl	80002c0 <__aeabi_uldivmod>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4613      	mov	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e04c      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	461a      	mov	r2, r3
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c5c:	f04f 0100 	mov.w	r1, #0
 8001c60:	ea02 0800 	and.w	r8, r2, r0
 8001c64:	ea03 0901 	and.w	r9, r3, r1
 8001c68:	4640      	mov	r0, r8
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	014b      	lsls	r3, r1, #5
 8001c76:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c7a:	0142      	lsls	r2, r0, #5
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	ebb0 0008 	subs.w	r0, r0, r8
 8001c84:	eb61 0109 	sbc.w	r1, r1, r9
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	018b      	lsls	r3, r1, #6
 8001c92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c96:	0182      	lsls	r2, r0, #6
 8001c98:	1a12      	subs	r2, r2, r0
 8001c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	00d9      	lsls	r1, r3, #3
 8001ca8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cac:	00d0      	lsls	r0, r2, #3
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	eb12 0208 	adds.w	r2, r2, r8
 8001cb6:	eb43 0309 	adc.w	r3, r3, r9
 8001cba:	f04f 0000 	mov.w	r0, #0
 8001cbe:	f04f 0100 	mov.w	r1, #0
 8001cc2:	0299      	lsls	r1, r3, #10
 8001cc4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cc8:	0290      	lsls	r0, r2, #10
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	f7fe faf1 	bl	80002c0 <__aeabi_uldivmod>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce6:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0c1b      	lsrs	r3, r3, #16
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	613b      	str	r3, [r7, #16]
      break;
 8001d00:	e089      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d02:	4948      	ldr	r1, [pc, #288]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d04:	6849      	ldr	r1, [r1, #4]
 8001d06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d0a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d0c:	4945      	ldr	r1, [pc, #276]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d0e:	6849      	ldr	r1, [r1, #4]
 8001d10:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d024      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d18:	4942      	ldr	r1, [pc, #264]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d1a:	6849      	ldr	r1, [r1, #4]
 8001d1c:	0989      	lsrs	r1, r1, #6
 8001d1e:	4608      	mov	r0, r1
 8001d20:	f04f 0100 	mov.w	r1, #0
 8001d24:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d28:	f04f 0500 	mov.w	r5, #0
 8001d2c:	ea00 0204 	and.w	r2, r0, r4
 8001d30:	ea01 0305 	and.w	r3, r1, r5
 8001d34:	493d      	ldr	r1, [pc, #244]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d36:	fb01 f003 	mul.w	r0, r1, r3
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	fb01 f102 	mul.w	r1, r1, r2
 8001d40:	1844      	adds	r4, r0, r1
 8001d42:	493a      	ldr	r1, [pc, #232]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d44:	fba2 0101 	umull	r0, r1, r2, r1
 8001d48:	1863      	adds	r3, r4, r1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f7fe fab4 	bl	80002c0 <__aeabi_uldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e04a      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	099b      	lsrs	r3, r3, #6
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	ea02 0400 	and.w	r4, r2, r0
 8001d7a:	ea03 0501 	and.w	r5, r3, r1
 8001d7e:	4620      	mov	r0, r4
 8001d80:	4629      	mov	r1, r5
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	014b      	lsls	r3, r1, #5
 8001d8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d90:	0142      	lsls	r2, r0, #5
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	1b00      	subs	r0, r0, r4
 8001d98:	eb61 0105 	sbc.w	r1, r1, r5
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	018b      	lsls	r3, r1, #6
 8001da6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001daa:	0182      	lsls	r2, r0, #6
 8001dac:	1a12      	subs	r2, r2, r0
 8001dae:	eb63 0301 	sbc.w	r3, r3, r1
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	00d9      	lsls	r1, r3, #3
 8001dbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dc0:	00d0      	lsls	r0, r2, #3
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	1912      	adds	r2, r2, r4
 8001dc8:	eb45 0303 	adc.w	r3, r5, r3
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	f04f 0100 	mov.w	r1, #0
 8001dd4:	0299      	lsls	r1, r3, #10
 8001dd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dda:	0290      	lsls	r0, r2, #10
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f7fe fa68 	bl	80002c0 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4613      	mov	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0f1b      	lsrs	r3, r3, #28
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	613b      	str	r3, [r7, #16]
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e12:	613b      	str	r3, [r7, #16]
      break;
 8001e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e16:	693b      	ldr	r3, [r7, #16]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	017d7840 	.word	0x017d7840

08001e30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e28d      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8083 	beq.w	8001f56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e50:	4b94      	ldr	r3, [pc, #592]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d019      	beq.n	8001e90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e5c:	4b91      	ldr	r3, [pc, #580]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e68:	4b8e      	ldr	r3, [pc, #568]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e74:	d00c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x124>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e25a      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x90>
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7b      	ldr	r2, [pc, #492]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xcc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xb4>
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a75      	ldr	r2, [pc, #468]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a72      	ldr	r2, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xcc>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6e      	ldr	r2, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6b      	ldr	r2, [pc, #428]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fa56 	bl	80013b4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fa52 	bl	80013b4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e21f      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xdc>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fa42 	bl	80013b4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fa3e 	bl	80013b4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e20b      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x104>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d06f      	beq.n	8002042 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f62:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d017      	beq.n	8001f9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f6e:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x186>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1d3      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4937      	ldr	r1, [pc, #220]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_RCC_OscConfig+0x278>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff f9eb 	bl	80013b4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7ff f9e7 	bl	80013b4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1b4      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4925      	ldr	r1, [pc, #148]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x278>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f9ca 	bl	80013b4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff f9c6 	bl	80013b4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e193      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d036      	beq.n	80020bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_RCC_OscConfig+0x27c>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff f9aa 	bl	80013b4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff f9a6 	bl	80013b4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e173      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x234>
 8002082:	e01b      	b.n	80020bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_OscConfig+0x27c>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff f993 	bl	80013b4 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	e00e      	b.n	80020b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002092:	f7ff f98f 	bl	80013b4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d907      	bls.n	80020b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e15c      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b8a      	ldr	r3, [pc, #552]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ea      	bne.n	8002092 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8097 	beq.w	80021f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b83      	ldr	r3, [pc, #524]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a7e      	ldr	r2, [pc, #504]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b7c      	ldr	r3, [pc, #496]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b79      	ldr	r3, [pc, #484]	; (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a75      	ldr	r2, [pc, #468]	; (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7ff f94f 	bl	80013b4 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7ff f94b 	bl	80013b4 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e118      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b6c      	ldr	r3, [pc, #432]	; (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x31e>
 8002140:	4b66      	ldr	r3, [pc, #408]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x358>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x340>
 8002156:	4b61      	ldr	r3, [pc, #388]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a60      	ldr	r2, [pc, #384]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a5d      	ldr	r2, [pc, #372]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x358>
 8002170:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a59      	ldr	r2, [pc, #356]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	4b57      	ldr	r3, [pc, #348]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a56      	ldr	r2, [pc, #344]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f910 	bl	80013b4 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7ff f90c 	bl	80013b4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0d7      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b4b      	ldr	r3, [pc, #300]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCC_OscConfig+0x368>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7ff f8fa 	bl	80013b4 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7ff f8f6 	bl	80013b4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0c1      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	4b40      	ldr	r3, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80ad 	beq.w	800235c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d060      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d145      	bne.n	80022a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff f8ca 	bl	80013b4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff f8c6 	bl	80013b4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e093      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	071b      	lsls	r3, r3, #28
 800226e:	491b      	ldr	r1, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7ff f89b 	bl	80013b4 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff f897 	bl	80013b4 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e064      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x452>
 80022a0:	e05c      	b.n	800235c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff f884 	bl	80013b4 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f880 	bl	80013b4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e04d      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x480>
 80022ce:	e045      	b.n	800235c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e040      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000
 80022e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <HAL_RCC_OscConfig+0x538>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d030      	beq.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d129      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d122      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002318:	4013      	ands	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800231e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002320:	4293      	cmp	r3, r2
 8002322:	d119      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	3b01      	subs	r3, #1
 8002332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d10f      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e041      	b.n	8002402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fd9c 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3304      	adds	r3, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f000 fa96 	bl	80028dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d001      	beq.n	8002424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e04e      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d022      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d01d      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d018      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <HAL_TIM_Base_Start_IT+0xd0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d010      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40000800 	.word	0x40000800
 80024dc:	40000c00 	.word	0x40000c00
 80024e0:	40010400 	.word	0x40010400
 80024e4:	40014000 	.word	0x40014000
 80024e8:	40001800 	.word	0x40001800

080024ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d122      	bne.n	8002548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d11b      	bne.n	8002548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0202 	mvn.w	r2, #2
 8002518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f9b5 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9a7 	bl	800288a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f9b8 	bl	80028b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b04      	cmp	r3, #4
 8002554:	d122      	bne.n	800259c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b04      	cmp	r3, #4
 8002562:	d11b      	bne.n	800259c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0204 	mvn.w	r2, #4
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f98b 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f97d 	bl	800288a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f98e 	bl	80028b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d122      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d11b      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0208 	mvn.w	r2, #8
 80025c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2204      	movs	r2, #4
 80025c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f961 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f953 	bl	800288a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f964 	bl	80028b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d122      	bne.n	8002644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b10      	cmp	r3, #16
 800260a:	d11b      	bne.n	8002644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0210 	mvn.w	r2, #16
 8002614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2208      	movs	r2, #8
 800261a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f937 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 8002630:	e005      	b.n	800263e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f929 	bl	800288a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f93a 	bl	80028b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10e      	bne.n	8002670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0201 	mvn.w	r2, #1
 8002668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fd ffa4 	bl	80005b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d10e      	bne.n	800269c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d107      	bne.n	800269c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fae0 	bl	8002c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d10e      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d107      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8ff 	bl	80028c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d10e      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d107      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0220 	mvn.w	r2, #32
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 faaa 	bl	8002c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_TIM_ConfigClockSource+0x1c>
 8002714:	2302      	movs	r3, #2
 8002716:	e0b4      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x186>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800273e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002750:	d03e      	beq.n	80027d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002756:	f200 8087 	bhi.w	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275e:	f000 8086 	beq.w	800286e <HAL_TIM_ConfigClockSource+0x172>
 8002762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002766:	d87f      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b70      	cmp	r3, #112	; 0x70
 800276a:	d01a      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0xa6>
 800276c:	2b70      	cmp	r3, #112	; 0x70
 800276e:	d87b      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b60      	cmp	r3, #96	; 0x60
 8002772:	d050      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x11a>
 8002774:	2b60      	cmp	r3, #96	; 0x60
 8002776:	d877      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b50      	cmp	r3, #80	; 0x50
 800277a:	d03c      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0xfa>
 800277c:	2b50      	cmp	r3, #80	; 0x50
 800277e:	d873      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d058      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x13a>
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d86f      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b30      	cmp	r3, #48	; 0x30
 800278a:	d064      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	2b30      	cmp	r3, #48	; 0x30
 800278e:	d86b      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b20      	cmp	r3, #32
 8002792:	d060      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x15a>
 8002794:	2b20      	cmp	r3, #32
 8002796:	d867      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05c      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x15a>
 800279c:	2b10      	cmp	r3, #16
 800279e:	d05a      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x15a>
 80027a0:	e062      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f000 f9ad 	bl	8002b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	609a      	str	r2, [r3, #8]
      break;
 80027ce:	e04f      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6899      	ldr	r1, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f000 f996 	bl	8002b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f2:	609a      	str	r2, [r3, #8]
      break;
 80027f4:	e03c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	461a      	mov	r2, r3
 8002804:	f000 f90a 	bl	8002a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2150      	movs	r1, #80	; 0x50
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f963 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002814:	e02c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	461a      	mov	r2, r3
 8002824:	f000 f929 	bl	8002a7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2160      	movs	r1, #96	; 0x60
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f953 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002834:	e01c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6859      	ldr	r1, [r3, #4]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	461a      	mov	r2, r3
 8002844:	f000 f8ea 	bl	8002a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2140      	movs	r1, #64	; 0x40
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f943 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002854:	e00c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f000 f93a 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002866:	e003      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
      break;
 800286c:	e000      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800286e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a40      	ldr	r2, [pc, #256]	; (80029f0 <TIM_Base_SetConfig+0x114>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d00f      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3d      	ldr	r2, [pc, #244]	; (80029f4 <TIM_Base_SetConfig+0x118>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00b      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <TIM_Base_SetConfig+0x11c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3b      	ldr	r2, [pc, #236]	; (80029fc <TIM_Base_SetConfig+0x120>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3a      	ldr	r2, [pc, #232]	; (8002a00 <TIM_Base_SetConfig+0x124>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d108      	bne.n	800292e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2f      	ldr	r2, [pc, #188]	; (80029f0 <TIM_Base_SetConfig+0x114>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d02b      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d027      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a2c      	ldr	r2, [pc, #176]	; (80029f4 <TIM_Base_SetConfig+0x118>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d023      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a2b      	ldr	r2, [pc, #172]	; (80029f8 <TIM_Base_SetConfig+0x11c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <TIM_Base_SetConfig+0x120>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01b      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <TIM_Base_SetConfig+0x124>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d017      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <TIM_Base_SetConfig+0x128>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <TIM_Base_SetConfig+0x12c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00f      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <TIM_Base_SetConfig+0x130>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <TIM_Base_SetConfig+0x134>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <TIM_Base_SetConfig+0x138>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <TIM_Base_SetConfig+0x13c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d108      	bne.n	80029a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <TIM_Base_SetConfig+0x114>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d003      	beq.n	80029d4 <TIM_Base_SetConfig+0xf8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <TIM_Base_SetConfig+0x124>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	615a      	str	r2, [r3, #20]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40000800 	.word	0x40000800
 80029fc:	40000c00 	.word	0x40000c00
 8002a00:	40010400 	.word	0x40010400
 8002a04:	40014000 	.word	0x40014000
 8002a08:	40014400 	.word	0x40014400
 8002a0c:	40014800 	.word	0x40014800
 8002a10:	40001800 	.word	0x40001800
 8002a14:	40001c00 	.word	0x40001c00
 8002a18:	40002000 	.word	0x40002000

08002a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 030a 	bic.w	r3, r3, #10
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b087      	sub	sp, #28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0210 	bic.w	r2, r3, #16
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	031b      	lsls	r3, r3, #12
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f043 0307 	orr.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e05a      	b.n	8002c1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d022      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d018      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10c      	bne.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40010400 	.word	0x40010400
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40001800 	.word	0x40001800

08002c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <__errno>:
 8002c70:	4b01      	ldr	r3, [pc, #4]	; (8002c78 <__errno+0x8>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4d0d      	ldr	r5, [pc, #52]	; (8002cb4 <__libc_init_array+0x38>)
 8002c80:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <__libc_init_array+0x3c>)
 8002c82:	1b64      	subs	r4, r4, r5
 8002c84:	10a4      	asrs	r4, r4, #2
 8002c86:	2600      	movs	r6, #0
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	4d0b      	ldr	r5, [pc, #44]	; (8002cbc <__libc_init_array+0x40>)
 8002c8e:	4c0c      	ldr	r4, [pc, #48]	; (8002cc0 <__libc_init_array+0x44>)
 8002c90:	f001 f8ba 	bl	8003e08 <_init>
 8002c94:	1b64      	subs	r4, r4, r5
 8002c96:	10a4      	asrs	r4, r4, #2
 8002c98:	2600      	movs	r6, #0
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca4:	4798      	blx	r3
 8002ca6:	3601      	adds	r6, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cae:	4798      	blx	r3
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08003f38 	.word	0x08003f38
 8002cb8:	08003f38 	.word	0x08003f38
 8002cbc:	08003f38 	.word	0x08003f38
 8002cc0:	08003f3c 	.word	0x08003f3c

08002cc4 <memset>:
 8002cc4:	4402      	add	r2, r0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <iprintf>:
 8002cd4:	b40f      	push	{r0, r1, r2, r3}
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <iprintf+0x2c>)
 8002cd8:	b513      	push	{r0, r1, r4, lr}
 8002cda:	681c      	ldr	r4, [r3, #0]
 8002cdc:	b124      	cbz	r4, 8002ce8 <iprintf+0x14>
 8002cde:	69a3      	ldr	r3, [r4, #24]
 8002ce0:	b913      	cbnz	r3, 8002ce8 <iprintf+0x14>
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f000 fb24 	bl	8003330 <__sinit>
 8002ce8:	ab05      	add	r3, sp, #20
 8002cea:	9a04      	ldr	r2, [sp, #16]
 8002cec:	68a1      	ldr	r1, [r4, #8]
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f000 fcfd 	bl	80036f0 <_vfiprintf_r>
 8002cf6:	b002      	add	sp, #8
 8002cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cfc:	b004      	add	sp, #16
 8002cfe:	4770      	bx	lr
 8002d00:	2000000c 	.word	0x2000000c

08002d04 <_puts_r>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	460e      	mov	r6, r1
 8002d08:	4605      	mov	r5, r0
 8002d0a:	b118      	cbz	r0, 8002d14 <_puts_r+0x10>
 8002d0c:	6983      	ldr	r3, [r0, #24]
 8002d0e:	b90b      	cbnz	r3, 8002d14 <_puts_r+0x10>
 8002d10:	f000 fb0e 	bl	8003330 <__sinit>
 8002d14:	69ab      	ldr	r3, [r5, #24]
 8002d16:	68ac      	ldr	r4, [r5, #8]
 8002d18:	b913      	cbnz	r3, 8002d20 <_puts_r+0x1c>
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f000 fb08 	bl	8003330 <__sinit>
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <_puts_r+0xd0>)
 8002d22:	429c      	cmp	r4, r3
 8002d24:	d120      	bne.n	8002d68 <_puts_r+0x64>
 8002d26:	686c      	ldr	r4, [r5, #4]
 8002d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d2a:	07db      	lsls	r3, r3, #31
 8002d2c:	d405      	bmi.n	8002d3a <_puts_r+0x36>
 8002d2e:	89a3      	ldrh	r3, [r4, #12]
 8002d30:	0598      	lsls	r0, r3, #22
 8002d32:	d402      	bmi.n	8002d3a <_puts_r+0x36>
 8002d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d36:	f000 fb99 	bl	800346c <__retarget_lock_acquire_recursive>
 8002d3a:	89a3      	ldrh	r3, [r4, #12]
 8002d3c:	0719      	lsls	r1, r3, #28
 8002d3e:	d51d      	bpl.n	8002d7c <_puts_r+0x78>
 8002d40:	6923      	ldr	r3, [r4, #16]
 8002d42:	b1db      	cbz	r3, 8002d7c <_puts_r+0x78>
 8002d44:	3e01      	subs	r6, #1
 8002d46:	68a3      	ldr	r3, [r4, #8]
 8002d48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	60a3      	str	r3, [r4, #8]
 8002d50:	bb39      	cbnz	r1, 8002da2 <_puts_r+0x9e>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	da38      	bge.n	8002dc8 <_puts_r+0xc4>
 8002d56:	4622      	mov	r2, r4
 8002d58:	210a      	movs	r1, #10
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f000 f90e 	bl	8002f7c <__swbuf_r>
 8002d60:	3001      	adds	r0, #1
 8002d62:	d011      	beq.n	8002d88 <_puts_r+0x84>
 8002d64:	250a      	movs	r5, #10
 8002d66:	e011      	b.n	8002d8c <_puts_r+0x88>
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <_puts_r+0xd4>)
 8002d6a:	429c      	cmp	r4, r3
 8002d6c:	d101      	bne.n	8002d72 <_puts_r+0x6e>
 8002d6e:	68ac      	ldr	r4, [r5, #8]
 8002d70:	e7da      	b.n	8002d28 <_puts_r+0x24>
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <_puts_r+0xd8>)
 8002d74:	429c      	cmp	r4, r3
 8002d76:	bf08      	it	eq
 8002d78:	68ec      	ldreq	r4, [r5, #12]
 8002d7a:	e7d5      	b.n	8002d28 <_puts_r+0x24>
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	4628      	mov	r0, r5
 8002d80:	f000 f94e 	bl	8003020 <__swsetup_r>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d0dd      	beq.n	8002d44 <_puts_r+0x40>
 8002d88:	f04f 35ff 	mov.w	r5, #4294967295
 8002d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d8e:	07da      	lsls	r2, r3, #31
 8002d90:	d405      	bmi.n	8002d9e <_puts_r+0x9a>
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	059b      	lsls	r3, r3, #22
 8002d96:	d402      	bmi.n	8002d9e <_puts_r+0x9a>
 8002d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d9a:	f000 fb68 	bl	800346e <__retarget_lock_release_recursive>
 8002d9e:	4628      	mov	r0, r5
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	da04      	bge.n	8002db0 <_puts_r+0xac>
 8002da6:	69a2      	ldr	r2, [r4, #24]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dc06      	bgt.n	8002dba <_puts_r+0xb6>
 8002dac:	290a      	cmp	r1, #10
 8002dae:	d004      	beq.n	8002dba <_puts_r+0xb6>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	6022      	str	r2, [r4, #0]
 8002db6:	7019      	strb	r1, [r3, #0]
 8002db8:	e7c5      	b.n	8002d46 <_puts_r+0x42>
 8002dba:	4622      	mov	r2, r4
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f000 f8dd 	bl	8002f7c <__swbuf_r>
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d1bf      	bne.n	8002d46 <_puts_r+0x42>
 8002dc6:	e7df      	b.n	8002d88 <_puts_r+0x84>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	250a      	movs	r5, #10
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	6022      	str	r2, [r4, #0]
 8002dd0:	701d      	strb	r5, [r3, #0]
 8002dd2:	e7db      	b.n	8002d8c <_puts_r+0x88>
 8002dd4:	08003ebc 	.word	0x08003ebc
 8002dd8:	08003edc 	.word	0x08003edc
 8002ddc:	08003e9c 	.word	0x08003e9c

08002de0 <puts>:
 8002de0:	4b02      	ldr	r3, [pc, #8]	; (8002dec <puts+0xc>)
 8002de2:	4601      	mov	r1, r0
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	f7ff bf8d 	b.w	8002d04 <_puts_r>
 8002dea:	bf00      	nop
 8002dec:	2000000c 	.word	0x2000000c

08002df0 <setvbuf>:
 8002df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002df4:	461d      	mov	r5, r3
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <setvbuf+0x17c>)
 8002df8:	681f      	ldr	r7, [r3, #0]
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460e      	mov	r6, r1
 8002dfe:	4690      	mov	r8, r2
 8002e00:	b127      	cbz	r7, 8002e0c <setvbuf+0x1c>
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	b913      	cbnz	r3, 8002e0c <setvbuf+0x1c>
 8002e06:	4638      	mov	r0, r7
 8002e08:	f000 fa92 	bl	8003330 <__sinit>
 8002e0c:	4b58      	ldr	r3, [pc, #352]	; (8002f70 <setvbuf+0x180>)
 8002e0e:	429c      	cmp	r4, r3
 8002e10:	d167      	bne.n	8002ee2 <setvbuf+0xf2>
 8002e12:	687c      	ldr	r4, [r7, #4]
 8002e14:	f1b8 0f02 	cmp.w	r8, #2
 8002e18:	d006      	beq.n	8002e28 <setvbuf+0x38>
 8002e1a:	f1b8 0f01 	cmp.w	r8, #1
 8002e1e:	f200 809f 	bhi.w	8002f60 <setvbuf+0x170>
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	f2c0 809c 	blt.w	8002f60 <setvbuf+0x170>
 8002e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e2a:	07db      	lsls	r3, r3, #31
 8002e2c:	d405      	bmi.n	8002e3a <setvbuf+0x4a>
 8002e2e:	89a3      	ldrh	r3, [r4, #12]
 8002e30:	0598      	lsls	r0, r3, #22
 8002e32:	d402      	bmi.n	8002e3a <setvbuf+0x4a>
 8002e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e36:	f000 fb19 	bl	800346c <__retarget_lock_acquire_recursive>
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	f000 f9e3 	bl	8003208 <_fflush_r>
 8002e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e44:	b141      	cbz	r1, 8002e58 <setvbuf+0x68>
 8002e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e4a:	4299      	cmp	r1, r3
 8002e4c:	d002      	beq.n	8002e54 <setvbuf+0x64>
 8002e4e:	4638      	mov	r0, r7
 8002e50:	f000 fb7a 	bl	8003548 <_free_r>
 8002e54:	2300      	movs	r3, #0
 8002e56:	6363      	str	r3, [r4, #52]	; 0x34
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61a3      	str	r3, [r4, #24]
 8002e5c:	6063      	str	r3, [r4, #4]
 8002e5e:	89a3      	ldrh	r3, [r4, #12]
 8002e60:	0619      	lsls	r1, r3, #24
 8002e62:	d503      	bpl.n	8002e6c <setvbuf+0x7c>
 8002e64:	6921      	ldr	r1, [r4, #16]
 8002e66:	4638      	mov	r0, r7
 8002e68:	f000 fb6e 	bl	8003548 <_free_r>
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	f1b8 0f02 	cmp.w	r8, #2
 8002e7a:	81a3      	strh	r3, [r4, #12]
 8002e7c:	d06c      	beq.n	8002f58 <setvbuf+0x168>
 8002e7e:	ab01      	add	r3, sp, #4
 8002e80:	466a      	mov	r2, sp
 8002e82:	4621      	mov	r1, r4
 8002e84:	4638      	mov	r0, r7
 8002e86:	f000 faf3 	bl	8003470 <__swhatbuf_r>
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	4318      	orrs	r0, r3
 8002e8e:	81a0      	strh	r0, [r4, #12]
 8002e90:	2d00      	cmp	r5, #0
 8002e92:	d130      	bne.n	8002ef6 <setvbuf+0x106>
 8002e94:	9d00      	ldr	r5, [sp, #0]
 8002e96:	4628      	mov	r0, r5
 8002e98:	f000 fb4e 	bl	8003538 <malloc>
 8002e9c:	4606      	mov	r6, r0
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d155      	bne.n	8002f4e <setvbuf+0x15e>
 8002ea2:	f8dd 9000 	ldr.w	r9, [sp]
 8002ea6:	45a9      	cmp	r9, r5
 8002ea8:	d14a      	bne.n	8002f40 <setvbuf+0x150>
 8002eaa:	f04f 35ff 	mov.w	r5, #4294967295
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60a2      	str	r2, [r4, #8]
 8002eb2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002eb6:	6022      	str	r2, [r4, #0]
 8002eb8:	6122      	str	r2, [r4, #16]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ec0:	6162      	str	r2, [r4, #20]
 8002ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	07d2      	lsls	r2, r2, #31
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	d405      	bmi.n	8002eda <setvbuf+0xea>
 8002ece:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002ed2:	d102      	bne.n	8002eda <setvbuf+0xea>
 8002ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ed6:	f000 faca 	bl	800346e <__retarget_lock_release_recursive>
 8002eda:	4628      	mov	r0, r5
 8002edc:	b003      	add	sp, #12
 8002ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <setvbuf+0x184>)
 8002ee4:	429c      	cmp	r4, r3
 8002ee6:	d101      	bne.n	8002eec <setvbuf+0xfc>
 8002ee8:	68bc      	ldr	r4, [r7, #8]
 8002eea:	e793      	b.n	8002e14 <setvbuf+0x24>
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <setvbuf+0x188>)
 8002eee:	429c      	cmp	r4, r3
 8002ef0:	bf08      	it	eq
 8002ef2:	68fc      	ldreq	r4, [r7, #12]
 8002ef4:	e78e      	b.n	8002e14 <setvbuf+0x24>
 8002ef6:	2e00      	cmp	r6, #0
 8002ef8:	d0cd      	beq.n	8002e96 <setvbuf+0xa6>
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	b913      	cbnz	r3, 8002f04 <setvbuf+0x114>
 8002efe:	4638      	mov	r0, r7
 8002f00:	f000 fa16 	bl	8003330 <__sinit>
 8002f04:	f1b8 0f01 	cmp.w	r8, #1
 8002f08:	bf08      	it	eq
 8002f0a:	89a3      	ldrheq	r3, [r4, #12]
 8002f0c:	6026      	str	r6, [r4, #0]
 8002f0e:	bf04      	itt	eq
 8002f10:	f043 0301 	orreq.w	r3, r3, #1
 8002f14:	81a3      	strheq	r3, [r4, #12]
 8002f16:	89a2      	ldrh	r2, [r4, #12]
 8002f18:	f012 0308 	ands.w	r3, r2, #8
 8002f1c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002f20:	d01c      	beq.n	8002f5c <setvbuf+0x16c>
 8002f22:	07d3      	lsls	r3, r2, #31
 8002f24:	bf41      	itttt	mi
 8002f26:	2300      	movmi	r3, #0
 8002f28:	426d      	negmi	r5, r5
 8002f2a:	60a3      	strmi	r3, [r4, #8]
 8002f2c:	61a5      	strmi	r5, [r4, #24]
 8002f2e:	bf58      	it	pl
 8002f30:	60a5      	strpl	r5, [r4, #8]
 8002f32:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002f34:	f015 0501 	ands.w	r5, r5, #1
 8002f38:	d115      	bne.n	8002f66 <setvbuf+0x176>
 8002f3a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002f3e:	e7c8      	b.n	8002ed2 <setvbuf+0xe2>
 8002f40:	4648      	mov	r0, r9
 8002f42:	f000 faf9 	bl	8003538 <malloc>
 8002f46:	4606      	mov	r6, r0
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d0ae      	beq.n	8002eaa <setvbuf+0xba>
 8002f4c:	464d      	mov	r5, r9
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f54:	81a3      	strh	r3, [r4, #12]
 8002f56:	e7d0      	b.n	8002efa <setvbuf+0x10a>
 8002f58:	2500      	movs	r5, #0
 8002f5a:	e7a8      	b.n	8002eae <setvbuf+0xbe>
 8002f5c:	60a3      	str	r3, [r4, #8]
 8002f5e:	e7e8      	b.n	8002f32 <setvbuf+0x142>
 8002f60:	f04f 35ff 	mov.w	r5, #4294967295
 8002f64:	e7b9      	b.n	8002eda <setvbuf+0xea>
 8002f66:	2500      	movs	r5, #0
 8002f68:	e7b7      	b.n	8002eda <setvbuf+0xea>
 8002f6a:	bf00      	nop
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	08003ebc 	.word	0x08003ebc
 8002f74:	08003edc 	.word	0x08003edc
 8002f78:	08003e9c 	.word	0x08003e9c

08002f7c <__swbuf_r>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	460e      	mov	r6, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	4605      	mov	r5, r0
 8002f84:	b118      	cbz	r0, 8002f8e <__swbuf_r+0x12>
 8002f86:	6983      	ldr	r3, [r0, #24]
 8002f88:	b90b      	cbnz	r3, 8002f8e <__swbuf_r+0x12>
 8002f8a:	f000 f9d1 	bl	8003330 <__sinit>
 8002f8e:	4b21      	ldr	r3, [pc, #132]	; (8003014 <__swbuf_r+0x98>)
 8002f90:	429c      	cmp	r4, r3
 8002f92:	d12b      	bne.n	8002fec <__swbuf_r+0x70>
 8002f94:	686c      	ldr	r4, [r5, #4]
 8002f96:	69a3      	ldr	r3, [r4, #24]
 8002f98:	60a3      	str	r3, [r4, #8]
 8002f9a:	89a3      	ldrh	r3, [r4, #12]
 8002f9c:	071a      	lsls	r2, r3, #28
 8002f9e:	d52f      	bpl.n	8003000 <__swbuf_r+0x84>
 8002fa0:	6923      	ldr	r3, [r4, #16]
 8002fa2:	b36b      	cbz	r3, 8003000 <__swbuf_r+0x84>
 8002fa4:	6923      	ldr	r3, [r4, #16]
 8002fa6:	6820      	ldr	r0, [r4, #0]
 8002fa8:	1ac0      	subs	r0, r0, r3
 8002faa:	6963      	ldr	r3, [r4, #20]
 8002fac:	b2f6      	uxtb	r6, r6
 8002fae:	4283      	cmp	r3, r0
 8002fb0:	4637      	mov	r7, r6
 8002fb2:	dc04      	bgt.n	8002fbe <__swbuf_r+0x42>
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 f926 	bl	8003208 <_fflush_r>
 8002fbc:	bb30      	cbnz	r0, 800300c <__swbuf_r+0x90>
 8002fbe:	68a3      	ldr	r3, [r4, #8]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60a3      	str	r3, [r4, #8]
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	6022      	str	r2, [r4, #0]
 8002fca:	701e      	strb	r6, [r3, #0]
 8002fcc:	6963      	ldr	r3, [r4, #20]
 8002fce:	3001      	adds	r0, #1
 8002fd0:	4283      	cmp	r3, r0
 8002fd2:	d004      	beq.n	8002fde <__swbuf_r+0x62>
 8002fd4:	89a3      	ldrh	r3, [r4, #12]
 8002fd6:	07db      	lsls	r3, r3, #31
 8002fd8:	d506      	bpl.n	8002fe8 <__swbuf_r+0x6c>
 8002fda:	2e0a      	cmp	r6, #10
 8002fdc:	d104      	bne.n	8002fe8 <__swbuf_r+0x6c>
 8002fde:	4621      	mov	r1, r4
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f000 f911 	bl	8003208 <_fflush_r>
 8002fe6:	b988      	cbnz	r0, 800300c <__swbuf_r+0x90>
 8002fe8:	4638      	mov	r0, r7
 8002fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <__swbuf_r+0x9c>)
 8002fee:	429c      	cmp	r4, r3
 8002ff0:	d101      	bne.n	8002ff6 <__swbuf_r+0x7a>
 8002ff2:	68ac      	ldr	r4, [r5, #8]
 8002ff4:	e7cf      	b.n	8002f96 <__swbuf_r+0x1a>
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <__swbuf_r+0xa0>)
 8002ff8:	429c      	cmp	r4, r3
 8002ffa:	bf08      	it	eq
 8002ffc:	68ec      	ldreq	r4, [r5, #12]
 8002ffe:	e7ca      	b.n	8002f96 <__swbuf_r+0x1a>
 8003000:	4621      	mov	r1, r4
 8003002:	4628      	mov	r0, r5
 8003004:	f000 f80c 	bl	8003020 <__swsetup_r>
 8003008:	2800      	cmp	r0, #0
 800300a:	d0cb      	beq.n	8002fa4 <__swbuf_r+0x28>
 800300c:	f04f 37ff 	mov.w	r7, #4294967295
 8003010:	e7ea      	b.n	8002fe8 <__swbuf_r+0x6c>
 8003012:	bf00      	nop
 8003014:	08003ebc 	.word	0x08003ebc
 8003018:	08003edc 	.word	0x08003edc
 800301c:	08003e9c 	.word	0x08003e9c

08003020 <__swsetup_r>:
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <__swsetup_r+0xcc>)
 8003022:	b570      	push	{r4, r5, r6, lr}
 8003024:	681d      	ldr	r5, [r3, #0]
 8003026:	4606      	mov	r6, r0
 8003028:	460c      	mov	r4, r1
 800302a:	b125      	cbz	r5, 8003036 <__swsetup_r+0x16>
 800302c:	69ab      	ldr	r3, [r5, #24]
 800302e:	b913      	cbnz	r3, 8003036 <__swsetup_r+0x16>
 8003030:	4628      	mov	r0, r5
 8003032:	f000 f97d 	bl	8003330 <__sinit>
 8003036:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <__swsetup_r+0xd0>)
 8003038:	429c      	cmp	r4, r3
 800303a:	d10f      	bne.n	800305c <__swsetup_r+0x3c>
 800303c:	686c      	ldr	r4, [r5, #4]
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003044:	0719      	lsls	r1, r3, #28
 8003046:	d42c      	bmi.n	80030a2 <__swsetup_r+0x82>
 8003048:	06dd      	lsls	r5, r3, #27
 800304a:	d411      	bmi.n	8003070 <__swsetup_r+0x50>
 800304c:	2309      	movs	r3, #9
 800304e:	6033      	str	r3, [r6, #0]
 8003050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003054:	81a3      	strh	r3, [r4, #12]
 8003056:	f04f 30ff 	mov.w	r0, #4294967295
 800305a:	e03e      	b.n	80030da <__swsetup_r+0xba>
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <__swsetup_r+0xd4>)
 800305e:	429c      	cmp	r4, r3
 8003060:	d101      	bne.n	8003066 <__swsetup_r+0x46>
 8003062:	68ac      	ldr	r4, [r5, #8]
 8003064:	e7eb      	b.n	800303e <__swsetup_r+0x1e>
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <__swsetup_r+0xd8>)
 8003068:	429c      	cmp	r4, r3
 800306a:	bf08      	it	eq
 800306c:	68ec      	ldreq	r4, [r5, #12]
 800306e:	e7e6      	b.n	800303e <__swsetup_r+0x1e>
 8003070:	0758      	lsls	r0, r3, #29
 8003072:	d512      	bpl.n	800309a <__swsetup_r+0x7a>
 8003074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003076:	b141      	cbz	r1, 800308a <__swsetup_r+0x6a>
 8003078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800307c:	4299      	cmp	r1, r3
 800307e:	d002      	beq.n	8003086 <__swsetup_r+0x66>
 8003080:	4630      	mov	r0, r6
 8003082:	f000 fa61 	bl	8003548 <_free_r>
 8003086:	2300      	movs	r3, #0
 8003088:	6363      	str	r3, [r4, #52]	; 0x34
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003090:	81a3      	strh	r3, [r4, #12]
 8003092:	2300      	movs	r3, #0
 8003094:	6063      	str	r3, [r4, #4]
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	81a3      	strh	r3, [r4, #12]
 80030a2:	6923      	ldr	r3, [r4, #16]
 80030a4:	b94b      	cbnz	r3, 80030ba <__swsetup_r+0x9a>
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b0:	d003      	beq.n	80030ba <__swsetup_r+0x9a>
 80030b2:	4621      	mov	r1, r4
 80030b4:	4630      	mov	r0, r6
 80030b6:	f000 f9ff 	bl	80034b8 <__smakebuf_r>
 80030ba:	89a0      	ldrh	r0, [r4, #12]
 80030bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030c0:	f010 0301 	ands.w	r3, r0, #1
 80030c4:	d00a      	beq.n	80030dc <__swsetup_r+0xbc>
 80030c6:	2300      	movs	r3, #0
 80030c8:	60a3      	str	r3, [r4, #8]
 80030ca:	6963      	ldr	r3, [r4, #20]
 80030cc:	425b      	negs	r3, r3
 80030ce:	61a3      	str	r3, [r4, #24]
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	b943      	cbnz	r3, 80030e6 <__swsetup_r+0xc6>
 80030d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030d8:	d1ba      	bne.n	8003050 <__swsetup_r+0x30>
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	0781      	lsls	r1, r0, #30
 80030de:	bf58      	it	pl
 80030e0:	6963      	ldrpl	r3, [r4, #20]
 80030e2:	60a3      	str	r3, [r4, #8]
 80030e4:	e7f4      	b.n	80030d0 <__swsetup_r+0xb0>
 80030e6:	2000      	movs	r0, #0
 80030e8:	e7f7      	b.n	80030da <__swsetup_r+0xba>
 80030ea:	bf00      	nop
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	08003ebc 	.word	0x08003ebc
 80030f4:	08003edc 	.word	0x08003edc
 80030f8:	08003e9c 	.word	0x08003e9c

080030fc <__sflush_r>:
 80030fc:	898a      	ldrh	r2, [r1, #12]
 80030fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003102:	4605      	mov	r5, r0
 8003104:	0710      	lsls	r0, r2, #28
 8003106:	460c      	mov	r4, r1
 8003108:	d458      	bmi.n	80031bc <__sflush_r+0xc0>
 800310a:	684b      	ldr	r3, [r1, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	dc05      	bgt.n	800311c <__sflush_r+0x20>
 8003110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	dc02      	bgt.n	800311c <__sflush_r+0x20>
 8003116:	2000      	movs	r0, #0
 8003118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800311c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800311e:	2e00      	cmp	r6, #0
 8003120:	d0f9      	beq.n	8003116 <__sflush_r+0x1a>
 8003122:	2300      	movs	r3, #0
 8003124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003128:	682f      	ldr	r7, [r5, #0]
 800312a:	602b      	str	r3, [r5, #0]
 800312c:	d032      	beq.n	8003194 <__sflush_r+0x98>
 800312e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003130:	89a3      	ldrh	r3, [r4, #12]
 8003132:	075a      	lsls	r2, r3, #29
 8003134:	d505      	bpl.n	8003142 <__sflush_r+0x46>
 8003136:	6863      	ldr	r3, [r4, #4]
 8003138:	1ac0      	subs	r0, r0, r3
 800313a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800313c:	b10b      	cbz	r3, 8003142 <__sflush_r+0x46>
 800313e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003140:	1ac0      	subs	r0, r0, r3
 8003142:	2300      	movs	r3, #0
 8003144:	4602      	mov	r2, r0
 8003146:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003148:	6a21      	ldr	r1, [r4, #32]
 800314a:	4628      	mov	r0, r5
 800314c:	47b0      	blx	r6
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	89a3      	ldrh	r3, [r4, #12]
 8003152:	d106      	bne.n	8003162 <__sflush_r+0x66>
 8003154:	6829      	ldr	r1, [r5, #0]
 8003156:	291d      	cmp	r1, #29
 8003158:	d82c      	bhi.n	80031b4 <__sflush_r+0xb8>
 800315a:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <__sflush_r+0x108>)
 800315c:	40ca      	lsrs	r2, r1
 800315e:	07d6      	lsls	r6, r2, #31
 8003160:	d528      	bpl.n	80031b4 <__sflush_r+0xb8>
 8003162:	2200      	movs	r2, #0
 8003164:	6062      	str	r2, [r4, #4]
 8003166:	04d9      	lsls	r1, r3, #19
 8003168:	6922      	ldr	r2, [r4, #16]
 800316a:	6022      	str	r2, [r4, #0]
 800316c:	d504      	bpl.n	8003178 <__sflush_r+0x7c>
 800316e:	1c42      	adds	r2, r0, #1
 8003170:	d101      	bne.n	8003176 <__sflush_r+0x7a>
 8003172:	682b      	ldr	r3, [r5, #0]
 8003174:	b903      	cbnz	r3, 8003178 <__sflush_r+0x7c>
 8003176:	6560      	str	r0, [r4, #84]	; 0x54
 8003178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800317a:	602f      	str	r7, [r5, #0]
 800317c:	2900      	cmp	r1, #0
 800317e:	d0ca      	beq.n	8003116 <__sflush_r+0x1a>
 8003180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003184:	4299      	cmp	r1, r3
 8003186:	d002      	beq.n	800318e <__sflush_r+0x92>
 8003188:	4628      	mov	r0, r5
 800318a:	f000 f9dd 	bl	8003548 <_free_r>
 800318e:	2000      	movs	r0, #0
 8003190:	6360      	str	r0, [r4, #52]	; 0x34
 8003192:	e7c1      	b.n	8003118 <__sflush_r+0x1c>
 8003194:	6a21      	ldr	r1, [r4, #32]
 8003196:	2301      	movs	r3, #1
 8003198:	4628      	mov	r0, r5
 800319a:	47b0      	blx	r6
 800319c:	1c41      	adds	r1, r0, #1
 800319e:	d1c7      	bne.n	8003130 <__sflush_r+0x34>
 80031a0:	682b      	ldr	r3, [r5, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0c4      	beq.n	8003130 <__sflush_r+0x34>
 80031a6:	2b1d      	cmp	r3, #29
 80031a8:	d001      	beq.n	80031ae <__sflush_r+0xb2>
 80031aa:	2b16      	cmp	r3, #22
 80031ac:	d101      	bne.n	80031b2 <__sflush_r+0xb6>
 80031ae:	602f      	str	r7, [r5, #0]
 80031b0:	e7b1      	b.n	8003116 <__sflush_r+0x1a>
 80031b2:	89a3      	ldrh	r3, [r4, #12]
 80031b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b8:	81a3      	strh	r3, [r4, #12]
 80031ba:	e7ad      	b.n	8003118 <__sflush_r+0x1c>
 80031bc:	690f      	ldr	r7, [r1, #16]
 80031be:	2f00      	cmp	r7, #0
 80031c0:	d0a9      	beq.n	8003116 <__sflush_r+0x1a>
 80031c2:	0793      	lsls	r3, r2, #30
 80031c4:	680e      	ldr	r6, [r1, #0]
 80031c6:	bf08      	it	eq
 80031c8:	694b      	ldreq	r3, [r1, #20]
 80031ca:	600f      	str	r7, [r1, #0]
 80031cc:	bf18      	it	ne
 80031ce:	2300      	movne	r3, #0
 80031d0:	eba6 0807 	sub.w	r8, r6, r7
 80031d4:	608b      	str	r3, [r1, #8]
 80031d6:	f1b8 0f00 	cmp.w	r8, #0
 80031da:	dd9c      	ble.n	8003116 <__sflush_r+0x1a>
 80031dc:	6a21      	ldr	r1, [r4, #32]
 80031de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031e0:	4643      	mov	r3, r8
 80031e2:	463a      	mov	r2, r7
 80031e4:	4628      	mov	r0, r5
 80031e6:	47b0      	blx	r6
 80031e8:	2800      	cmp	r0, #0
 80031ea:	dc06      	bgt.n	80031fa <__sflush_r+0xfe>
 80031ec:	89a3      	ldrh	r3, [r4, #12]
 80031ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f2:	81a3      	strh	r3, [r4, #12]
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	e78e      	b.n	8003118 <__sflush_r+0x1c>
 80031fa:	4407      	add	r7, r0
 80031fc:	eba8 0800 	sub.w	r8, r8, r0
 8003200:	e7e9      	b.n	80031d6 <__sflush_r+0xda>
 8003202:	bf00      	nop
 8003204:	20400001 	.word	0x20400001

08003208 <_fflush_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	690b      	ldr	r3, [r1, #16]
 800320c:	4605      	mov	r5, r0
 800320e:	460c      	mov	r4, r1
 8003210:	b913      	cbnz	r3, 8003218 <_fflush_r+0x10>
 8003212:	2500      	movs	r5, #0
 8003214:	4628      	mov	r0, r5
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	b118      	cbz	r0, 8003222 <_fflush_r+0x1a>
 800321a:	6983      	ldr	r3, [r0, #24]
 800321c:	b90b      	cbnz	r3, 8003222 <_fflush_r+0x1a>
 800321e:	f000 f887 	bl	8003330 <__sinit>
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <_fflush_r+0x6c>)
 8003224:	429c      	cmp	r4, r3
 8003226:	d11b      	bne.n	8003260 <_fflush_r+0x58>
 8003228:	686c      	ldr	r4, [r5, #4]
 800322a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ef      	beq.n	8003212 <_fflush_r+0xa>
 8003232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003234:	07d0      	lsls	r0, r2, #31
 8003236:	d404      	bmi.n	8003242 <_fflush_r+0x3a>
 8003238:	0599      	lsls	r1, r3, #22
 800323a:	d402      	bmi.n	8003242 <_fflush_r+0x3a>
 800323c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800323e:	f000 f915 	bl	800346c <__retarget_lock_acquire_recursive>
 8003242:	4628      	mov	r0, r5
 8003244:	4621      	mov	r1, r4
 8003246:	f7ff ff59 	bl	80030fc <__sflush_r>
 800324a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800324c:	07da      	lsls	r2, r3, #31
 800324e:	4605      	mov	r5, r0
 8003250:	d4e0      	bmi.n	8003214 <_fflush_r+0xc>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	059b      	lsls	r3, r3, #22
 8003256:	d4dd      	bmi.n	8003214 <_fflush_r+0xc>
 8003258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800325a:	f000 f908 	bl	800346e <__retarget_lock_release_recursive>
 800325e:	e7d9      	b.n	8003214 <_fflush_r+0xc>
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <_fflush_r+0x70>)
 8003262:	429c      	cmp	r4, r3
 8003264:	d101      	bne.n	800326a <_fflush_r+0x62>
 8003266:	68ac      	ldr	r4, [r5, #8]
 8003268:	e7df      	b.n	800322a <_fflush_r+0x22>
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <_fflush_r+0x74>)
 800326c:	429c      	cmp	r4, r3
 800326e:	bf08      	it	eq
 8003270:	68ec      	ldreq	r4, [r5, #12]
 8003272:	e7da      	b.n	800322a <_fflush_r+0x22>
 8003274:	08003ebc 	.word	0x08003ebc
 8003278:	08003edc 	.word	0x08003edc
 800327c:	08003e9c 	.word	0x08003e9c

08003280 <std>:
 8003280:	2300      	movs	r3, #0
 8003282:	b510      	push	{r4, lr}
 8003284:	4604      	mov	r4, r0
 8003286:	e9c0 3300 	strd	r3, r3, [r0]
 800328a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800328e:	6083      	str	r3, [r0, #8]
 8003290:	8181      	strh	r1, [r0, #12]
 8003292:	6643      	str	r3, [r0, #100]	; 0x64
 8003294:	81c2      	strh	r2, [r0, #14]
 8003296:	6183      	str	r3, [r0, #24]
 8003298:	4619      	mov	r1, r3
 800329a:	2208      	movs	r2, #8
 800329c:	305c      	adds	r0, #92	; 0x5c
 800329e:	f7ff fd11 	bl	8002cc4 <memset>
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <std+0x38>)
 80032a4:	6263      	str	r3, [r4, #36]	; 0x24
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <std+0x3c>)
 80032a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <std+0x40>)
 80032ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <std+0x44>)
 80032b0:	6224      	str	r4, [r4, #32]
 80032b2:	6323      	str	r3, [r4, #48]	; 0x30
 80032b4:	bd10      	pop	{r4, pc}
 80032b6:	bf00      	nop
 80032b8:	08003c99 	.word	0x08003c99
 80032bc:	08003cbb 	.word	0x08003cbb
 80032c0:	08003cf3 	.word	0x08003cf3
 80032c4:	08003d17 	.word	0x08003d17

080032c8 <_cleanup_r>:
 80032c8:	4901      	ldr	r1, [pc, #4]	; (80032d0 <_cleanup_r+0x8>)
 80032ca:	f000 b8af 	b.w	800342c <_fwalk_reent>
 80032ce:	bf00      	nop
 80032d0:	08003209 	.word	0x08003209

080032d4 <__sfmoreglue>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	1e4a      	subs	r2, r1, #1
 80032d8:	2568      	movs	r5, #104	; 0x68
 80032da:	4355      	muls	r5, r2
 80032dc:	460e      	mov	r6, r1
 80032de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032e2:	f000 f981 	bl	80035e8 <_malloc_r>
 80032e6:	4604      	mov	r4, r0
 80032e8:	b140      	cbz	r0, 80032fc <__sfmoreglue+0x28>
 80032ea:	2100      	movs	r1, #0
 80032ec:	e9c0 1600 	strd	r1, r6, [r0]
 80032f0:	300c      	adds	r0, #12
 80032f2:	60a0      	str	r0, [r4, #8]
 80032f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032f8:	f7ff fce4 	bl	8002cc4 <memset>
 80032fc:	4620      	mov	r0, r4
 80032fe:	bd70      	pop	{r4, r5, r6, pc}

08003300 <__sfp_lock_acquire>:
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <__sfp_lock_acquire+0x8>)
 8003302:	f000 b8b3 	b.w	800346c <__retarget_lock_acquire_recursive>
 8003306:	bf00      	nop
 8003308:	20000440 	.word	0x20000440

0800330c <__sfp_lock_release>:
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <__sfp_lock_release+0x8>)
 800330e:	f000 b8ae 	b.w	800346e <__retarget_lock_release_recursive>
 8003312:	bf00      	nop
 8003314:	20000440 	.word	0x20000440

08003318 <__sinit_lock_acquire>:
 8003318:	4801      	ldr	r0, [pc, #4]	; (8003320 <__sinit_lock_acquire+0x8>)
 800331a:	f000 b8a7 	b.w	800346c <__retarget_lock_acquire_recursive>
 800331e:	bf00      	nop
 8003320:	2000043b 	.word	0x2000043b

08003324 <__sinit_lock_release>:
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <__sinit_lock_release+0x8>)
 8003326:	f000 b8a2 	b.w	800346e <__retarget_lock_release_recursive>
 800332a:	bf00      	nop
 800332c:	2000043b 	.word	0x2000043b

08003330 <__sinit>:
 8003330:	b510      	push	{r4, lr}
 8003332:	4604      	mov	r4, r0
 8003334:	f7ff fff0 	bl	8003318 <__sinit_lock_acquire>
 8003338:	69a3      	ldr	r3, [r4, #24]
 800333a:	b11b      	cbz	r3, 8003344 <__sinit+0x14>
 800333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003340:	f7ff bff0 	b.w	8003324 <__sinit_lock_release>
 8003344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003348:	6523      	str	r3, [r4, #80]	; 0x50
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <__sinit+0x68>)
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <__sinit+0x6c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	62a2      	str	r2, [r4, #40]	; 0x28
 8003352:	42a3      	cmp	r3, r4
 8003354:	bf04      	itt	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	61a3      	streq	r3, [r4, #24]
 800335a:	4620      	mov	r0, r4
 800335c:	f000 f820 	bl	80033a0 <__sfp>
 8003360:	6060      	str	r0, [r4, #4]
 8003362:	4620      	mov	r0, r4
 8003364:	f000 f81c 	bl	80033a0 <__sfp>
 8003368:	60a0      	str	r0, [r4, #8]
 800336a:	4620      	mov	r0, r4
 800336c:	f000 f818 	bl	80033a0 <__sfp>
 8003370:	2200      	movs	r2, #0
 8003372:	60e0      	str	r0, [r4, #12]
 8003374:	2104      	movs	r1, #4
 8003376:	6860      	ldr	r0, [r4, #4]
 8003378:	f7ff ff82 	bl	8003280 <std>
 800337c:	68a0      	ldr	r0, [r4, #8]
 800337e:	2201      	movs	r2, #1
 8003380:	2109      	movs	r1, #9
 8003382:	f7ff ff7d 	bl	8003280 <std>
 8003386:	68e0      	ldr	r0, [r4, #12]
 8003388:	2202      	movs	r2, #2
 800338a:	2112      	movs	r1, #18
 800338c:	f7ff ff78 	bl	8003280 <std>
 8003390:	2301      	movs	r3, #1
 8003392:	61a3      	str	r3, [r4, #24]
 8003394:	e7d2      	b.n	800333c <__sinit+0xc>
 8003396:	bf00      	nop
 8003398:	08003e98 	.word	0x08003e98
 800339c:	080032c9 	.word	0x080032c9

080033a0 <__sfp>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	4607      	mov	r7, r0
 80033a4:	f7ff ffac 	bl	8003300 <__sfp_lock_acquire>
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <__sfp+0x84>)
 80033aa:	681e      	ldr	r6, [r3, #0]
 80033ac:	69b3      	ldr	r3, [r6, #24]
 80033ae:	b913      	cbnz	r3, 80033b6 <__sfp+0x16>
 80033b0:	4630      	mov	r0, r6
 80033b2:	f7ff ffbd 	bl	8003330 <__sinit>
 80033b6:	3648      	adds	r6, #72	; 0x48
 80033b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033bc:	3b01      	subs	r3, #1
 80033be:	d503      	bpl.n	80033c8 <__sfp+0x28>
 80033c0:	6833      	ldr	r3, [r6, #0]
 80033c2:	b30b      	cbz	r3, 8003408 <__sfp+0x68>
 80033c4:	6836      	ldr	r6, [r6, #0]
 80033c6:	e7f7      	b.n	80033b8 <__sfp+0x18>
 80033c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033cc:	b9d5      	cbnz	r5, 8003404 <__sfp+0x64>
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <__sfp+0x88>)
 80033d0:	60e3      	str	r3, [r4, #12]
 80033d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033d6:	6665      	str	r5, [r4, #100]	; 0x64
 80033d8:	f000 f847 	bl	800346a <__retarget_lock_init_recursive>
 80033dc:	f7ff ff96 	bl	800330c <__sfp_lock_release>
 80033e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033e8:	6025      	str	r5, [r4, #0]
 80033ea:	61a5      	str	r5, [r4, #24]
 80033ec:	2208      	movs	r2, #8
 80033ee:	4629      	mov	r1, r5
 80033f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033f4:	f7ff fc66 	bl	8002cc4 <memset>
 80033f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003400:	4620      	mov	r0, r4
 8003402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003404:	3468      	adds	r4, #104	; 0x68
 8003406:	e7d9      	b.n	80033bc <__sfp+0x1c>
 8003408:	2104      	movs	r1, #4
 800340a:	4638      	mov	r0, r7
 800340c:	f7ff ff62 	bl	80032d4 <__sfmoreglue>
 8003410:	4604      	mov	r4, r0
 8003412:	6030      	str	r0, [r6, #0]
 8003414:	2800      	cmp	r0, #0
 8003416:	d1d5      	bne.n	80033c4 <__sfp+0x24>
 8003418:	f7ff ff78 	bl	800330c <__sfp_lock_release>
 800341c:	230c      	movs	r3, #12
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	e7ee      	b.n	8003400 <__sfp+0x60>
 8003422:	bf00      	nop
 8003424:	08003e98 	.word	0x08003e98
 8003428:	ffff0001 	.word	0xffff0001

0800342c <_fwalk_reent>:
 800342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003430:	4606      	mov	r6, r0
 8003432:	4688      	mov	r8, r1
 8003434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003438:	2700      	movs	r7, #0
 800343a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800343e:	f1b9 0901 	subs.w	r9, r9, #1
 8003442:	d505      	bpl.n	8003450 <_fwalk_reent+0x24>
 8003444:	6824      	ldr	r4, [r4, #0]
 8003446:	2c00      	cmp	r4, #0
 8003448:	d1f7      	bne.n	800343a <_fwalk_reent+0xe>
 800344a:	4638      	mov	r0, r7
 800344c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003450:	89ab      	ldrh	r3, [r5, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d907      	bls.n	8003466 <_fwalk_reent+0x3a>
 8003456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800345a:	3301      	adds	r3, #1
 800345c:	d003      	beq.n	8003466 <_fwalk_reent+0x3a>
 800345e:	4629      	mov	r1, r5
 8003460:	4630      	mov	r0, r6
 8003462:	47c0      	blx	r8
 8003464:	4307      	orrs	r7, r0
 8003466:	3568      	adds	r5, #104	; 0x68
 8003468:	e7e9      	b.n	800343e <_fwalk_reent+0x12>

0800346a <__retarget_lock_init_recursive>:
 800346a:	4770      	bx	lr

0800346c <__retarget_lock_acquire_recursive>:
 800346c:	4770      	bx	lr

0800346e <__retarget_lock_release_recursive>:
 800346e:	4770      	bx	lr

08003470 <__swhatbuf_r>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	460e      	mov	r6, r1
 8003474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003478:	2900      	cmp	r1, #0
 800347a:	b096      	sub	sp, #88	; 0x58
 800347c:	4614      	mov	r4, r2
 800347e:	461d      	mov	r5, r3
 8003480:	da07      	bge.n	8003492 <__swhatbuf_r+0x22>
 8003482:	2300      	movs	r3, #0
 8003484:	602b      	str	r3, [r5, #0]
 8003486:	89b3      	ldrh	r3, [r6, #12]
 8003488:	061a      	lsls	r2, r3, #24
 800348a:	d410      	bmi.n	80034ae <__swhatbuf_r+0x3e>
 800348c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003490:	e00e      	b.n	80034b0 <__swhatbuf_r+0x40>
 8003492:	466a      	mov	r2, sp
 8003494:	f000 fc66 	bl	8003d64 <_fstat_r>
 8003498:	2800      	cmp	r0, #0
 800349a:	dbf2      	blt.n	8003482 <__swhatbuf_r+0x12>
 800349c:	9a01      	ldr	r2, [sp, #4]
 800349e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034a6:	425a      	negs	r2, r3
 80034a8:	415a      	adcs	r2, r3
 80034aa:	602a      	str	r2, [r5, #0]
 80034ac:	e7ee      	b.n	800348c <__swhatbuf_r+0x1c>
 80034ae:	2340      	movs	r3, #64	; 0x40
 80034b0:	2000      	movs	r0, #0
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	b016      	add	sp, #88	; 0x58
 80034b6:	bd70      	pop	{r4, r5, r6, pc}

080034b8 <__smakebuf_r>:
 80034b8:	898b      	ldrh	r3, [r1, #12]
 80034ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034bc:	079d      	lsls	r5, r3, #30
 80034be:	4606      	mov	r6, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	d507      	bpl.n	80034d4 <__smakebuf_r+0x1c>
 80034c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	2301      	movs	r3, #1
 80034ce:	6163      	str	r3, [r4, #20]
 80034d0:	b002      	add	sp, #8
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	ab01      	add	r3, sp, #4
 80034d6:	466a      	mov	r2, sp
 80034d8:	f7ff ffca 	bl	8003470 <__swhatbuf_r>
 80034dc:	9900      	ldr	r1, [sp, #0]
 80034de:	4605      	mov	r5, r0
 80034e0:	4630      	mov	r0, r6
 80034e2:	f000 f881 	bl	80035e8 <_malloc_r>
 80034e6:	b948      	cbnz	r0, 80034fc <__smakebuf_r+0x44>
 80034e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ec:	059a      	lsls	r2, r3, #22
 80034ee:	d4ef      	bmi.n	80034d0 <__smakebuf_r+0x18>
 80034f0:	f023 0303 	bic.w	r3, r3, #3
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	81a3      	strh	r3, [r4, #12]
 80034fa:	e7e3      	b.n	80034c4 <__smakebuf_r+0xc>
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <__smakebuf_r+0x7c>)
 80034fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	6020      	str	r0, [r4, #0]
 8003504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	9b00      	ldr	r3, [sp, #0]
 800350c:	6163      	str	r3, [r4, #20]
 800350e:	9b01      	ldr	r3, [sp, #4]
 8003510:	6120      	str	r0, [r4, #16]
 8003512:	b15b      	cbz	r3, 800352c <__smakebuf_r+0x74>
 8003514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003518:	4630      	mov	r0, r6
 800351a:	f000 fc35 	bl	8003d88 <_isatty_r>
 800351e:	b128      	cbz	r0, 800352c <__smakebuf_r+0x74>
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	89a0      	ldrh	r0, [r4, #12]
 800352e:	4305      	orrs	r5, r0
 8003530:	81a5      	strh	r5, [r4, #12]
 8003532:	e7cd      	b.n	80034d0 <__smakebuf_r+0x18>
 8003534:	080032c9 	.word	0x080032c9

08003538 <malloc>:
 8003538:	4b02      	ldr	r3, [pc, #8]	; (8003544 <malloc+0xc>)
 800353a:	4601      	mov	r1, r0
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	f000 b853 	b.w	80035e8 <_malloc_r>
 8003542:	bf00      	nop
 8003544:	2000000c 	.word	0x2000000c

08003548 <_free_r>:
 8003548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800354a:	2900      	cmp	r1, #0
 800354c:	d048      	beq.n	80035e0 <_free_r+0x98>
 800354e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003552:	9001      	str	r0, [sp, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f1a1 0404 	sub.w	r4, r1, #4
 800355a:	bfb8      	it	lt
 800355c:	18e4      	addlt	r4, r4, r3
 800355e:	f000 fc35 	bl	8003dcc <__malloc_lock>
 8003562:	4a20      	ldr	r2, [pc, #128]	; (80035e4 <_free_r+0x9c>)
 8003564:	9801      	ldr	r0, [sp, #4]
 8003566:	6813      	ldr	r3, [r2, #0]
 8003568:	4615      	mov	r5, r2
 800356a:	b933      	cbnz	r3, 800357a <_free_r+0x32>
 800356c:	6063      	str	r3, [r4, #4]
 800356e:	6014      	str	r4, [r2, #0]
 8003570:	b003      	add	sp, #12
 8003572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003576:	f000 bc2f 	b.w	8003dd8 <__malloc_unlock>
 800357a:	42a3      	cmp	r3, r4
 800357c:	d90b      	bls.n	8003596 <_free_r+0x4e>
 800357e:	6821      	ldr	r1, [r4, #0]
 8003580:	1862      	adds	r2, r4, r1
 8003582:	4293      	cmp	r3, r2
 8003584:	bf04      	itt	eq
 8003586:	681a      	ldreq	r2, [r3, #0]
 8003588:	685b      	ldreq	r3, [r3, #4]
 800358a:	6063      	str	r3, [r4, #4]
 800358c:	bf04      	itt	eq
 800358e:	1852      	addeq	r2, r2, r1
 8003590:	6022      	streq	r2, [r4, #0]
 8003592:	602c      	str	r4, [r5, #0]
 8003594:	e7ec      	b.n	8003570 <_free_r+0x28>
 8003596:	461a      	mov	r2, r3
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b10b      	cbz	r3, 80035a0 <_free_r+0x58>
 800359c:	42a3      	cmp	r3, r4
 800359e:	d9fa      	bls.n	8003596 <_free_r+0x4e>
 80035a0:	6811      	ldr	r1, [r2, #0]
 80035a2:	1855      	adds	r5, r2, r1
 80035a4:	42a5      	cmp	r5, r4
 80035a6:	d10b      	bne.n	80035c0 <_free_r+0x78>
 80035a8:	6824      	ldr	r4, [r4, #0]
 80035aa:	4421      	add	r1, r4
 80035ac:	1854      	adds	r4, r2, r1
 80035ae:	42a3      	cmp	r3, r4
 80035b0:	6011      	str	r1, [r2, #0]
 80035b2:	d1dd      	bne.n	8003570 <_free_r+0x28>
 80035b4:	681c      	ldr	r4, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	6053      	str	r3, [r2, #4]
 80035ba:	4421      	add	r1, r4
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	e7d7      	b.n	8003570 <_free_r+0x28>
 80035c0:	d902      	bls.n	80035c8 <_free_r+0x80>
 80035c2:	230c      	movs	r3, #12
 80035c4:	6003      	str	r3, [r0, #0]
 80035c6:	e7d3      	b.n	8003570 <_free_r+0x28>
 80035c8:	6825      	ldr	r5, [r4, #0]
 80035ca:	1961      	adds	r1, r4, r5
 80035cc:	428b      	cmp	r3, r1
 80035ce:	bf04      	itt	eq
 80035d0:	6819      	ldreq	r1, [r3, #0]
 80035d2:	685b      	ldreq	r3, [r3, #4]
 80035d4:	6063      	str	r3, [r4, #4]
 80035d6:	bf04      	itt	eq
 80035d8:	1949      	addeq	r1, r1, r5
 80035da:	6021      	streq	r1, [r4, #0]
 80035dc:	6054      	str	r4, [r2, #4]
 80035de:	e7c7      	b.n	8003570 <_free_r+0x28>
 80035e0:	b003      	add	sp, #12
 80035e2:	bd30      	pop	{r4, r5, pc}
 80035e4:	20000090 	.word	0x20000090

080035e8 <_malloc_r>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	1ccd      	adds	r5, r1, #3
 80035ec:	f025 0503 	bic.w	r5, r5, #3
 80035f0:	3508      	adds	r5, #8
 80035f2:	2d0c      	cmp	r5, #12
 80035f4:	bf38      	it	cc
 80035f6:	250c      	movcc	r5, #12
 80035f8:	2d00      	cmp	r5, #0
 80035fa:	4606      	mov	r6, r0
 80035fc:	db01      	blt.n	8003602 <_malloc_r+0x1a>
 80035fe:	42a9      	cmp	r1, r5
 8003600:	d903      	bls.n	800360a <_malloc_r+0x22>
 8003602:	230c      	movs	r3, #12
 8003604:	6033      	str	r3, [r6, #0]
 8003606:	2000      	movs	r0, #0
 8003608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360a:	f000 fbdf 	bl	8003dcc <__malloc_lock>
 800360e:	4921      	ldr	r1, [pc, #132]	; (8003694 <_malloc_r+0xac>)
 8003610:	680a      	ldr	r2, [r1, #0]
 8003612:	4614      	mov	r4, r2
 8003614:	b99c      	cbnz	r4, 800363e <_malloc_r+0x56>
 8003616:	4f20      	ldr	r7, [pc, #128]	; (8003698 <_malloc_r+0xb0>)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b923      	cbnz	r3, 8003626 <_malloc_r+0x3e>
 800361c:	4621      	mov	r1, r4
 800361e:	4630      	mov	r0, r6
 8003620:	f000 fb2a 	bl	8003c78 <_sbrk_r>
 8003624:	6038      	str	r0, [r7, #0]
 8003626:	4629      	mov	r1, r5
 8003628:	4630      	mov	r0, r6
 800362a:	f000 fb25 	bl	8003c78 <_sbrk_r>
 800362e:	1c43      	adds	r3, r0, #1
 8003630:	d123      	bne.n	800367a <_malloc_r+0x92>
 8003632:	230c      	movs	r3, #12
 8003634:	6033      	str	r3, [r6, #0]
 8003636:	4630      	mov	r0, r6
 8003638:	f000 fbce 	bl	8003dd8 <__malloc_unlock>
 800363c:	e7e3      	b.n	8003606 <_malloc_r+0x1e>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	1b5b      	subs	r3, r3, r5
 8003642:	d417      	bmi.n	8003674 <_malloc_r+0x8c>
 8003644:	2b0b      	cmp	r3, #11
 8003646:	d903      	bls.n	8003650 <_malloc_r+0x68>
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	441c      	add	r4, r3
 800364c:	6025      	str	r5, [r4, #0]
 800364e:	e004      	b.n	800365a <_malloc_r+0x72>
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	42a2      	cmp	r2, r4
 8003654:	bf0c      	ite	eq
 8003656:	600b      	streq	r3, [r1, #0]
 8003658:	6053      	strne	r3, [r2, #4]
 800365a:	4630      	mov	r0, r6
 800365c:	f000 fbbc 	bl	8003dd8 <__malloc_unlock>
 8003660:	f104 000b 	add.w	r0, r4, #11
 8003664:	1d23      	adds	r3, r4, #4
 8003666:	f020 0007 	bic.w	r0, r0, #7
 800366a:	1ac2      	subs	r2, r0, r3
 800366c:	d0cc      	beq.n	8003608 <_malloc_r+0x20>
 800366e:	1a1b      	subs	r3, r3, r0
 8003670:	50a3      	str	r3, [r4, r2]
 8003672:	e7c9      	b.n	8003608 <_malloc_r+0x20>
 8003674:	4622      	mov	r2, r4
 8003676:	6864      	ldr	r4, [r4, #4]
 8003678:	e7cc      	b.n	8003614 <_malloc_r+0x2c>
 800367a:	1cc4      	adds	r4, r0, #3
 800367c:	f024 0403 	bic.w	r4, r4, #3
 8003680:	42a0      	cmp	r0, r4
 8003682:	d0e3      	beq.n	800364c <_malloc_r+0x64>
 8003684:	1a21      	subs	r1, r4, r0
 8003686:	4630      	mov	r0, r6
 8003688:	f000 faf6 	bl	8003c78 <_sbrk_r>
 800368c:	3001      	adds	r0, #1
 800368e:	d1dd      	bne.n	800364c <_malloc_r+0x64>
 8003690:	e7cf      	b.n	8003632 <_malloc_r+0x4a>
 8003692:	bf00      	nop
 8003694:	20000090 	.word	0x20000090
 8003698:	20000094 	.word	0x20000094

0800369c <__sfputc_r>:
 800369c:	6893      	ldr	r3, [r2, #8]
 800369e:	3b01      	subs	r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	b410      	push	{r4}
 80036a4:	6093      	str	r3, [r2, #8]
 80036a6:	da08      	bge.n	80036ba <__sfputc_r+0x1e>
 80036a8:	6994      	ldr	r4, [r2, #24]
 80036aa:	42a3      	cmp	r3, r4
 80036ac:	db01      	blt.n	80036b2 <__sfputc_r+0x16>
 80036ae:	290a      	cmp	r1, #10
 80036b0:	d103      	bne.n	80036ba <__sfputc_r+0x1e>
 80036b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036b6:	f7ff bc61 	b.w	8002f7c <__swbuf_r>
 80036ba:	6813      	ldr	r3, [r2, #0]
 80036bc:	1c58      	adds	r0, r3, #1
 80036be:	6010      	str	r0, [r2, #0]
 80036c0:	7019      	strb	r1, [r3, #0]
 80036c2:	4608      	mov	r0, r1
 80036c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <__sfputs_r>:
 80036ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036cc:	4606      	mov	r6, r0
 80036ce:	460f      	mov	r7, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	18d5      	adds	r5, r2, r3
 80036d4:	42ac      	cmp	r4, r5
 80036d6:	d101      	bne.n	80036dc <__sfputs_r+0x12>
 80036d8:	2000      	movs	r0, #0
 80036da:	e007      	b.n	80036ec <__sfputs_r+0x22>
 80036dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e0:	463a      	mov	r2, r7
 80036e2:	4630      	mov	r0, r6
 80036e4:	f7ff ffda 	bl	800369c <__sfputc_r>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d1f3      	bne.n	80036d4 <__sfputs_r+0xa>
 80036ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036f0 <_vfiprintf_r>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	460d      	mov	r5, r1
 80036f6:	b09d      	sub	sp, #116	; 0x74
 80036f8:	4614      	mov	r4, r2
 80036fa:	4698      	mov	r8, r3
 80036fc:	4606      	mov	r6, r0
 80036fe:	b118      	cbz	r0, 8003708 <_vfiprintf_r+0x18>
 8003700:	6983      	ldr	r3, [r0, #24]
 8003702:	b90b      	cbnz	r3, 8003708 <_vfiprintf_r+0x18>
 8003704:	f7ff fe14 	bl	8003330 <__sinit>
 8003708:	4b89      	ldr	r3, [pc, #548]	; (8003930 <_vfiprintf_r+0x240>)
 800370a:	429d      	cmp	r5, r3
 800370c:	d11b      	bne.n	8003746 <_vfiprintf_r+0x56>
 800370e:	6875      	ldr	r5, [r6, #4]
 8003710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003712:	07d9      	lsls	r1, r3, #31
 8003714:	d405      	bmi.n	8003722 <_vfiprintf_r+0x32>
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	059a      	lsls	r2, r3, #22
 800371a:	d402      	bmi.n	8003722 <_vfiprintf_r+0x32>
 800371c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800371e:	f7ff fea5 	bl	800346c <__retarget_lock_acquire_recursive>
 8003722:	89ab      	ldrh	r3, [r5, #12]
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	d501      	bpl.n	800372c <_vfiprintf_r+0x3c>
 8003728:	692b      	ldr	r3, [r5, #16]
 800372a:	b9eb      	cbnz	r3, 8003768 <_vfiprintf_r+0x78>
 800372c:	4629      	mov	r1, r5
 800372e:	4630      	mov	r0, r6
 8003730:	f7ff fc76 	bl	8003020 <__swsetup_r>
 8003734:	b1c0      	cbz	r0, 8003768 <_vfiprintf_r+0x78>
 8003736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003738:	07dc      	lsls	r4, r3, #31
 800373a:	d50e      	bpl.n	800375a <_vfiprintf_r+0x6a>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	b01d      	add	sp, #116	; 0x74
 8003742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003746:	4b7b      	ldr	r3, [pc, #492]	; (8003934 <_vfiprintf_r+0x244>)
 8003748:	429d      	cmp	r5, r3
 800374a:	d101      	bne.n	8003750 <_vfiprintf_r+0x60>
 800374c:	68b5      	ldr	r5, [r6, #8]
 800374e:	e7df      	b.n	8003710 <_vfiprintf_r+0x20>
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <_vfiprintf_r+0x248>)
 8003752:	429d      	cmp	r5, r3
 8003754:	bf08      	it	eq
 8003756:	68f5      	ldreq	r5, [r6, #12]
 8003758:	e7da      	b.n	8003710 <_vfiprintf_r+0x20>
 800375a:	89ab      	ldrh	r3, [r5, #12]
 800375c:	0598      	lsls	r0, r3, #22
 800375e:	d4ed      	bmi.n	800373c <_vfiprintf_r+0x4c>
 8003760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003762:	f7ff fe84 	bl	800346e <__retarget_lock_release_recursive>
 8003766:	e7e9      	b.n	800373c <_vfiprintf_r+0x4c>
 8003768:	2300      	movs	r3, #0
 800376a:	9309      	str	r3, [sp, #36]	; 0x24
 800376c:	2320      	movs	r3, #32
 800376e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003772:	f8cd 800c 	str.w	r8, [sp, #12]
 8003776:	2330      	movs	r3, #48	; 0x30
 8003778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800393c <_vfiprintf_r+0x24c>
 800377c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003780:	f04f 0901 	mov.w	r9, #1
 8003784:	4623      	mov	r3, r4
 8003786:	469a      	mov	sl, r3
 8003788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800378c:	b10a      	cbz	r2, 8003792 <_vfiprintf_r+0xa2>
 800378e:	2a25      	cmp	r2, #37	; 0x25
 8003790:	d1f9      	bne.n	8003786 <_vfiprintf_r+0x96>
 8003792:	ebba 0b04 	subs.w	fp, sl, r4
 8003796:	d00b      	beq.n	80037b0 <_vfiprintf_r+0xc0>
 8003798:	465b      	mov	r3, fp
 800379a:	4622      	mov	r2, r4
 800379c:	4629      	mov	r1, r5
 800379e:	4630      	mov	r0, r6
 80037a0:	f7ff ff93 	bl	80036ca <__sfputs_r>
 80037a4:	3001      	adds	r0, #1
 80037a6:	f000 80aa 	beq.w	80038fe <_vfiprintf_r+0x20e>
 80037aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037ac:	445a      	add	r2, fp
 80037ae:	9209      	str	r2, [sp, #36]	; 0x24
 80037b0:	f89a 3000 	ldrb.w	r3, [sl]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a2 	beq.w	80038fe <_vfiprintf_r+0x20e>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c4:	f10a 0a01 	add.w	sl, sl, #1
 80037c8:	9304      	str	r3, [sp, #16]
 80037ca:	9307      	str	r3, [sp, #28]
 80037cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037d0:	931a      	str	r3, [sp, #104]	; 0x68
 80037d2:	4654      	mov	r4, sl
 80037d4:	2205      	movs	r2, #5
 80037d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037da:	4858      	ldr	r0, [pc, #352]	; (800393c <_vfiprintf_r+0x24c>)
 80037dc:	f7fc fd20 	bl	8000220 <memchr>
 80037e0:	9a04      	ldr	r2, [sp, #16]
 80037e2:	b9d8      	cbnz	r0, 800381c <_vfiprintf_r+0x12c>
 80037e4:	06d1      	lsls	r1, r2, #27
 80037e6:	bf44      	itt	mi
 80037e8:	2320      	movmi	r3, #32
 80037ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ee:	0713      	lsls	r3, r2, #28
 80037f0:	bf44      	itt	mi
 80037f2:	232b      	movmi	r3, #43	; 0x2b
 80037f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f8:	f89a 3000 	ldrb.w	r3, [sl]
 80037fc:	2b2a      	cmp	r3, #42	; 0x2a
 80037fe:	d015      	beq.n	800382c <_vfiprintf_r+0x13c>
 8003800:	9a07      	ldr	r2, [sp, #28]
 8003802:	4654      	mov	r4, sl
 8003804:	2000      	movs	r0, #0
 8003806:	f04f 0c0a 	mov.w	ip, #10
 800380a:	4621      	mov	r1, r4
 800380c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003810:	3b30      	subs	r3, #48	; 0x30
 8003812:	2b09      	cmp	r3, #9
 8003814:	d94e      	bls.n	80038b4 <_vfiprintf_r+0x1c4>
 8003816:	b1b0      	cbz	r0, 8003846 <_vfiprintf_r+0x156>
 8003818:	9207      	str	r2, [sp, #28]
 800381a:	e014      	b.n	8003846 <_vfiprintf_r+0x156>
 800381c:	eba0 0308 	sub.w	r3, r0, r8
 8003820:	fa09 f303 	lsl.w	r3, r9, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	46a2      	mov	sl, r4
 800382a:	e7d2      	b.n	80037d2 <_vfiprintf_r+0xe2>
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	1d19      	adds	r1, r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	9103      	str	r1, [sp, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	bfbb      	ittet	lt
 8003838:	425b      	neglt	r3, r3
 800383a:	f042 0202 	orrlt.w	r2, r2, #2
 800383e:	9307      	strge	r3, [sp, #28]
 8003840:	9307      	strlt	r3, [sp, #28]
 8003842:	bfb8      	it	lt
 8003844:	9204      	strlt	r2, [sp, #16]
 8003846:	7823      	ldrb	r3, [r4, #0]
 8003848:	2b2e      	cmp	r3, #46	; 0x2e
 800384a:	d10c      	bne.n	8003866 <_vfiprintf_r+0x176>
 800384c:	7863      	ldrb	r3, [r4, #1]
 800384e:	2b2a      	cmp	r3, #42	; 0x2a
 8003850:	d135      	bne.n	80038be <_vfiprintf_r+0x1ce>
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	1d1a      	adds	r2, r3, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	9203      	str	r2, [sp, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	bfb8      	it	lt
 800385e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003862:	3402      	adds	r4, #2
 8003864:	9305      	str	r3, [sp, #20]
 8003866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800394c <_vfiprintf_r+0x25c>
 800386a:	7821      	ldrb	r1, [r4, #0]
 800386c:	2203      	movs	r2, #3
 800386e:	4650      	mov	r0, sl
 8003870:	f7fc fcd6 	bl	8000220 <memchr>
 8003874:	b140      	cbz	r0, 8003888 <_vfiprintf_r+0x198>
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	eba0 000a 	sub.w	r0, r0, sl
 800387c:	fa03 f000 	lsl.w	r0, r3, r0
 8003880:	9b04      	ldr	r3, [sp, #16]
 8003882:	4303      	orrs	r3, r0
 8003884:	3401      	adds	r4, #1
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800388c:	482c      	ldr	r0, [pc, #176]	; (8003940 <_vfiprintf_r+0x250>)
 800388e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003892:	2206      	movs	r2, #6
 8003894:	f7fc fcc4 	bl	8000220 <memchr>
 8003898:	2800      	cmp	r0, #0
 800389a:	d03f      	beq.n	800391c <_vfiprintf_r+0x22c>
 800389c:	4b29      	ldr	r3, [pc, #164]	; (8003944 <_vfiprintf_r+0x254>)
 800389e:	bb1b      	cbnz	r3, 80038e8 <_vfiprintf_r+0x1f8>
 80038a0:	9b03      	ldr	r3, [sp, #12]
 80038a2:	3307      	adds	r3, #7
 80038a4:	f023 0307 	bic.w	r3, r3, #7
 80038a8:	3308      	adds	r3, #8
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ae:	443b      	add	r3, r7
 80038b0:	9309      	str	r3, [sp, #36]	; 0x24
 80038b2:	e767      	b.n	8003784 <_vfiprintf_r+0x94>
 80038b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80038b8:	460c      	mov	r4, r1
 80038ba:	2001      	movs	r0, #1
 80038bc:	e7a5      	b.n	800380a <_vfiprintf_r+0x11a>
 80038be:	2300      	movs	r3, #0
 80038c0:	3401      	adds	r4, #1
 80038c2:	9305      	str	r3, [sp, #20]
 80038c4:	4619      	mov	r1, r3
 80038c6:	f04f 0c0a 	mov.w	ip, #10
 80038ca:	4620      	mov	r0, r4
 80038cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038d0:	3a30      	subs	r2, #48	; 0x30
 80038d2:	2a09      	cmp	r2, #9
 80038d4:	d903      	bls.n	80038de <_vfiprintf_r+0x1ee>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0c5      	beq.n	8003866 <_vfiprintf_r+0x176>
 80038da:	9105      	str	r1, [sp, #20]
 80038dc:	e7c3      	b.n	8003866 <_vfiprintf_r+0x176>
 80038de:	fb0c 2101 	mla	r1, ip, r1, r2
 80038e2:	4604      	mov	r4, r0
 80038e4:	2301      	movs	r3, #1
 80038e6:	e7f0      	b.n	80038ca <_vfiprintf_r+0x1da>
 80038e8:	ab03      	add	r3, sp, #12
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	462a      	mov	r2, r5
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <_vfiprintf_r+0x258>)
 80038f0:	a904      	add	r1, sp, #16
 80038f2:	4630      	mov	r0, r6
 80038f4:	f3af 8000 	nop.w
 80038f8:	4607      	mov	r7, r0
 80038fa:	1c78      	adds	r0, r7, #1
 80038fc:	d1d6      	bne.n	80038ac <_vfiprintf_r+0x1bc>
 80038fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003900:	07d9      	lsls	r1, r3, #31
 8003902:	d405      	bmi.n	8003910 <_vfiprintf_r+0x220>
 8003904:	89ab      	ldrh	r3, [r5, #12]
 8003906:	059a      	lsls	r2, r3, #22
 8003908:	d402      	bmi.n	8003910 <_vfiprintf_r+0x220>
 800390a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800390c:	f7ff fdaf 	bl	800346e <__retarget_lock_release_recursive>
 8003910:	89ab      	ldrh	r3, [r5, #12]
 8003912:	065b      	lsls	r3, r3, #25
 8003914:	f53f af12 	bmi.w	800373c <_vfiprintf_r+0x4c>
 8003918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800391a:	e711      	b.n	8003740 <_vfiprintf_r+0x50>
 800391c:	ab03      	add	r3, sp, #12
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	462a      	mov	r2, r5
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <_vfiprintf_r+0x258>)
 8003924:	a904      	add	r1, sp, #16
 8003926:	4630      	mov	r0, r6
 8003928:	f000 f880 	bl	8003a2c <_printf_i>
 800392c:	e7e4      	b.n	80038f8 <_vfiprintf_r+0x208>
 800392e:	bf00      	nop
 8003930:	08003ebc 	.word	0x08003ebc
 8003934:	08003edc 	.word	0x08003edc
 8003938:	08003e9c 	.word	0x08003e9c
 800393c:	08003efc 	.word	0x08003efc
 8003940:	08003f06 	.word	0x08003f06
 8003944:	00000000 	.word	0x00000000
 8003948:	080036cb 	.word	0x080036cb
 800394c:	08003f02 	.word	0x08003f02

08003950 <_printf_common>:
 8003950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003954:	4616      	mov	r6, r2
 8003956:	4699      	mov	r9, r3
 8003958:	688a      	ldr	r2, [r1, #8]
 800395a:	690b      	ldr	r3, [r1, #16]
 800395c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003960:	4293      	cmp	r3, r2
 8003962:	bfb8      	it	lt
 8003964:	4613      	movlt	r3, r2
 8003966:	6033      	str	r3, [r6, #0]
 8003968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800396c:	4607      	mov	r7, r0
 800396e:	460c      	mov	r4, r1
 8003970:	b10a      	cbz	r2, 8003976 <_printf_common+0x26>
 8003972:	3301      	adds	r3, #1
 8003974:	6033      	str	r3, [r6, #0]
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	0699      	lsls	r1, r3, #26
 800397a:	bf42      	ittt	mi
 800397c:	6833      	ldrmi	r3, [r6, #0]
 800397e:	3302      	addmi	r3, #2
 8003980:	6033      	strmi	r3, [r6, #0]
 8003982:	6825      	ldr	r5, [r4, #0]
 8003984:	f015 0506 	ands.w	r5, r5, #6
 8003988:	d106      	bne.n	8003998 <_printf_common+0x48>
 800398a:	f104 0a19 	add.w	sl, r4, #25
 800398e:	68e3      	ldr	r3, [r4, #12]
 8003990:	6832      	ldr	r2, [r6, #0]
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	42ab      	cmp	r3, r5
 8003996:	dc26      	bgt.n	80039e6 <_printf_common+0x96>
 8003998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800399c:	1e13      	subs	r3, r2, #0
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	bf18      	it	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	0692      	lsls	r2, r2, #26
 80039a6:	d42b      	bmi.n	8003a00 <_printf_common+0xb0>
 80039a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ac:	4649      	mov	r1, r9
 80039ae:	4638      	mov	r0, r7
 80039b0:	47c0      	blx	r8
 80039b2:	3001      	adds	r0, #1
 80039b4:	d01e      	beq.n	80039f4 <_printf_common+0xa4>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	68e5      	ldr	r5, [r4, #12]
 80039ba:	6832      	ldr	r2, [r6, #0]
 80039bc:	f003 0306 	and.w	r3, r3, #6
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	bf08      	it	eq
 80039c4:	1aad      	subeq	r5, r5, r2
 80039c6:	68a3      	ldr	r3, [r4, #8]
 80039c8:	6922      	ldr	r2, [r4, #16]
 80039ca:	bf0c      	ite	eq
 80039cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d0:	2500      	movne	r5, #0
 80039d2:	4293      	cmp	r3, r2
 80039d4:	bfc4      	itt	gt
 80039d6:	1a9b      	subgt	r3, r3, r2
 80039d8:	18ed      	addgt	r5, r5, r3
 80039da:	2600      	movs	r6, #0
 80039dc:	341a      	adds	r4, #26
 80039de:	42b5      	cmp	r5, r6
 80039e0:	d11a      	bne.n	8003a18 <_printf_common+0xc8>
 80039e2:	2000      	movs	r0, #0
 80039e4:	e008      	b.n	80039f8 <_printf_common+0xa8>
 80039e6:	2301      	movs	r3, #1
 80039e8:	4652      	mov	r2, sl
 80039ea:	4649      	mov	r1, r9
 80039ec:	4638      	mov	r0, r7
 80039ee:	47c0      	blx	r8
 80039f0:	3001      	adds	r0, #1
 80039f2:	d103      	bne.n	80039fc <_printf_common+0xac>
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fc:	3501      	adds	r5, #1
 80039fe:	e7c6      	b.n	800398e <_printf_common+0x3e>
 8003a00:	18e1      	adds	r1, r4, r3
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	2030      	movs	r0, #48	; 0x30
 8003a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a0a:	4422      	add	r2, r4
 8003a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a14:	3302      	adds	r3, #2
 8003a16:	e7c7      	b.n	80039a8 <_printf_common+0x58>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	4638      	mov	r0, r7
 8003a20:	47c0      	blx	r8
 8003a22:	3001      	adds	r0, #1
 8003a24:	d0e6      	beq.n	80039f4 <_printf_common+0xa4>
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7d9      	b.n	80039de <_printf_common+0x8e>
	...

08003a2c <_printf_i>:
 8003a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a30:	460c      	mov	r4, r1
 8003a32:	4691      	mov	r9, r2
 8003a34:	7e27      	ldrb	r7, [r4, #24]
 8003a36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a38:	2f78      	cmp	r7, #120	; 0x78
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	469a      	mov	sl, r3
 8003a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a42:	d807      	bhi.n	8003a54 <_printf_i+0x28>
 8003a44:	2f62      	cmp	r7, #98	; 0x62
 8003a46:	d80a      	bhi.n	8003a5e <_printf_i+0x32>
 8003a48:	2f00      	cmp	r7, #0
 8003a4a:	f000 80d8 	beq.w	8003bfe <_printf_i+0x1d2>
 8003a4e:	2f58      	cmp	r7, #88	; 0x58
 8003a50:	f000 80a3 	beq.w	8003b9a <_printf_i+0x16e>
 8003a54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a5c:	e03a      	b.n	8003ad4 <_printf_i+0xa8>
 8003a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a62:	2b15      	cmp	r3, #21
 8003a64:	d8f6      	bhi.n	8003a54 <_printf_i+0x28>
 8003a66:	a001      	add	r0, pc, #4	; (adr r0, 8003a6c <_printf_i+0x40>)
 8003a68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a6c:	08003ac5 	.word	0x08003ac5
 8003a70:	08003ad9 	.word	0x08003ad9
 8003a74:	08003a55 	.word	0x08003a55
 8003a78:	08003a55 	.word	0x08003a55
 8003a7c:	08003a55 	.word	0x08003a55
 8003a80:	08003a55 	.word	0x08003a55
 8003a84:	08003ad9 	.word	0x08003ad9
 8003a88:	08003a55 	.word	0x08003a55
 8003a8c:	08003a55 	.word	0x08003a55
 8003a90:	08003a55 	.word	0x08003a55
 8003a94:	08003a55 	.word	0x08003a55
 8003a98:	08003be5 	.word	0x08003be5
 8003a9c:	08003b09 	.word	0x08003b09
 8003aa0:	08003bc7 	.word	0x08003bc7
 8003aa4:	08003a55 	.word	0x08003a55
 8003aa8:	08003a55 	.word	0x08003a55
 8003aac:	08003c07 	.word	0x08003c07
 8003ab0:	08003a55 	.word	0x08003a55
 8003ab4:	08003b09 	.word	0x08003b09
 8003ab8:	08003a55 	.word	0x08003a55
 8003abc:	08003a55 	.word	0x08003a55
 8003ac0:	08003bcf 	.word	0x08003bcf
 8003ac4:	680b      	ldr	r3, [r1, #0]
 8003ac6:	1d1a      	adds	r2, r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	600a      	str	r2, [r1, #0]
 8003acc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0a3      	b.n	8003c20 <_printf_i+0x1f4>
 8003ad8:	6825      	ldr	r5, [r4, #0]
 8003ada:	6808      	ldr	r0, [r1, #0]
 8003adc:	062e      	lsls	r6, r5, #24
 8003ade:	f100 0304 	add.w	r3, r0, #4
 8003ae2:	d50a      	bpl.n	8003afa <_printf_i+0xce>
 8003ae4:	6805      	ldr	r5, [r0, #0]
 8003ae6:	600b      	str	r3, [r1, #0]
 8003ae8:	2d00      	cmp	r5, #0
 8003aea:	da03      	bge.n	8003af4 <_printf_i+0xc8>
 8003aec:	232d      	movs	r3, #45	; 0x2d
 8003aee:	426d      	negs	r5, r5
 8003af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af4:	485e      	ldr	r0, [pc, #376]	; (8003c70 <_printf_i+0x244>)
 8003af6:	230a      	movs	r3, #10
 8003af8:	e019      	b.n	8003b2e <_printf_i+0x102>
 8003afa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003afe:	6805      	ldr	r5, [r0, #0]
 8003b00:	600b      	str	r3, [r1, #0]
 8003b02:	bf18      	it	ne
 8003b04:	b22d      	sxthne	r5, r5
 8003b06:	e7ef      	b.n	8003ae8 <_printf_i+0xbc>
 8003b08:	680b      	ldr	r3, [r1, #0]
 8003b0a:	6825      	ldr	r5, [r4, #0]
 8003b0c:	1d18      	adds	r0, r3, #4
 8003b0e:	6008      	str	r0, [r1, #0]
 8003b10:	0628      	lsls	r0, r5, #24
 8003b12:	d501      	bpl.n	8003b18 <_printf_i+0xec>
 8003b14:	681d      	ldr	r5, [r3, #0]
 8003b16:	e002      	b.n	8003b1e <_printf_i+0xf2>
 8003b18:	0669      	lsls	r1, r5, #25
 8003b1a:	d5fb      	bpl.n	8003b14 <_printf_i+0xe8>
 8003b1c:	881d      	ldrh	r5, [r3, #0]
 8003b1e:	4854      	ldr	r0, [pc, #336]	; (8003c70 <_printf_i+0x244>)
 8003b20:	2f6f      	cmp	r7, #111	; 0x6f
 8003b22:	bf0c      	ite	eq
 8003b24:	2308      	moveq	r3, #8
 8003b26:	230a      	movne	r3, #10
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b2e:	6866      	ldr	r6, [r4, #4]
 8003b30:	60a6      	str	r6, [r4, #8]
 8003b32:	2e00      	cmp	r6, #0
 8003b34:	bfa2      	ittt	ge
 8003b36:	6821      	ldrge	r1, [r4, #0]
 8003b38:	f021 0104 	bicge.w	r1, r1, #4
 8003b3c:	6021      	strge	r1, [r4, #0]
 8003b3e:	b90d      	cbnz	r5, 8003b44 <_printf_i+0x118>
 8003b40:	2e00      	cmp	r6, #0
 8003b42:	d04d      	beq.n	8003be0 <_printf_i+0x1b4>
 8003b44:	4616      	mov	r6, r2
 8003b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8003b4e:	5dc7      	ldrb	r7, [r0, r7]
 8003b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b54:	462f      	mov	r7, r5
 8003b56:	42bb      	cmp	r3, r7
 8003b58:	460d      	mov	r5, r1
 8003b5a:	d9f4      	bls.n	8003b46 <_printf_i+0x11a>
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d10b      	bne.n	8003b78 <_printf_i+0x14c>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	07df      	lsls	r7, r3, #31
 8003b64:	d508      	bpl.n	8003b78 <_printf_i+0x14c>
 8003b66:	6923      	ldr	r3, [r4, #16]
 8003b68:	6861      	ldr	r1, [r4, #4]
 8003b6a:	4299      	cmp	r1, r3
 8003b6c:	bfde      	ittt	le
 8003b6e:	2330      	movle	r3, #48	; 0x30
 8003b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b78:	1b92      	subs	r2, r2, r6
 8003b7a:	6122      	str	r2, [r4, #16]
 8003b7c:	f8cd a000 	str.w	sl, [sp]
 8003b80:	464b      	mov	r3, r9
 8003b82:	aa03      	add	r2, sp, #12
 8003b84:	4621      	mov	r1, r4
 8003b86:	4640      	mov	r0, r8
 8003b88:	f7ff fee2 	bl	8003950 <_printf_common>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d14c      	bne.n	8003c2a <_printf_i+0x1fe>
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	b004      	add	sp, #16
 8003b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9a:	4835      	ldr	r0, [pc, #212]	; (8003c70 <_printf_i+0x244>)
 8003b9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	680e      	ldr	r6, [r1, #0]
 8003ba4:	061f      	lsls	r7, r3, #24
 8003ba6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003baa:	600e      	str	r6, [r1, #0]
 8003bac:	d514      	bpl.n	8003bd8 <_printf_i+0x1ac>
 8003bae:	07d9      	lsls	r1, r3, #31
 8003bb0:	bf44      	itt	mi
 8003bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8003bb6:	6023      	strmi	r3, [r4, #0]
 8003bb8:	b91d      	cbnz	r5, 8003bc2 <_printf_i+0x196>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	f023 0320 	bic.w	r3, r3, #32
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	e7b0      	b.n	8003b28 <_printf_i+0xfc>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	f043 0320 	orr.w	r3, r3, #32
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	2378      	movs	r3, #120	; 0x78
 8003bd0:	4828      	ldr	r0, [pc, #160]	; (8003c74 <_printf_i+0x248>)
 8003bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bd6:	e7e3      	b.n	8003ba0 <_printf_i+0x174>
 8003bd8:	065e      	lsls	r6, r3, #25
 8003bda:	bf48      	it	mi
 8003bdc:	b2ad      	uxthmi	r5, r5
 8003bde:	e7e6      	b.n	8003bae <_printf_i+0x182>
 8003be0:	4616      	mov	r6, r2
 8003be2:	e7bb      	b.n	8003b5c <_printf_i+0x130>
 8003be4:	680b      	ldr	r3, [r1, #0]
 8003be6:	6826      	ldr	r6, [r4, #0]
 8003be8:	6960      	ldr	r0, [r4, #20]
 8003bea:	1d1d      	adds	r5, r3, #4
 8003bec:	600d      	str	r5, [r1, #0]
 8003bee:	0635      	lsls	r5, r6, #24
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	d501      	bpl.n	8003bf8 <_printf_i+0x1cc>
 8003bf4:	6018      	str	r0, [r3, #0]
 8003bf6:	e002      	b.n	8003bfe <_printf_i+0x1d2>
 8003bf8:	0671      	lsls	r1, r6, #25
 8003bfa:	d5fb      	bpl.n	8003bf4 <_printf_i+0x1c8>
 8003bfc:	8018      	strh	r0, [r3, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	6123      	str	r3, [r4, #16]
 8003c02:	4616      	mov	r6, r2
 8003c04:	e7ba      	b.n	8003b7c <_printf_i+0x150>
 8003c06:	680b      	ldr	r3, [r1, #0]
 8003c08:	1d1a      	adds	r2, r3, #4
 8003c0a:	600a      	str	r2, [r1, #0]
 8003c0c:	681e      	ldr	r6, [r3, #0]
 8003c0e:	6862      	ldr	r2, [r4, #4]
 8003c10:	2100      	movs	r1, #0
 8003c12:	4630      	mov	r0, r6
 8003c14:	f7fc fb04 	bl	8000220 <memchr>
 8003c18:	b108      	cbz	r0, 8003c1e <_printf_i+0x1f2>
 8003c1a:	1b80      	subs	r0, r0, r6
 8003c1c:	6060      	str	r0, [r4, #4]
 8003c1e:	6863      	ldr	r3, [r4, #4]
 8003c20:	6123      	str	r3, [r4, #16]
 8003c22:	2300      	movs	r3, #0
 8003c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c28:	e7a8      	b.n	8003b7c <_printf_i+0x150>
 8003c2a:	6923      	ldr	r3, [r4, #16]
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	4649      	mov	r1, r9
 8003c30:	4640      	mov	r0, r8
 8003c32:	47d0      	blx	sl
 8003c34:	3001      	adds	r0, #1
 8003c36:	d0ab      	beq.n	8003b90 <_printf_i+0x164>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	079b      	lsls	r3, r3, #30
 8003c3c:	d413      	bmi.n	8003c66 <_printf_i+0x23a>
 8003c3e:	68e0      	ldr	r0, [r4, #12]
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	4298      	cmp	r0, r3
 8003c44:	bfb8      	it	lt
 8003c46:	4618      	movlt	r0, r3
 8003c48:	e7a4      	b.n	8003b94 <_printf_i+0x168>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	4649      	mov	r1, r9
 8003c50:	4640      	mov	r0, r8
 8003c52:	47d0      	blx	sl
 8003c54:	3001      	adds	r0, #1
 8003c56:	d09b      	beq.n	8003b90 <_printf_i+0x164>
 8003c58:	3501      	adds	r5, #1
 8003c5a:	68e3      	ldr	r3, [r4, #12]
 8003c5c:	9903      	ldr	r1, [sp, #12]
 8003c5e:	1a5b      	subs	r3, r3, r1
 8003c60:	42ab      	cmp	r3, r5
 8003c62:	dcf2      	bgt.n	8003c4a <_printf_i+0x21e>
 8003c64:	e7eb      	b.n	8003c3e <_printf_i+0x212>
 8003c66:	2500      	movs	r5, #0
 8003c68:	f104 0619 	add.w	r6, r4, #25
 8003c6c:	e7f5      	b.n	8003c5a <_printf_i+0x22e>
 8003c6e:	bf00      	nop
 8003c70:	08003f0d 	.word	0x08003f0d
 8003c74:	08003f1e 	.word	0x08003f1e

08003c78 <_sbrk_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d06      	ldr	r5, [pc, #24]	; (8003c94 <_sbrk_r+0x1c>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4604      	mov	r4, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	f7fd f9e4 	bl	8001050 <_sbrk>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_sbrk_r+0x1a>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_sbrk_r+0x1a>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	20000444 	.word	0x20000444

08003c98 <__sread>:
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca0:	f000 f8a0 	bl	8003de4 <_read_r>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	bfab      	itete	ge
 8003ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003caa:	89a3      	ldrhlt	r3, [r4, #12]
 8003cac:	181b      	addge	r3, r3, r0
 8003cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cb2:	bfac      	ite	ge
 8003cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cb6:	81a3      	strhlt	r3, [r4, #12]
 8003cb8:	bd10      	pop	{r4, pc}

08003cba <__swrite>:
 8003cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbe:	461f      	mov	r7, r3
 8003cc0:	898b      	ldrh	r3, [r1, #12]
 8003cc2:	05db      	lsls	r3, r3, #23
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	4616      	mov	r6, r2
 8003cca:	d505      	bpl.n	8003cd8 <__swrite+0x1e>
 8003ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f000 f868 	bl	8003da8 <_lseek_r>
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce2:	81a3      	strh	r3, [r4, #12]
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	4628      	mov	r0, r5
 8003cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cee:	f000 b817 	b.w	8003d20 <_write_r>

08003cf2 <__sseek>:
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfa:	f000 f855 	bl	8003da8 <_lseek_r>
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	bf15      	itete	ne
 8003d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d0e:	81a3      	strheq	r3, [r4, #12]
 8003d10:	bf18      	it	ne
 8003d12:	81a3      	strhne	r3, [r4, #12]
 8003d14:	bd10      	pop	{r4, pc}

08003d16 <__sclose>:
 8003d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1a:	f000 b813 	b.w	8003d44 <_close_r>
	...

08003d20 <_write_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d07      	ldr	r5, [pc, #28]	; (8003d40 <_write_r+0x20>)
 8003d24:	4604      	mov	r4, r0
 8003d26:	4608      	mov	r0, r1
 8003d28:	4611      	mov	r1, r2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	602a      	str	r2, [r5, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f7fd f9ff 	bl	8001132 <_write>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_write_r+0x1e>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_write_r+0x1e>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000444 	.word	0x20000444

08003d44 <_close_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4d06      	ldr	r5, [pc, #24]	; (8003d60 <_close_r+0x1c>)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	602b      	str	r3, [r5, #0]
 8003d50:	f7fd f94a 	bl	8000fe8 <_close>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d102      	bne.n	8003d5e <_close_r+0x1a>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	b103      	cbz	r3, 8003d5e <_close_r+0x1a>
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	20000444 	.word	0x20000444

08003d64 <_fstat_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4d07      	ldr	r5, [pc, #28]	; (8003d84 <_fstat_r+0x20>)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	602b      	str	r3, [r5, #0]
 8003d72:	f7fd f945 	bl	8001000 <_fstat>
 8003d76:	1c43      	adds	r3, r0, #1
 8003d78:	d102      	bne.n	8003d80 <_fstat_r+0x1c>
 8003d7a:	682b      	ldr	r3, [r5, #0]
 8003d7c:	b103      	cbz	r3, 8003d80 <_fstat_r+0x1c>
 8003d7e:	6023      	str	r3, [r4, #0]
 8003d80:	bd38      	pop	{r3, r4, r5, pc}
 8003d82:	bf00      	nop
 8003d84:	20000444 	.word	0x20000444

08003d88 <_isatty_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4d06      	ldr	r5, [pc, #24]	; (8003da4 <_isatty_r+0x1c>)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4604      	mov	r4, r0
 8003d90:	4608      	mov	r0, r1
 8003d92:	602b      	str	r3, [r5, #0]
 8003d94:	f7fd f944 	bl	8001020 <_isatty>
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	d102      	bne.n	8003da2 <_isatty_r+0x1a>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	b103      	cbz	r3, 8003da2 <_isatty_r+0x1a>
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	bd38      	pop	{r3, r4, r5, pc}
 8003da4:	20000444 	.word	0x20000444

08003da8 <_lseek_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4d07      	ldr	r5, [pc, #28]	; (8003dc8 <_lseek_r+0x20>)
 8003dac:	4604      	mov	r4, r0
 8003dae:	4608      	mov	r0, r1
 8003db0:	4611      	mov	r1, r2
 8003db2:	2200      	movs	r2, #0
 8003db4:	602a      	str	r2, [r5, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f7fd f93d 	bl	8001036 <_lseek>
 8003dbc:	1c43      	adds	r3, r0, #1
 8003dbe:	d102      	bne.n	8003dc6 <_lseek_r+0x1e>
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	b103      	cbz	r3, 8003dc6 <_lseek_r+0x1e>
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	20000444 	.word	0x20000444

08003dcc <__malloc_lock>:
 8003dcc:	4801      	ldr	r0, [pc, #4]	; (8003dd4 <__malloc_lock+0x8>)
 8003dce:	f7ff bb4d 	b.w	800346c <__retarget_lock_acquire_recursive>
 8003dd2:	bf00      	nop
 8003dd4:	2000043c 	.word	0x2000043c

08003dd8 <__malloc_unlock>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <__malloc_unlock+0x8>)
 8003dda:	f7ff bb48 	b.w	800346e <__retarget_lock_release_recursive>
 8003dde:	bf00      	nop
 8003de0:	2000043c 	.word	0x2000043c

08003de4 <_read_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	4d07      	ldr	r5, [pc, #28]	; (8003e04 <_read_r+0x20>)
 8003de8:	4604      	mov	r4, r0
 8003dea:	4608      	mov	r0, r1
 8003dec:	4611      	mov	r1, r2
 8003dee:	2200      	movs	r2, #0
 8003df0:	602a      	str	r2, [r5, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f7fd f974 	bl	80010e0 <_read>
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d102      	bne.n	8003e02 <_read_r+0x1e>
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	b103      	cbz	r3, 8003e02 <_read_r+0x1e>
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	bd38      	pop	{r3, r4, r5, pc}
 8003e04:	20000444 	.word	0x20000444

08003e08 <_init>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr

08003e14 <_fini>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr
