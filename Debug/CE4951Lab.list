
CE4951Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af8  08004af8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b00  08004b00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08004b78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004b78  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d045  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2b  00000000  00000000  0002d0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002ef10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e62  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c90a  00000000  00000000  0005324a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0e1a  00000000  00000000  0005fb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013096e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003884  00000000  00000000  001309c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800489c 	.word	0x0800489c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800489c 	.word	0x0800489c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	481d      	ldr	r0, [pc, #116]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005c8:	f001 f8c8 	bl	800175c <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80005d2:	f001 f8ab 	bl	800172c <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d115      	bne.n	8000608 <HAL_TIM_PeriodElapsedCallback+0x50>
		currentState = IDLE;
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005ea:	f001 f8b7 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005f6:	f001 f8b1 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000600:	480e      	ldr	r0, [pc, #56]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000602:	f001 f8ab 	bl	800175c <HAL_GPIO_WritePin>
		currentState = COLLISION;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 8000606:	e014      	b.n	8000632 <HAL_TIM_PeriodElapsedCallback+0x7a>
		currentState = COLLISION;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800060a:	2202      	movs	r2, #2
 800060c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000616:	f001 f8a1 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000622:	f001 f89b 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800062e:	f001 f895 	bl	800175c <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40020400 	.word	0x40020400
 8000640:	40020800 	.word	0x40020800
 8000644:	20000098 	.word	0x20000098

08000648 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9){
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000658:	d117      	bne.n	800068a <HAL_GPIO_EXTI_Callback+0x42>
		currentState = BUSY;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_GPIO_EXTI_Callback+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <HAL_GPIO_EXTI_Callback+0x50>)
 8000668:	f001 f878 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <HAL_GPIO_EXTI_Callback+0x50>)
 8000674:	f001 f872 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <HAL_GPIO_EXTI_Callback+0x50>)
 8000680:	f001 f86c 	bl	800175c <HAL_GPIO_WritePin>
		TIM1->CNT = 0;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_GPIO_EXTI_Callback+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000098 	.word	0x20000098
 8000698:	40020400 	.word	0x40020400
 800069c:	40010000 	.word	0x40010000

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006a4:	b09e      	sub	sp, #120	; 0x78
 80006a6:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f000 fd28 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f9fc 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 fab6 	bl	8000c20 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006b4:	f000 fa64 	bl	8000b80 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006b8:	48ad      	ldr	r0, [pc, #692]	; (8000970 <main+0x2d0>)
 80006ba:	f001 fdb1 	bl	8002220 <HAL_TIM_Base_Start_IT>
  init_usart2(57600,F_CPU);
 80006be:	49ad      	ldr	r1, [pc, #692]	; (8000974 <main+0x2d4>)
 80006c0:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 80006c4:	f000 fc98 	bl	8000ff8 <init_usart2>
  printf("Hello\n");
 80006c8:	48ab      	ldr	r0, [pc, #684]	; (8000978 <main+0x2d8>)
 80006ca:	f002 fb45 	bl	8002d58 <puts>
  char * buffer = malloc(256*sizeof(char));
 80006ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006d2:	f002 fa01 	bl	8002ad8 <malloc>
 80006d6:	4603      	mov	r3, r0
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  uint16_t * output = malloc(2*256*sizeof(char));
 80006da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006de:	f002 f9fb 	bl	8002ad8 <malloc>
 80006e2:	4603      	mov	r3, r0
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int readCount = scanf("%s",buffer);
 80006e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80006e8:	48a4      	ldr	r0, [pc, #656]	; (800097c <main+0x2dc>)
 80006ea:	f002 fb4d 	bl	8002d88 <iscanf>
 80006ee:	62b8      	str	r0, [r7, #40]	; 0x28
	  int length = strlen(buffer);
 80006f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006f2:	f7ff fd8d 	bl	8000210 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
	  //send data
	  if (readCount){
 80006fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0f2      	beq.n	80006e6 <main+0x46>
		  printf("read count: %d, buffer: %s\n", length, buffer);
 8000700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000704:	489e      	ldr	r0, [pc, #632]	; (8000980 <main+0x2e0>)
 8000706:	f002 faa1 	bl	8002c4c <iprintf>
		  for (int i = 0; i < length;i++){
 800070a:	2300      	movs	r3, #0
 800070c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800070e:	e0ac      	b.n	800086a <main+0x1ca>
			  printf("Buffer:"BYTE_TO_BINARY_PATTERN "\n",BYTE_TO_BINARY(*(buffer+i)));
 8000710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b25b      	sxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x82>
 800071e:	2631      	movs	r6, #49	; 0x31
 8000720:	e000      	b.n	8000724 <main+0x84>
 8000722:	2630      	movs	r6, #48	; 0x30
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <main+0x9a>
 8000734:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8000738:	e001      	b.n	800073e <main+0x9e>
 800073a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800073e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <main+0xb4>
 800074e:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8000752:	e001      	b.n	8000758 <main+0xb8>
 8000754:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8000758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f003 0310 	and.w	r3, r3, #16
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <main+0xcc>
 8000768:	2331      	movs	r3, #49	; 0x31
 800076a:	e000      	b.n	800076e <main+0xce>
 800076c:	2330      	movs	r3, #48	; 0x30
 800076e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000772:	440a      	add	r2, r1
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	f002 0208 	and.w	r2, r2, #8
 800077a:	2a00      	cmp	r2, #0
 800077c:	d001      	beq.n	8000782 <main+0xe2>
 800077e:	2231      	movs	r2, #49	; 0x31
 8000780:	e000      	b.n	8000784 <main+0xe4>
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000788:	4401      	add	r1, r0
 800078a:	7809      	ldrb	r1, [r1, #0]
 800078c:	f001 0104 	and.w	r1, r1, #4
 8000790:	2900      	cmp	r1, #0
 8000792:	d001      	beq.n	8000798 <main+0xf8>
 8000794:	2131      	movs	r1, #49	; 0x31
 8000796:	e000      	b.n	800079a <main+0xfa>
 8000798:	2130      	movs	r1, #48	; 0x30
 800079a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800079c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800079e:	4420      	add	r0, r4
 80007a0:	7800      	ldrb	r0, [r0, #0]
 80007a2:	f000 0002 	and.w	r0, r0, #2
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d001      	beq.n	80007ae <main+0x10e>
 80007aa:	2031      	movs	r0, #49	; 0x31
 80007ac:	e000      	b.n	80007b0 <main+0x110>
 80007ae:	2030      	movs	r0, #48	; 0x30
 80007b0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80007b2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80007b4:	442c      	add	r4, r5
 80007b6:	7824      	ldrb	r4, [r4, #0]
 80007b8:	f004 0401 	and.w	r4, r4, #1
 80007bc:	2c00      	cmp	r4, #0
 80007be:	d001      	beq.n	80007c4 <main+0x124>
 80007c0:	2431      	movs	r4, #49	; 0x31
 80007c2:	e000      	b.n	80007c6 <main+0x126>
 80007c4:	2430      	movs	r4, #48	; 0x30
 80007c6:	9404      	str	r4, [sp, #16]
 80007c8:	9003      	str	r0, [sp, #12]
 80007ca:	9102      	str	r1, [sp, #8]
 80007cc:	9201      	str	r2, [sp, #4]
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4673      	mov	r3, lr
 80007d2:	4662      	mov	r2, ip
 80007d4:	4631      	mov	r1, r6
 80007d6:	486b      	ldr	r0, [pc, #428]	; (8000984 <main+0x2e4>)
 80007d8:	f002 fa38 	bl	8002c4c <iprintf>
			  output[i] = 0;
 80007dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007e2:	4413      	add	r3, r2
 80007e4:	2200      	movs	r2, #0
 80007e6:	801a      	strh	r2, [r3, #0]

			  for (int j = 0; j < 8; j++){
 80007e8:	2300      	movs	r3, #0
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80007ec:	e037      	b.n	800085e <main+0x1be>
				  if (buffer[i] & 0b1<<j)
 80007ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007fa:	fa42 f303 	asr.w	r3, r2, r3
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d014      	beq.n	8000830 <main+0x190>
					  output[i] |= 0b01<<((j*2));
 8000806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800080c:	4413      	add	r3, r2
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21a      	sxth	r2, r3
 8000812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	2101      	movs	r1, #1
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b219      	sxth	r1, r3
 8000822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000828:	4413      	add	r3, r2
 800082a:	b28a      	uxth	r2, r1
 800082c:	801a      	strh	r2, [r3, #0]
 800082e:	e013      	b.n	8000858 <main+0x1b8>
				  else
					  output[i] |= 0b10<<((j*2));
 8000830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000836:	4413      	add	r3, r2
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	b21a      	sxth	r2, r3
 800083c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2102      	movs	r1, #2
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b219      	sxth	r1, r3
 800084c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000852:	4413      	add	r3, r2
 8000854:	b28a      	uxth	r2, r1
 8000856:	801a      	strh	r2, [r3, #0]
			  for (int j = 0; j < 8; j++){
 8000858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800085a:	3301      	adds	r3, #1
 800085c:	63bb      	str	r3, [r7, #56]	; 0x38
 800085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000860:	2b07      	cmp	r3, #7
 8000862:	ddc4      	ble.n	80007ee <main+0x14e>
		  for (int i = 0; i < length;i++){
 8000864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000866:	3301      	adds	r3, #1
 8000868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800086a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	429a      	cmp	r2, r3
 8000870:	f6ff af4e 	blt.w	8000710 <main+0x70>

			  }
		  }
		  for (int i = 0; i < length;i++){
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
 8000878:	e10d      	b.n	8000a96 <main+0x3f6>
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 800087a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000880:	4413      	add	r3, r2
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	b29b      	uxth	r3, r3
 8000888:	f003 0380 	and.w	r3, r3, #128	; 0x80
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <main+0x1f6>
 8000890:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8000894:	e001      	b.n	800089a <main+0x1fa>
 8000896:	f04f 0c30 	mov.w	ip, #48	; 0x30
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008a0:	4413      	add	r3, r2
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <main+0x216>
 80008b0:	f04f 0e31 	mov.w	lr, #49	; 0x31
 80008b4:	e001      	b.n	80008ba <main+0x21a>
 80008b6:	f04f 0e30 	mov.w	lr, #48	; 0x30
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 80008ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c0:	4413      	add	r3, r2
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	f003 0320 	and.w	r3, r3, #32
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <main+0x236>
 80008d0:	f04f 0831 	mov.w	r8, #49	; 0x31
 80008d4:	e001      	b.n	80008da <main+0x23a>
 80008d6:	f04f 0830 	mov.w	r8, #48	; 0x30
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 80008da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008e0:	4413      	add	r3, r2
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	f003 0310 	and.w	r3, r3, #16
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <main+0x254>
 80008f0:	2531      	movs	r5, #49	; 0x31
 80008f2:	e000      	b.n	80008f6 <main+0x256>
 80008f4:	2530      	movs	r5, #48	; 0x30
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 80008f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008fc:	4413      	add	r3, r2
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	b29b      	uxth	r3, r3
 8000904:	f003 0308 	and.w	r3, r3, #8
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <main+0x270>
 800090c:	2631      	movs	r6, #49	; 0x31
 800090e:	e000      	b.n	8000912 <main+0x272>
 8000910:	2630      	movs	r6, #48	; 0x30
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 8000912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000918:	4413      	add	r3, r2
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	b29b      	uxth	r3, r3
 8000920:	f003 0304 	and.w	r3, r3, #4
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <main+0x28e>
 8000928:	2331      	movs	r3, #49	; 0x31
 800092a:	61fb      	str	r3, [r7, #28]
 800092c:	e001      	b.n	8000932 <main+0x292>
 800092e:	2330      	movs	r3, #48	; 0x30
 8000930:	61fb      	str	r3, [r7, #28]
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 8000932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000938:	4413      	add	r3, r2
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	b29b      	uxth	r3, r3
 8000940:	f003 0302 	and.w	r3, r3, #2
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <main+0x2ae>
 8000948:	2331      	movs	r3, #49	; 0x31
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	e001      	b.n	8000952 <main+0x2b2>
 800094e:	2330      	movs	r3, #48	; 0x30
 8000950:	61bb      	str	r3, [r7, #24]
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 8000952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000958:	4413      	add	r3, r2
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	f003 0301 	and.w	r3, r3, #1
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00f      	beq.n	8000988 <main+0x2e8>
 8000968:	2331      	movs	r3, #49	; 0x31
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e00e      	b.n	800098c <main+0x2ec>
 800096e:	bf00      	nop
 8000970:	2000009c 	.word	0x2000009c
 8000974:	0280de80 	.word	0x0280de80
 8000978:	080048b4 	.word	0x080048b4
 800097c:	080048bc 	.word	0x080048bc
 8000980:	080048c0 	.word	0x080048c0
 8000984:	080048dc 	.word	0x080048dc
 8000988:	2330      	movs	r3, #48	; 0x30
 800098a:	617b      	str	r3, [r7, #20]
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 800098c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000992:	4413      	add	r3, r2
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <main+0x304>
 800099e:	2331      	movs	r3, #49	; 0x31
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	e001      	b.n	80009a8 <main+0x308>
 80009a4:	2330      	movs	r3, #48	; 0x30
 80009a6:	613b      	str	r3, [r7, #16]
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 80009a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ae:	4413      	add	r3, r2
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <main+0x320>
 80009ba:	2331      	movs	r3, #49	; 0x31
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e001      	b.n	80009c4 <main+0x324>
 80009c0:	2330      	movs	r3, #48	; 0x30
 80009c2:	60fb      	str	r3, [r7, #12]
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 80009c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ca:	4413      	add	r3, r2
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	f003 0320 	and.w	r3, r3, #32
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <main+0x33c>
 80009d6:	2331      	movs	r3, #49	; 0x31
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	e001      	b.n	80009e0 <main+0x340>
 80009dc:	2330      	movs	r3, #48	; 0x30
 80009de:	60bb      	str	r3, [r7, #8]
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 80009e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009e6:	4413      	add	r3, r2
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	f003 0310 	and.w	r3, r3, #16
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <main+0x358>
 80009f2:	2331      	movs	r3, #49	; 0x31
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	e001      	b.n	80009fc <main+0x35c>
 80009f8:	2330      	movs	r3, #48	; 0x30
 80009fa:	607b      	str	r3, [r7, #4]
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 80009fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a02:	4413      	add	r3, r2
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	f003 0308 	and.w	r3, r3, #8
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <main+0x372>
 8000a0e:	2431      	movs	r4, #49	; 0x31
 8000a10:	e000      	b.n	8000a14 <main+0x374>
 8000a12:	2430      	movs	r4, #48	; 0x30
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 8000a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a16:	005a      	lsls	r2, r3, #1
 8000a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1a:	4413      	add	r3, r2
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	f003 0304 	and.w	r3, r3, #4
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <main+0x38a>
 8000a26:	2031      	movs	r0, #49	; 0x31
 8000a28:	e000      	b.n	8000a2c <main+0x38c>
 8000a2a:	2030      	movs	r0, #48	; 0x30
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a32:	4413      	add	r3, r2
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	f003 0302 	and.w	r3, r3, #2
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <main+0x3a2>
 8000a3e:	2131      	movs	r1, #49	; 0x31
 8000a40:	e000      	b.n	8000a44 <main+0x3a4>
 8000a42:	2130      	movs	r1, #48	; 0x30
						  BYTE_TO_BINARY(*(output+i)>>8),BYTE_TO_BINARY(*(output+i)));
 8000a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a46:	005a      	lsls	r2, r3, #1
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	4413      	add	r3, r2
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
				  printf("Manchester:"BYTE_TO_BINARY_PATTERN BYTE_TO_BINARY_PATTERN "\n",
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <main+0x3ba>
 8000a56:	2331      	movs	r3, #49	; 0x31
 8000a58:	e000      	b.n	8000a5c <main+0x3bc>
 8000a5a:	2330      	movs	r3, #48	; 0x30
 8000a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8000a5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8000a60:	900a      	str	r0, [sp, #40]	; 0x28
 8000a62:	9409      	str	r4, [sp, #36]	; 0x24
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	9308      	str	r3, [sp, #32]
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	9307      	str	r3, [sp, #28]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	9306      	str	r3, [sp, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	9305      	str	r3, [sp, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	9304      	str	r3, [sp, #16]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	9303      	str	r3, [sp, #12]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	9601      	str	r6, [sp, #4]
 8000a82:	9500      	str	r5, [sp, #0]
 8000a84:	4643      	mov	r3, r8
 8000a86:	4672      	mov	r2, lr
 8000a88:	4661      	mov	r1, ip
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <main+0x404>)
 8000a8c:	f002 f8de 	bl	8002c4c <iprintf>
		  for (int i = 0; i < length;i++){
 8000a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a92:	3301      	adds	r3, #1
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
 8000a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	f6ff aeed 	blt.w	800087a <main+0x1da>
  {
 8000aa0:	e621      	b.n	80006e6 <main+0x46>
 8000aa2:	bf00      	nop
 8000aa4:	080048f8 	.word	0x080048f8

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	; 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2234      	movs	r2, #52	; 0x34
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 f816 	bl	8002ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <SystemClock_Config+0xd0>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a28      	ldr	r2, [pc, #160]	; (8000b78 <SystemClock_Config+0xd0>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <SystemClock_Config+0xd0>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SystemClock_Config+0xd4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <SystemClock_Config+0xd4>)
 8000af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemClock_Config+0xd4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b1c:	23a8      	movs	r3, #168	; 0xa8
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 f887 	bl	8001c44 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b3c:	f000 f8cc 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	230f      	movs	r3, #15
 8000b42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	2105      	movs	r1, #5
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fe2e 	bl	80017c0 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b6a:	f000 f8b5 	bl	8000cd8 <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3750      	adds	r7, #80	; 0x50
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000

08000b80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <MX_TIM1_Init+0x9c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000ba4:	2254      	movs	r2, #84	; 0x54
 8000ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2200;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bb0:	f640 0298 	movw	r2, #2200	; 0x898
 8000bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000bca:	f001 fad9 	bl	8002180 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f000 f880 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000be6:	f001 fc93 	bl	8002510 <HAL_TIM_ConfigClockSource>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000bf0:	f000 f872 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_TIM1_Init+0x98>)
 8000c02:	f001 feaf 	bl	8002964 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c0c:	f000 f864 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000009c 	.word	0x2000009c
 8000c1c:	40010000 	.word	0x40010000

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <MX_GPIO_Init+0xac>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <MX_GPIO_Init+0xac>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_GPIO_Init+0xac>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_GPIO_Init+0xac>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_GPIO_Init+0xac>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_GPIO_Init+0xac>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <MX_GPIO_Init+0xb0>)
 8000c76:	f000 fd71 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c7a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4619      	mov	r1, r3
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <MX_GPIO_Init+0xb0>)
 8000c94:	f000 fbb6 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c9e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000cb0:	f000 fba8 	bl	8001404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2017      	movs	r0, #23
 8000cba:	f000 fb6c 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cbe:	2017      	movs	r0, #23
 8000cc0:	f000 fb85 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40020800 	.word	0x40020800

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d115      	bne.n	8000d72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_TIM_Base_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <HAL_TIM_Base_MspInit+0x4c>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_TIM_Base_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2019      	movs	r0, #25
 8000d68:	f000 fb15 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d6c:	2019      	movs	r0, #25
 8000d6e:	f000 fb2e 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	40023800 	.word	0x40023800

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f9e6 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000ddc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000de0:	f000 fcd6 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dee:	f001 fa87 	bl	8002300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000009c 	.word	0x2000009c

08000dfc <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	return -1;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e24:	605a      	str	r2, [r3, #4]
	return 0;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_isatty>:

int _isatty(int file)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	return 1;
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
	return 0;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f001 fdf6 	bl	8002a84 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20020000 	.word	0x20020000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	2000008c 	.word	0x2000008c
 8000ecc:	200000f8 	.word	0x200000f8

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e012      	b.n	8000f30 <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 8000f10:	f000 f836 	bl	8000f80 <usart2_getch>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b0a      	cmp	r3, #10
 8000f22:	d00a      	beq.n	8000f3a <_read+0x46>
		ptr++;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbe8      	blt.n	8000f0a <_read+0x16>
 8000f38:	e000      	b.n	8000f3c <_read+0x48>
		if(*ptr == '\n') break;
 8000f3a:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 8000f3c:	693b      	ldr	r3, [r7, #16]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_write>:

int _write(int file, char *ptr, int len)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e009      	b.n	8000f6c <_write+0x26>
	{
		usart2_putch(*ptr++);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f82f 	bl	8000fc4 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf1      	blt.n	8000f58 <_write+0x12>
	}
	return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <usart2_getch>:



char usart2_getch(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 8000f86:	bf00      	nop
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <usart2_getch+0x3c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0320 	and.w	r3, r3, #32
 8000f90:	2b20      	cmp	r3, #32
 8000f92:	d1f9      	bne.n	8000f88 <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <usart2_getch+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f811 	bl	8000fc4 <usart2_putch>

	if (c == '\r'){  // If character is CR
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d104      	bne.n	8000fb2 <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f000 f80b 	bl	8000fc4 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 8000fae:	230a      	movs	r3, #10
 8000fb0:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40004400 	.word	0x40004400
 8000fc0:	40004404 	.word	0x40004404

08000fc4 <usart2_putch>:

void usart2_putch(char c){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 8000fce:	bf00      	nop
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <usart2_putch+0x2c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd8:	2b80      	cmp	r3, #128	; 0x80
 8000fda:	d1f9      	bne.n	8000fd0 <usart2_putch+0xc>
	*(USART_DR) = c;
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <usart2_putch+0x30>)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40004404 	.word	0x40004404

08000ff8 <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	// Enable clocks for GPIOA and USART2
	*(RCC_AHB1ENR) |= (1<<GPIOAEN);
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <init_usart2+0x8c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <init_usart2+0x8c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]
	*(RCC_APB1ENR) |= (1<<USART2EN);
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <init_usart2+0x90>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <init_usart2+0x90>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	6013      	str	r3, [r2, #0]

	// Function 7 of PORTA pins is USART
	*(GPIOA_AFRL) &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <init_usart2+0x94>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <init_usart2+0x94>)
 8001020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001024:	6013      	str	r3, [r2, #0]
	*(GPIOA_AFRL) |= (0b01110111<<8);  // Choose function 7 for both PA3 and PA2
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <init_usart2+0x94>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a18      	ldr	r2, [pc, #96]	; (800108c <init_usart2+0x94>)
 800102c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001030:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) &= (0xFFFFFF0F);  // Clear mode bits for PA3 and PA2
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <init_usart2+0x98>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <init_usart2+0x98>)
 8001038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800103c:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) |= (0b1010<<4);  // Both PA3 and PA2 in alt function mode
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <init_usart2+0x98>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <init_usart2+0x98>)
 8001044:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001048:	6013      	str	r3, [r2, #0]
	//USART2_init();  //8n1 no flow control
	// over8 = 0..oversample by 16
	// M = 0..1 start bit, data size is 8, 1 stop bit
	// PCE= 0..Parity check not enabled
	// no interrupts... using polling
	*(USART_CR1) = (1<<UE)|(1<<TE)|(1<<RE); // Enable UART, Tx and Rx
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <init_usart2+0x9c>)
 800104c:	f242 020c 	movw	r2, #8204	; 0x200c
 8001050:	601a      	str	r2, [r3, #0]
	*(USART_CR2) = 0;  // This is the default, but do it anyway
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <init_usart2+0xa0>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(USART_CR3) = 0;  // This is the default, but do it anyway
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <init_usart2+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
	*(USART_BRR) = sysclk/baud;
 800105e:	4910      	ldr	r1, [pc, #64]	; (80010a0 <init_usart2+0xa8>)
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
 8001068:	600b      	str	r3, [r1, #0]

	/* I'm not sure if this is needed for standard IO*/
	 //setvbuf(stderr, NULL, _IONBF, 0);
	 //setvbuf(stdin, NULL, _IONBF, 0);
	 setvbuf(stdout, NULL, _IONBF, 0);
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <init_usart2+0xac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6898      	ldr	r0, [r3, #8]
 8001070:	2300      	movs	r3, #0
 8001072:	2202      	movs	r2, #2
 8001074:	2100      	movs	r1, #0
 8001076:	f001 fe9f 	bl	8002db8 <setvbuf>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023830 	.word	0x40023830
 8001088:	40023840 	.word	0x40023840
 800108c:	40020020 	.word	0x40020020
 8001090:	40020000 	.word	0x40020000
 8001094:	4000440c 	.word	0x4000440c
 8001098:	40004410 	.word	0x40004410
 800109c:	40004414 	.word	0x40004414
 80010a0:	40004408 	.word	0x40004408
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c4:	4c0b      	ldr	r4, [pc, #44]	; (80010f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010d2:	f7ff fefd 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f001 fcdb 	bl	8002a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fae1 	bl	80006a0 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010ec:	08004b08 	.word	0x08004b08
  ldr r2, =_sbss
 80010f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010f4:	200000f8 	.word	0x200000f8

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f92b 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fdd8 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f943 	bl	80013ea <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f90b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	200000e4 	.word	0x200000e4

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200000e4 	.word	0x200000e4

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e165      	b.n	80016ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8154 	bne.w	80016e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d005      	beq.n	8001456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	2b02      	cmp	r3, #2
 8001454:	d130      	bne.n	80014b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d017      	beq.n	80014f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80ae 	beq.w	80016e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a5c      	ldr	r2, [pc, #368]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_GPIO_Init+0x300>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_GPIO_Init+0x304>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_GPIO_Init+0x308>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x21a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <HAL_GPIO_Init+0x30c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x216>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_GPIO_Init+0x310>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x212>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_GPIO_Init+0x314>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x20e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	; (800171c <HAL_GPIO_Init+0x318>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x20a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4a      	ldr	r2, [pc, #296]	; (8001720 <HAL_GPIO_Init+0x31c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x206>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a49      	ldr	r2, [pc, #292]	; (8001724 <HAL_GPIO_Init+0x320>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x202>
 8001602:	2306      	movs	r3, #6
 8001604:	e00c      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001606:	2307      	movs	r3, #7
 8001608:	e00a      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800160a:	2305      	movs	r3, #5
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800160e:	2304      	movs	r3, #4
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	; (8001708 <HAL_GPIO_Init+0x304>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_GPIO_Init+0x324>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168c:	4a26      	ldr	r2, [pc, #152]	; (8001728 <HAL_GPIO_Init+0x324>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f ae96 	bls.w	8001420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40021400 	.word	0x40021400
 8001724:	40021800 	.word	0x40021800
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e001      	b.n	800174e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe ff4a 	bl	8000648 <HAL_GPIO_EXTI_Callback>
  }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40013c00 	.word	0x40013c00

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0cc      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d90c      	bls.n	80017fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001814:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800182c:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	494d      	ldr	r1, [pc, #308]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d044      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e067      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4934      	ldr	r1, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fc8a 	bl	80011c8 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fc86 	bl	80011c8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e032      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4916      	ldr	r1, [pc, #88]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	490e      	ldr	r1, [pc, #56]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001946:	f000 f821 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	490a      	ldr	r1, [pc, #40]	; (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fbea 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	08004934 	.word	0x08004934
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001990:	b087      	sub	sp, #28
 8001992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001994:	2600      	movs	r6, #0
 8001996:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001998:	2600      	movs	r6, #0
 800199a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 800199c:	2600      	movs	r6, #0
 800199e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80019a0:	2600      	movs	r6, #0
 80019a2:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019a4:	2600      	movs	r6, #0
 80019a6:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a8:	4ea3      	ldr	r6, [pc, #652]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80019aa:	68b6      	ldr	r6, [r6, #8]
 80019ac:	f006 060c 	and.w	r6, r6, #12
 80019b0:	2e0c      	cmp	r6, #12
 80019b2:	f200 8137 	bhi.w	8001c24 <HAL_RCC_GetSysClockFreq+0x298>
 80019b6:	f20f 0c08 	addw	ip, pc, #8
 80019ba:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80019be:	bf00      	nop
 80019c0:	080019f5 	.word	0x080019f5
 80019c4:	08001c25 	.word	0x08001c25
 80019c8:	08001c25 	.word	0x08001c25
 80019cc:	08001c25 	.word	0x08001c25
 80019d0:	080019fb 	.word	0x080019fb
 80019d4:	08001c25 	.word	0x08001c25
 80019d8:	08001c25 	.word	0x08001c25
 80019dc:	08001c25 	.word	0x08001c25
 80019e0:	08001a01 	.word	0x08001a01
 80019e4:	08001c25 	.word	0x08001c25
 80019e8:	08001c25 	.word	0x08001c25
 80019ec:	08001c25 	.word	0x08001c25
 80019f0:	08001b17 	.word	0x08001b17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b91      	ldr	r3, [pc, #580]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x2b0>)
 80019f6:	613b      	str	r3, [r7, #16]
       break;
 80019f8:	e117      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019fa:	4b91      	ldr	r3, [pc, #580]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80019fc:	613b      	str	r3, [r7, #16]
      break;
 80019fe:	e114      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a00:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a08:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0a:	4b8b      	ldr	r3, [pc, #556]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d024      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a26:	f04f 0500 	mov.w	r5, #0
 8001a2a:	ea02 0004 	and.w	r0, r2, r4
 8001a2e:	ea03 0105 	and.w	r1, r3, r5
 8001a32:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001a34:	fb03 f201 	mul.w	r2, r3, r1
 8001a38:	2300      	movs	r3, #0
 8001a3a:	fb03 f300 	mul.w	r3, r3, r0
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a7f      	ldr	r2, [pc, #508]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001a42:	fba0 0102 	umull	r0, r1, r0, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	f7fe fc35 	bl	80002c0 <__aeabi_uldivmod>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e04c      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a60:	4b75      	ldr	r3, [pc, #468]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	461a      	mov	r2, r3
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	ea02 0800 	and.w	r8, r2, r0
 8001a78:	ea03 0901 	and.w	r9, r3, r1
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	4649      	mov	r1, r9
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	014b      	lsls	r3, r1, #5
 8001a8a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a8e:	0142      	lsls	r2, r0, #5
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	ebb0 0008 	subs.w	r0, r0, r8
 8001a98:	eb61 0109 	sbc.w	r1, r1, r9
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	018b      	lsls	r3, r1, #6
 8001aa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aaa:	0182      	lsls	r2, r0, #6
 8001aac:	1a12      	subs	r2, r2, r0
 8001aae:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	00d9      	lsls	r1, r3, #3
 8001abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ac0:	00d0      	lsls	r0, r2, #3
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	eb12 0208 	adds.w	r2, r2, r8
 8001aca:	eb43 0309 	adc.w	r3, r3, r9
 8001ace:	f04f 0000 	mov.w	r0, #0
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	0299      	lsls	r1, r3, #10
 8001ad8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001adc:	0290      	lsls	r0, r2, #10
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	f7fe fbe7 	bl	80002c0 <__aeabi_uldivmod>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4613      	mov	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001afa:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0c1b      	lsrs	r3, r3, #16
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	3301      	adds	r3, #1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	613b      	str	r3, [r7, #16]
      break;
 8001b14:	e089      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b16:	4948      	ldr	r1, [pc, #288]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b18:	6849      	ldr	r1, [r1, #4]
 8001b1a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001b1e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b20:	4945      	ldr	r1, [pc, #276]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b22:	6849      	ldr	r1, [r1, #4]
 8001b24:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001b28:	2900      	cmp	r1, #0
 8001b2a:	d024      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2c:	4942      	ldr	r1, [pc, #264]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b2e:	6849      	ldr	r1, [r1, #4]
 8001b30:	0989      	lsrs	r1, r1, #6
 8001b32:	4608      	mov	r0, r1
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001b3c:	f04f 0500 	mov.w	r5, #0
 8001b40:	ea00 0204 	and.w	r2, r0, r4
 8001b44:	ea01 0305 	and.w	r3, r1, r5
 8001b48:	493d      	ldr	r1, [pc, #244]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001b4a:	fb01 f003 	mul.w	r0, r1, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	fb01 f102 	mul.w	r1, r1, r2
 8001b54:	1844      	adds	r4, r0, r1
 8001b56:	493a      	ldr	r1, [pc, #232]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001b58:	fba2 0101 	umull	r0, r1, r2, r1
 8001b5c:	1863      	adds	r3, r4, r1
 8001b5e:	4619      	mov	r1, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	f7fe fbaa 	bl	80002c0 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e04a      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b86:	f04f 0100 	mov.w	r1, #0
 8001b8a:	ea02 0400 	and.w	r4, r2, r0
 8001b8e:	ea03 0501 	and.w	r5, r3, r1
 8001b92:	4620      	mov	r0, r4
 8001b94:	4629      	mov	r1, r5
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	014b      	lsls	r3, r1, #5
 8001ba0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba4:	0142      	lsls	r2, r0, #5
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	1b00      	subs	r0, r0, r4
 8001bac:	eb61 0105 	sbc.w	r1, r1, r5
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	018b      	lsls	r3, r1, #6
 8001bba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bbe:	0182      	lsls	r2, r0, #6
 8001bc0:	1a12      	subs	r2, r2, r0
 8001bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc6:	f04f 0000 	mov.w	r0, #0
 8001bca:	f04f 0100 	mov.w	r1, #0
 8001bce:	00d9      	lsls	r1, r3, #3
 8001bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd4:	00d0      	lsls	r0, r2, #3
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	1912      	adds	r2, r2, r4
 8001bdc:	eb45 0303 	adc.w	r3, r5, r3
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0299      	lsls	r1, r3, #10
 8001bea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bee:	0290      	lsls	r0, r2, #10
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	f7fe fb5e 	bl	80002c0 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0f1b      	lsrs	r3, r3, #28
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	613b      	str	r3, [r7, #16]
      break;
 8001c22:	e002      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001c26:	613b      	str	r3, [r7, #16]
      break;
 8001c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2a:	693b      	ldr	r3, [r7, #16]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	017d7840 	.word	0x017d7840

08001c44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e28d      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8083 	beq.w	8001d6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c64:	4b94      	ldr	r3, [pc, #592]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d019      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c70:	4b91      	ldr	r3, [pc, #580]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c7c:	4b8e      	ldr	r3, [pc, #568]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c88:	d00c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d112      	bne.n	8001cbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c96:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	4b84      	ldr	r3, [pc, #528]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05b      	beq.n	8001d68 <HAL_RCC_OscConfig+0x124>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d157      	bne.n	8001d68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e25a      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x90>
 8001cc6:	4b7c      	ldr	r3, [pc, #496]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7b      	ldr	r2, [pc, #492]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0xcc>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xb4>
 8001cde:	4b76      	ldr	r3, [pc, #472]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a75      	ldr	r2, [pc, #468]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a72      	ldr	r2, [pc, #456]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xcc>
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b6c      	ldr	r3, [pc, #432]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6b      	ldr	r2, [pc, #428]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff fa56 	bl	80011c8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff fa52 	bl	80011c8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e21f      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0xdc>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff fa42 	bl	80011c8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff fa3e 	bl	80011c8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e20b      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	4b57      	ldr	r3, [pc, #348]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x104>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d06f      	beq.n	8001e56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d76:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d017      	beq.n	8001db2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d82:	4b4d      	ldr	r3, [pc, #308]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d105      	bne.n	8001d9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d8e:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00b      	beq.n	8001db2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d11c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d116      	bne.n	8001de0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_RCC_OscConfig+0x186>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e1d3      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4937      	ldr	r1, [pc, #220]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	e03a      	b.n	8001e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de8:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <HAL_RCC_OscConfig+0x278>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7ff f9eb 	bl	80011c8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df6:	f7ff f9e7 	bl	80011c8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e1b4      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4925      	ldr	r1, [pc, #148]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e015      	b.n	8001e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_OscConfig+0x278>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff f9ca 	bl	80011c8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e38:	f7ff f9c6 	bl	80011c8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e193      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d036      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_RCC_OscConfig+0x27c>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff f9aa 	bl	80011c8 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff f9a6 	bl	80011c8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e173      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x234>
 8001e96:	e01b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7ff f993 	bl	80011c8 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	e00e      	b.n	8001ec4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea6:	f7ff f98f 	bl	80011c8 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d907      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e15c      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	42470000 	.word	0x42470000
 8001ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec4:	4b8a      	ldr	r3, [pc, #552]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ea      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 8097 	beq.w	800200c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee2:	4b83      	ldr	r3, [pc, #524]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b7f      	ldr	r3, [pc, #508]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a7e      	ldr	r2, [pc, #504]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b7c      	ldr	r3, [pc, #496]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <HAL_RCC_OscConfig+0x4b0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d118      	bne.n	8001f4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_RCC_OscConfig+0x4b0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a75      	ldr	r2, [pc, #468]	; (80020f4 <HAL_RCC_OscConfig+0x4b0>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7ff f94f 	bl	80011c8 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff f94b 	bl	80011c8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e118      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_OscConfig+0x4b0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x31e>
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a65      	ldr	r2, [pc, #404]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x358>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x340>
 8001f6a:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a60      	ldr	r2, [pc, #384]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	4b5e      	ldr	r3, [pc, #376]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a5d      	ldr	r2, [pc, #372]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0x358>
 8001f84:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	4a59      	ldr	r2, [pc, #356]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f90:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a56      	ldr	r2, [pc, #344]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001f96:	f023 0304 	bic.w	r3, r3, #4
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d015      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7ff f910 	bl	80011c8 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fac:	f7ff f90c 	bl	80011c8 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0d7      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc2:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0ee      	beq.n	8001fac <HAL_RCC_OscConfig+0x368>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff f8fa 	bl	80011c8 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7ff f8f6 	bl	80011c8 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0c1      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fee:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ee      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80ad 	beq.w	8002170 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002016:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b08      	cmp	r3, #8
 8002020:	d060      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d145      	bne.n	80020b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <HAL_RCC_OscConfig+0x4b4>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff f8ca 	bl	80011c8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff f8c6 	bl	80011c8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e093      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	3b01      	subs	r3, #1
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	071b      	lsls	r3, r3, #28
 8002082:	491b      	ldr	r1, [pc, #108]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x4b4>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff f89b 	bl	80011c8 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff f897 	bl	80011c8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e064      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x452>
 80020b4:	e05c      	b.n	8002170 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_RCC_OscConfig+0x4b4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f884 	bl	80011c8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f880 	bl	80011c8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e04d      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_OscConfig+0x4ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x480>
 80020e2:	e045      	b.n	8002170 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e040      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40007000 	.word	0x40007000
 80020f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <HAL_RCC_OscConfig+0x538>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d030      	beq.n	800216c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d129      	bne.n	800216c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d122      	bne.n	800216c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800212c:	4013      	ands	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	4293      	cmp	r3, r2
 8002136:	d119      	bne.n	800216c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	3b01      	subs	r3, #1
 8002146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d10f      	bne.n	800216c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e041      	b.n	8002216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fdc4 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 fa96 	bl	80026f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d001      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e04e      	b.n	80022d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d022      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002262:	d01d      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d018      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00e      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a18      	ldr	r2, [pc, #96]	; (80022fc <HAL_TIM_Base_Start_IT+0xdc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d111      	bne.n	80022c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d010      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c2:	e007      	b.n	80022d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40010400 	.word	0x40010400
 80022f8:	40014000 	.word	0x40014000
 80022fc:	40001800 	.word	0x40001800

08002300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d122      	bne.n	800235c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d11b      	bne.n	800235c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f9b5 	bl	80026b2 <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f9a7 	bl	800269e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f9b8 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d122      	bne.n	80023b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d11b      	bne.n	80023b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0204 	mvn.w	r2, #4
 8002380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f98b 	bl	80026b2 <HAL_TIM_IC_CaptureCallback>
 800239c:	e005      	b.n	80023aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f97d 	bl	800269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f98e 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d122      	bne.n	8002404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d11b      	bne.n	8002404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0208 	mvn.w	r2, #8
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f961 	bl	80026b2 <HAL_TIM_IC_CaptureCallback>
 80023f0:	e005      	b.n	80023fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f953 	bl	800269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f964 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b10      	cmp	r3, #16
 8002410:	d122      	bne.n	8002458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b10      	cmp	r3, #16
 800241e:	d11b      	bne.n	8002458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0210 	mvn.w	r2, #16
 8002428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2208      	movs	r2, #8
 800242e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f937 	bl	80026b2 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f929 	bl	800269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f93a 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0201 	mvn.w	r2, #1
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe f89a 	bl	80005b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	2b80      	cmp	r3, #128	; 0x80
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fae0 	bl	8002a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d107      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8ff 	bl	80026da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0220 	mvn.w	r2, #32
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 faaa 	bl	8002a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIM_ConfigClockSource+0x1c>
 8002528:	2302      	movs	r3, #2
 800252a:	e0b4      	b.n	8002696 <HAL_TIM_ConfigClockSource+0x186>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800254a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002564:	d03e      	beq.n	80025e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	f200 8087 	bhi.w	800267c <HAL_TIM_ConfigClockSource+0x16c>
 800256e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002572:	f000 8086 	beq.w	8002682 <HAL_TIM_ConfigClockSource+0x172>
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257a:	d87f      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b70      	cmp	r3, #112	; 0x70
 800257e:	d01a      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002580:	2b70      	cmp	r3, #112	; 0x70
 8002582:	d87b      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b60      	cmp	r3, #96	; 0x60
 8002586:	d050      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x11a>
 8002588:	2b60      	cmp	r3, #96	; 0x60
 800258a:	d877      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b50      	cmp	r3, #80	; 0x50
 800258e:	d03c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0xfa>
 8002590:	2b50      	cmp	r3, #80	; 0x50
 8002592:	d873      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d058      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x13a>
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d86f      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b30      	cmp	r3, #48	; 0x30
 800259e:	d064      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x15a>
 80025a0:	2b30      	cmp	r3, #48	; 0x30
 80025a2:	d86b      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d060      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x15a>
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d867      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d05c      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x15a>
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d05a      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	e062      	b.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f000 f9ad 	bl	8002924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	609a      	str	r2, [r3, #8]
      break;
 80025e2:	e04f      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f000 f996 	bl	8002924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002606:	609a      	str	r2, [r3, #8]
      break;
 8002608:	e03c      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	461a      	mov	r2, r3
 8002618:	f000 f90a 	bl	8002830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2150      	movs	r1, #80	; 0x50
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f963 	bl	80028ee <TIM_ITRx_SetConfig>
      break;
 8002628:	e02c      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f929 	bl	800288e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2160      	movs	r1, #96	; 0x60
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f953 	bl	80028ee <TIM_ITRx_SetConfig>
      break;
 8002648:	e01c      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f8ea 	bl	8002830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f943 	bl	80028ee <TIM_ITRx_SetConfig>
      break;
 8002668:	e00c      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f000 f93a 	bl	80028ee <TIM_ITRx_SetConfig>
      break;
 800267a:	e003      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e000      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a40      	ldr	r2, [pc, #256]	; (8002804 <TIM_Base_SetConfig+0x114>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270e:	d00f      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a3d      	ldr	r2, [pc, #244]	; (8002808 <TIM_Base_SetConfig+0x118>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00b      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a3c      	ldr	r2, [pc, #240]	; (800280c <TIM_Base_SetConfig+0x11c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d007      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a3b      	ldr	r2, [pc, #236]	; (8002810 <TIM_Base_SetConfig+0x120>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <TIM_Base_SetConfig+0x124>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d108      	bne.n	8002742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a2f      	ldr	r2, [pc, #188]	; (8002804 <TIM_Base_SetConfig+0x114>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02b      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d027      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a2c      	ldr	r2, [pc, #176]	; (8002808 <TIM_Base_SetConfig+0x118>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d023      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a2b      	ldr	r2, [pc, #172]	; (800280c <TIM_Base_SetConfig+0x11c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a2a      	ldr	r2, [pc, #168]	; (8002810 <TIM_Base_SetConfig+0x120>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01b      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a29      	ldr	r2, [pc, #164]	; (8002814 <TIM_Base_SetConfig+0x124>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d017      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a28      	ldr	r2, [pc, #160]	; (8002818 <TIM_Base_SetConfig+0x128>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <TIM_Base_SetConfig+0x12c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00f      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <TIM_Base_SetConfig+0x130>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00b      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <TIM_Base_SetConfig+0x134>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a24      	ldr	r2, [pc, #144]	; (8002828 <TIM_Base_SetConfig+0x138>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d003      	beq.n	80027a2 <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <TIM_Base_SetConfig+0x13c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d108      	bne.n	80027b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <TIM_Base_SetConfig+0x114>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <TIM_Base_SetConfig+0xf8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <TIM_Base_SetConfig+0x124>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d103      	bne.n	80027f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	615a      	str	r2, [r3, #20]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40010000 	.word	0x40010000
 8002808:	40000400 	.word	0x40000400
 800280c:	40000800 	.word	0x40000800
 8002810:	40000c00 	.word	0x40000c00
 8002814:	40010400 	.word	0x40010400
 8002818:	40014000 	.word	0x40014000
 800281c:	40014400 	.word	0x40014400
 8002820:	40014800 	.word	0x40014800
 8002824:	40001800 	.word	0x40001800
 8002828:	40001c00 	.word	0x40001c00
 800282c:	40002000 	.word	0x40002000

08002830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f023 0201 	bic.w	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800285a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f023 030a 	bic.w	r3, r3, #10
 800286c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b087      	sub	sp, #28
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f023 0210 	bic.w	r2, r3, #16
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	031b      	lsls	r3, r3, #12
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	621a      	str	r2, [r3, #32]
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	f043 0307 	orr.w	r3, r3, #7
 8002910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800293e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	431a      	orrs	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e05a      	b.n	8002a32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d022      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d01d      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d018      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00e      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d004      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10c      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40010400 	.word	0x40010400
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40001800 	.word	0x40001800

08002a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <__errno>:
 8002a84:	4b01      	ldr	r3, [pc, #4]	; (8002a8c <__errno+0x8>)
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	2000000c 	.word	0x2000000c

08002a90 <__libc_init_array>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	4d0d      	ldr	r5, [pc, #52]	; (8002ac8 <__libc_init_array+0x38>)
 8002a94:	4c0d      	ldr	r4, [pc, #52]	; (8002acc <__libc_init_array+0x3c>)
 8002a96:	1b64      	subs	r4, r4, r5
 8002a98:	10a4      	asrs	r4, r4, #2
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	42a6      	cmp	r6, r4
 8002a9e:	d109      	bne.n	8002ab4 <__libc_init_array+0x24>
 8002aa0:	4d0b      	ldr	r5, [pc, #44]	; (8002ad0 <__libc_init_array+0x40>)
 8002aa2:	4c0c      	ldr	r4, [pc, #48]	; (8002ad4 <__libc_init_array+0x44>)
 8002aa4:	f001 fefa 	bl	800489c <_init>
 8002aa8:	1b64      	subs	r4, r4, r5
 8002aaa:	10a4      	asrs	r4, r4, #2
 8002aac:	2600      	movs	r6, #0
 8002aae:	42a6      	cmp	r6, r4
 8002ab0:	d105      	bne.n	8002abe <__libc_init_array+0x2e>
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
 8002ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab8:	4798      	blx	r3
 8002aba:	3601      	adds	r6, #1
 8002abc:	e7ee      	b.n	8002a9c <__libc_init_array+0xc>
 8002abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac2:	4798      	blx	r3
 8002ac4:	3601      	adds	r6, #1
 8002ac6:	e7f2      	b.n	8002aae <__libc_init_array+0x1e>
 8002ac8:	08004b00 	.word	0x08004b00
 8002acc:	08004b00 	.word	0x08004b00
 8002ad0:	08004b00 	.word	0x08004b00
 8002ad4:	08004b04 	.word	0x08004b04

08002ad8 <malloc>:
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <malloc+0xc>)
 8002ada:	4601      	mov	r1, r0
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	f000 b85b 	b.w	8002b98 <_malloc_r>
 8002ae2:	bf00      	nop
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <memset>:
 8002ae8:	4402      	add	r2, r0
 8002aea:	4603      	mov	r3, r0
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d100      	bne.n	8002af2 <memset+0xa>
 8002af0:	4770      	bx	lr
 8002af2:	f803 1b01 	strb.w	r1, [r3], #1
 8002af6:	e7f9      	b.n	8002aec <memset+0x4>

08002af8 <_free_r>:
 8002af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002afa:	2900      	cmp	r1, #0
 8002afc:	d048      	beq.n	8002b90 <_free_r+0x98>
 8002afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b02:	9001      	str	r0, [sp, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f1a1 0404 	sub.w	r4, r1, #4
 8002b0a:	bfb8      	it	lt
 8002b0c:	18e4      	addlt	r4, r4, r3
 8002b0e:	f000 fd27 	bl	8003560 <__malloc_lock>
 8002b12:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <_free_r+0x9c>)
 8002b14:	9801      	ldr	r0, [sp, #4]
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	4615      	mov	r5, r2
 8002b1a:	b933      	cbnz	r3, 8002b2a <_free_r+0x32>
 8002b1c:	6063      	str	r3, [r4, #4]
 8002b1e:	6014      	str	r4, [r2, #0]
 8002b20:	b003      	add	sp, #12
 8002b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b26:	f000 bd21 	b.w	800356c <__malloc_unlock>
 8002b2a:	42a3      	cmp	r3, r4
 8002b2c:	d90b      	bls.n	8002b46 <_free_r+0x4e>
 8002b2e:	6821      	ldr	r1, [r4, #0]
 8002b30:	1862      	adds	r2, r4, r1
 8002b32:	4293      	cmp	r3, r2
 8002b34:	bf04      	itt	eq
 8002b36:	681a      	ldreq	r2, [r3, #0]
 8002b38:	685b      	ldreq	r3, [r3, #4]
 8002b3a:	6063      	str	r3, [r4, #4]
 8002b3c:	bf04      	itt	eq
 8002b3e:	1852      	addeq	r2, r2, r1
 8002b40:	6022      	streq	r2, [r4, #0]
 8002b42:	602c      	str	r4, [r5, #0]
 8002b44:	e7ec      	b.n	8002b20 <_free_r+0x28>
 8002b46:	461a      	mov	r2, r3
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b10b      	cbz	r3, 8002b50 <_free_r+0x58>
 8002b4c:	42a3      	cmp	r3, r4
 8002b4e:	d9fa      	bls.n	8002b46 <_free_r+0x4e>
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	1855      	adds	r5, r2, r1
 8002b54:	42a5      	cmp	r5, r4
 8002b56:	d10b      	bne.n	8002b70 <_free_r+0x78>
 8002b58:	6824      	ldr	r4, [r4, #0]
 8002b5a:	4421      	add	r1, r4
 8002b5c:	1854      	adds	r4, r2, r1
 8002b5e:	42a3      	cmp	r3, r4
 8002b60:	6011      	str	r1, [r2, #0]
 8002b62:	d1dd      	bne.n	8002b20 <_free_r+0x28>
 8002b64:	681c      	ldr	r4, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	6053      	str	r3, [r2, #4]
 8002b6a:	4421      	add	r1, r4
 8002b6c:	6011      	str	r1, [r2, #0]
 8002b6e:	e7d7      	b.n	8002b20 <_free_r+0x28>
 8002b70:	d902      	bls.n	8002b78 <_free_r+0x80>
 8002b72:	230c      	movs	r3, #12
 8002b74:	6003      	str	r3, [r0, #0]
 8002b76:	e7d3      	b.n	8002b20 <_free_r+0x28>
 8002b78:	6825      	ldr	r5, [r4, #0]
 8002b7a:	1961      	adds	r1, r4, r5
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	bf04      	itt	eq
 8002b80:	6819      	ldreq	r1, [r3, #0]
 8002b82:	685b      	ldreq	r3, [r3, #4]
 8002b84:	6063      	str	r3, [r4, #4]
 8002b86:	bf04      	itt	eq
 8002b88:	1949      	addeq	r1, r1, r5
 8002b8a:	6021      	streq	r1, [r4, #0]
 8002b8c:	6054      	str	r4, [r2, #4]
 8002b8e:	e7c7      	b.n	8002b20 <_free_r+0x28>
 8002b90:	b003      	add	sp, #12
 8002b92:	bd30      	pop	{r4, r5, pc}
 8002b94:	20000090 	.word	0x20000090

08002b98 <_malloc_r>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	1ccd      	adds	r5, r1, #3
 8002b9c:	f025 0503 	bic.w	r5, r5, #3
 8002ba0:	3508      	adds	r5, #8
 8002ba2:	2d0c      	cmp	r5, #12
 8002ba4:	bf38      	it	cc
 8002ba6:	250c      	movcc	r5, #12
 8002ba8:	2d00      	cmp	r5, #0
 8002baa:	4606      	mov	r6, r0
 8002bac:	db01      	blt.n	8002bb2 <_malloc_r+0x1a>
 8002bae:	42a9      	cmp	r1, r5
 8002bb0:	d903      	bls.n	8002bba <_malloc_r+0x22>
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	6033      	str	r3, [r6, #0]
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bba:	f000 fcd1 	bl	8003560 <__malloc_lock>
 8002bbe:	4921      	ldr	r1, [pc, #132]	; (8002c44 <_malloc_r+0xac>)
 8002bc0:	680a      	ldr	r2, [r1, #0]
 8002bc2:	4614      	mov	r4, r2
 8002bc4:	b99c      	cbnz	r4, 8002bee <_malloc_r+0x56>
 8002bc6:	4f20      	ldr	r7, [pc, #128]	; (8002c48 <_malloc_r+0xb0>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b923      	cbnz	r3, 8002bd6 <_malloc_r+0x3e>
 8002bcc:	4621      	mov	r1, r4
 8002bce:	4630      	mov	r0, r6
 8002bd0:	f000 f8ca 	bl	8002d68 <_sbrk_r>
 8002bd4:	6038      	str	r0, [r7, #0]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f000 f8c5 	bl	8002d68 <_sbrk_r>
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	d123      	bne.n	8002c2a <_malloc_r+0x92>
 8002be2:	230c      	movs	r3, #12
 8002be4:	6033      	str	r3, [r6, #0]
 8002be6:	4630      	mov	r0, r6
 8002be8:	f000 fcc0 	bl	800356c <__malloc_unlock>
 8002bec:	e7e3      	b.n	8002bb6 <_malloc_r+0x1e>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	1b5b      	subs	r3, r3, r5
 8002bf2:	d417      	bmi.n	8002c24 <_malloc_r+0x8c>
 8002bf4:	2b0b      	cmp	r3, #11
 8002bf6:	d903      	bls.n	8002c00 <_malloc_r+0x68>
 8002bf8:	6023      	str	r3, [r4, #0]
 8002bfa:	441c      	add	r4, r3
 8002bfc:	6025      	str	r5, [r4, #0]
 8002bfe:	e004      	b.n	8002c0a <_malloc_r+0x72>
 8002c00:	6863      	ldr	r3, [r4, #4]
 8002c02:	42a2      	cmp	r2, r4
 8002c04:	bf0c      	ite	eq
 8002c06:	600b      	streq	r3, [r1, #0]
 8002c08:	6053      	strne	r3, [r2, #4]
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f000 fcae 	bl	800356c <__malloc_unlock>
 8002c10:	f104 000b 	add.w	r0, r4, #11
 8002c14:	1d23      	adds	r3, r4, #4
 8002c16:	f020 0007 	bic.w	r0, r0, #7
 8002c1a:	1ac2      	subs	r2, r0, r3
 8002c1c:	d0cc      	beq.n	8002bb8 <_malloc_r+0x20>
 8002c1e:	1a1b      	subs	r3, r3, r0
 8002c20:	50a3      	str	r3, [r4, r2]
 8002c22:	e7c9      	b.n	8002bb8 <_malloc_r+0x20>
 8002c24:	4622      	mov	r2, r4
 8002c26:	6864      	ldr	r4, [r4, #4]
 8002c28:	e7cc      	b.n	8002bc4 <_malloc_r+0x2c>
 8002c2a:	1cc4      	adds	r4, r0, #3
 8002c2c:	f024 0403 	bic.w	r4, r4, #3
 8002c30:	42a0      	cmp	r0, r4
 8002c32:	d0e3      	beq.n	8002bfc <_malloc_r+0x64>
 8002c34:	1a21      	subs	r1, r4, r0
 8002c36:	4630      	mov	r0, r6
 8002c38:	f000 f896 	bl	8002d68 <_sbrk_r>
 8002c3c:	3001      	adds	r0, #1
 8002c3e:	d1dd      	bne.n	8002bfc <_malloc_r+0x64>
 8002c40:	e7cf      	b.n	8002be2 <_malloc_r+0x4a>
 8002c42:	bf00      	nop
 8002c44:	20000090 	.word	0x20000090
 8002c48:	20000094 	.word	0x20000094

08002c4c <iprintf>:
 8002c4c:	b40f      	push	{r0, r1, r2, r3}
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <iprintf+0x2c>)
 8002c50:	b513      	push	{r0, r1, r4, lr}
 8002c52:	681c      	ldr	r4, [r3, #0]
 8002c54:	b124      	cbz	r4, 8002c60 <iprintf+0x14>
 8002c56:	69a3      	ldr	r3, [r4, #24]
 8002c58:	b913      	cbnz	r3, 8002c60 <iprintf+0x14>
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f000 fb5e 	bl	800331c <__sinit>
 8002c60:	ab05      	add	r3, sp, #20
 8002c62:	9a04      	ldr	r2, [sp, #16]
 8002c64:	68a1      	ldr	r1, [r4, #8]
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 fcaf 	bl	80035cc <_vfiprintf_r>
 8002c6e:	b002      	add	sp, #8
 8002c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c74:	b004      	add	sp, #16
 8002c76:	4770      	bx	lr
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <_puts_r>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	460e      	mov	r6, r1
 8002c80:	4605      	mov	r5, r0
 8002c82:	b118      	cbz	r0, 8002c8c <_puts_r+0x10>
 8002c84:	6983      	ldr	r3, [r0, #24]
 8002c86:	b90b      	cbnz	r3, 8002c8c <_puts_r+0x10>
 8002c88:	f000 fb48 	bl	800331c <__sinit>
 8002c8c:	69ab      	ldr	r3, [r5, #24]
 8002c8e:	68ac      	ldr	r4, [r5, #8]
 8002c90:	b913      	cbnz	r3, 8002c98 <_puts_r+0x1c>
 8002c92:	4628      	mov	r0, r5
 8002c94:	f000 fb42 	bl	800331c <__sinit>
 8002c98:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <_puts_r+0xd0>)
 8002c9a:	429c      	cmp	r4, r3
 8002c9c:	d120      	bne.n	8002ce0 <_puts_r+0x64>
 8002c9e:	686c      	ldr	r4, [r5, #4]
 8002ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ca2:	07db      	lsls	r3, r3, #31
 8002ca4:	d405      	bmi.n	8002cb2 <_puts_r+0x36>
 8002ca6:	89a3      	ldrh	r3, [r4, #12]
 8002ca8:	0598      	lsls	r0, r3, #22
 8002caa:	d402      	bmi.n	8002cb2 <_puts_r+0x36>
 8002cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cae:	f000 fbf0 	bl	8003492 <__retarget_lock_acquire_recursive>
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	0719      	lsls	r1, r3, #28
 8002cb6:	d51d      	bpl.n	8002cf4 <_puts_r+0x78>
 8002cb8:	6923      	ldr	r3, [r4, #16]
 8002cba:	b1db      	cbz	r3, 8002cf4 <_puts_r+0x78>
 8002cbc:	3e01      	subs	r6, #1
 8002cbe:	68a3      	ldr	r3, [r4, #8]
 8002cc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	60a3      	str	r3, [r4, #8]
 8002cc8:	bb39      	cbnz	r1, 8002d1a <_puts_r+0x9e>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da38      	bge.n	8002d40 <_puts_r+0xc4>
 8002cce:	4622      	mov	r2, r4
 8002cd0:	210a      	movs	r1, #10
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f000 f936 	bl	8002f44 <__swbuf_r>
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d011      	beq.n	8002d00 <_puts_r+0x84>
 8002cdc:	250a      	movs	r5, #10
 8002cde:	e011      	b.n	8002d04 <_puts_r+0x88>
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <_puts_r+0xd4>)
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	d101      	bne.n	8002cea <_puts_r+0x6e>
 8002ce6:	68ac      	ldr	r4, [r5, #8]
 8002ce8:	e7da      	b.n	8002ca0 <_puts_r+0x24>
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <_puts_r+0xd8>)
 8002cec:	429c      	cmp	r4, r3
 8002cee:	bf08      	it	eq
 8002cf0:	68ec      	ldreq	r4, [r5, #12]
 8002cf2:	e7d5      	b.n	8002ca0 <_puts_r+0x24>
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 f976 	bl	8002fe8 <__swsetup_r>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0dd      	beq.n	8002cbc <_puts_r+0x40>
 8002d00:	f04f 35ff 	mov.w	r5, #4294967295
 8002d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d06:	07da      	lsls	r2, r3, #31
 8002d08:	d405      	bmi.n	8002d16 <_puts_r+0x9a>
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	059b      	lsls	r3, r3, #22
 8002d0e:	d402      	bmi.n	8002d16 <_puts_r+0x9a>
 8002d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d12:	f000 fbbf 	bl	8003494 <__retarget_lock_release_recursive>
 8002d16:	4628      	mov	r0, r5
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da04      	bge.n	8002d28 <_puts_r+0xac>
 8002d1e:	69a2      	ldr	r2, [r4, #24]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dc06      	bgt.n	8002d32 <_puts_r+0xb6>
 8002d24:	290a      	cmp	r1, #10
 8002d26:	d004      	beq.n	8002d32 <_puts_r+0xb6>
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	6022      	str	r2, [r4, #0]
 8002d2e:	7019      	strb	r1, [r3, #0]
 8002d30:	e7c5      	b.n	8002cbe <_puts_r+0x42>
 8002d32:	4622      	mov	r2, r4
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 f905 	bl	8002f44 <__swbuf_r>
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	d1bf      	bne.n	8002cbe <_puts_r+0x42>
 8002d3e:	e7df      	b.n	8002d00 <_puts_r+0x84>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	250a      	movs	r5, #10
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	6022      	str	r2, [r4, #0]
 8002d48:	701d      	strb	r5, [r3, #0]
 8002d4a:	e7db      	b.n	8002d04 <_puts_r+0x88>
 8002d4c:	08004968 	.word	0x08004968
 8002d50:	08004988 	.word	0x08004988
 8002d54:	08004948 	.word	0x08004948

08002d58 <puts>:
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <puts+0xc>)
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	f7ff bf8d 	b.w	8002c7c <_puts_r>
 8002d62:	bf00      	nop
 8002d64:	2000000c 	.word	0x2000000c

08002d68 <_sbrk_r>:
 8002d68:	b538      	push	{r3, r4, r5, lr}
 8002d6a:	4d06      	ldr	r5, [pc, #24]	; (8002d84 <_sbrk_r+0x1c>)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	4604      	mov	r4, r0
 8002d70:	4608      	mov	r0, r1
 8002d72:	602b      	str	r3, [r5, #0]
 8002d74:	f7fe f876 	bl	8000e64 <_sbrk>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	d102      	bne.n	8002d82 <_sbrk_r+0x1a>
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	b103      	cbz	r3, 8002d82 <_sbrk_r+0x1a>
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	bd38      	pop	{r3, r4, r5, pc}
 8002d84:	200000f4 	.word	0x200000f4

08002d88 <iscanf>:
 8002d88:	b40f      	push	{r0, r1, r2, r3}
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <iscanf+0x2c>)
 8002d8c:	b513      	push	{r0, r1, r4, lr}
 8002d8e:	681c      	ldr	r4, [r3, #0]
 8002d90:	b124      	cbz	r4, 8002d9c <iscanf+0x14>
 8002d92:	69a3      	ldr	r3, [r4, #24]
 8002d94:	b913      	cbnz	r3, 8002d9c <iscanf+0x14>
 8002d96:	4620      	mov	r0, r4
 8002d98:	f000 fac0 	bl	800331c <__sinit>
 8002d9c:	ab05      	add	r3, sp, #20
 8002d9e:	9a04      	ldr	r2, [sp, #16]
 8002da0:	6861      	ldr	r1, [r4, #4]
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	4620      	mov	r0, r4
 8002da6:	f001 f879 	bl	8003e9c <_vfiscanf_r>
 8002daa:	b002      	add	sp, #8
 8002dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002db0:	b004      	add	sp, #16
 8002db2:	4770      	bx	lr
 8002db4:	2000000c 	.word	0x2000000c

08002db8 <setvbuf>:
 8002db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002dbc:	461d      	mov	r5, r3
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <setvbuf+0x17c>)
 8002dc0:	681f      	ldr	r7, [r3, #0]
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	460e      	mov	r6, r1
 8002dc6:	4690      	mov	r8, r2
 8002dc8:	b127      	cbz	r7, 8002dd4 <setvbuf+0x1c>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	b913      	cbnz	r3, 8002dd4 <setvbuf+0x1c>
 8002dce:	4638      	mov	r0, r7
 8002dd0:	f000 faa4 	bl	800331c <__sinit>
 8002dd4:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <setvbuf+0x180>)
 8002dd6:	429c      	cmp	r4, r3
 8002dd8:	d167      	bne.n	8002eaa <setvbuf+0xf2>
 8002dda:	687c      	ldr	r4, [r7, #4]
 8002ddc:	f1b8 0f02 	cmp.w	r8, #2
 8002de0:	d006      	beq.n	8002df0 <setvbuf+0x38>
 8002de2:	f1b8 0f01 	cmp.w	r8, #1
 8002de6:	f200 809f 	bhi.w	8002f28 <setvbuf+0x170>
 8002dea:	2d00      	cmp	r5, #0
 8002dec:	f2c0 809c 	blt.w	8002f28 <setvbuf+0x170>
 8002df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002df2:	07db      	lsls	r3, r3, #31
 8002df4:	d405      	bmi.n	8002e02 <setvbuf+0x4a>
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	0598      	lsls	r0, r3, #22
 8002dfa:	d402      	bmi.n	8002e02 <setvbuf+0x4a>
 8002dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dfe:	f000 fb48 	bl	8003492 <__retarget_lock_acquire_recursive>
 8002e02:	4621      	mov	r1, r4
 8002e04:	4638      	mov	r0, r7
 8002e06:	f000 f9e3 	bl	80031d0 <_fflush_r>
 8002e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e0c:	b141      	cbz	r1, 8002e20 <setvbuf+0x68>
 8002e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e12:	4299      	cmp	r1, r3
 8002e14:	d002      	beq.n	8002e1c <setvbuf+0x64>
 8002e16:	4638      	mov	r0, r7
 8002e18:	f7ff fe6e 	bl	8002af8 <_free_r>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6363      	str	r3, [r4, #52]	; 0x34
 8002e20:	2300      	movs	r3, #0
 8002e22:	61a3      	str	r3, [r4, #24]
 8002e24:	6063      	str	r3, [r4, #4]
 8002e26:	89a3      	ldrh	r3, [r4, #12]
 8002e28:	0619      	lsls	r1, r3, #24
 8002e2a:	d503      	bpl.n	8002e34 <setvbuf+0x7c>
 8002e2c:	6921      	ldr	r1, [r4, #16]
 8002e2e:	4638      	mov	r0, r7
 8002e30:	f7ff fe62 	bl	8002af8 <_free_r>
 8002e34:	89a3      	ldrh	r3, [r4, #12]
 8002e36:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	f1b8 0f02 	cmp.w	r8, #2
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	d06c      	beq.n	8002f20 <setvbuf+0x168>
 8002e46:	ab01      	add	r3, sp, #4
 8002e48:	466a      	mov	r2, sp
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	4638      	mov	r0, r7
 8002e4e:	f000 fb22 	bl	8003496 <__swhatbuf_r>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	4318      	orrs	r0, r3
 8002e56:	81a0      	strh	r0, [r4, #12]
 8002e58:	2d00      	cmp	r5, #0
 8002e5a:	d130      	bne.n	8002ebe <setvbuf+0x106>
 8002e5c:	9d00      	ldr	r5, [sp, #0]
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f7ff fe3a 	bl	8002ad8 <malloc>
 8002e64:	4606      	mov	r6, r0
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d155      	bne.n	8002f16 <setvbuf+0x15e>
 8002e6a:	f8dd 9000 	ldr.w	r9, [sp]
 8002e6e:	45a9      	cmp	r9, r5
 8002e70:	d14a      	bne.n	8002f08 <setvbuf+0x150>
 8002e72:	f04f 35ff 	mov.w	r5, #4294967295
 8002e76:	2200      	movs	r2, #0
 8002e78:	60a2      	str	r2, [r4, #8]
 8002e7a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002e7e:	6022      	str	r2, [r4, #0]
 8002e80:	6122      	str	r2, [r4, #16]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e88:	6162      	str	r2, [r4, #20]
 8002e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	07d2      	lsls	r2, r2, #31
 8002e92:	81a3      	strh	r3, [r4, #12]
 8002e94:	d405      	bmi.n	8002ea2 <setvbuf+0xea>
 8002e96:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002e9a:	d102      	bne.n	8002ea2 <setvbuf+0xea>
 8002e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e9e:	f000 faf9 	bl	8003494 <__retarget_lock_release_recursive>
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	b003      	add	sp, #12
 8002ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002eaa:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <setvbuf+0x184>)
 8002eac:	429c      	cmp	r4, r3
 8002eae:	d101      	bne.n	8002eb4 <setvbuf+0xfc>
 8002eb0:	68bc      	ldr	r4, [r7, #8]
 8002eb2:	e793      	b.n	8002ddc <setvbuf+0x24>
 8002eb4:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <setvbuf+0x188>)
 8002eb6:	429c      	cmp	r4, r3
 8002eb8:	bf08      	it	eq
 8002eba:	68fc      	ldreq	r4, [r7, #12]
 8002ebc:	e78e      	b.n	8002ddc <setvbuf+0x24>
 8002ebe:	2e00      	cmp	r6, #0
 8002ec0:	d0cd      	beq.n	8002e5e <setvbuf+0xa6>
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	b913      	cbnz	r3, 8002ecc <setvbuf+0x114>
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	f000 fa28 	bl	800331c <__sinit>
 8002ecc:	f1b8 0f01 	cmp.w	r8, #1
 8002ed0:	bf08      	it	eq
 8002ed2:	89a3      	ldrheq	r3, [r4, #12]
 8002ed4:	6026      	str	r6, [r4, #0]
 8002ed6:	bf04      	itt	eq
 8002ed8:	f043 0301 	orreq.w	r3, r3, #1
 8002edc:	81a3      	strheq	r3, [r4, #12]
 8002ede:	89a2      	ldrh	r2, [r4, #12]
 8002ee0:	f012 0308 	ands.w	r3, r2, #8
 8002ee4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002ee8:	d01c      	beq.n	8002f24 <setvbuf+0x16c>
 8002eea:	07d3      	lsls	r3, r2, #31
 8002eec:	bf41      	itttt	mi
 8002eee:	2300      	movmi	r3, #0
 8002ef0:	426d      	negmi	r5, r5
 8002ef2:	60a3      	strmi	r3, [r4, #8]
 8002ef4:	61a5      	strmi	r5, [r4, #24]
 8002ef6:	bf58      	it	pl
 8002ef8:	60a5      	strpl	r5, [r4, #8]
 8002efa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002efc:	f015 0501 	ands.w	r5, r5, #1
 8002f00:	d115      	bne.n	8002f2e <setvbuf+0x176>
 8002f02:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002f06:	e7c8      	b.n	8002e9a <setvbuf+0xe2>
 8002f08:	4648      	mov	r0, r9
 8002f0a:	f7ff fde5 	bl	8002ad8 <malloc>
 8002f0e:	4606      	mov	r6, r0
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d0ae      	beq.n	8002e72 <setvbuf+0xba>
 8002f14:	464d      	mov	r5, r9
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	e7d0      	b.n	8002ec2 <setvbuf+0x10a>
 8002f20:	2500      	movs	r5, #0
 8002f22:	e7a8      	b.n	8002e76 <setvbuf+0xbe>
 8002f24:	60a3      	str	r3, [r4, #8]
 8002f26:	e7e8      	b.n	8002efa <setvbuf+0x142>
 8002f28:	f04f 35ff 	mov.w	r5, #4294967295
 8002f2c:	e7b9      	b.n	8002ea2 <setvbuf+0xea>
 8002f2e:	2500      	movs	r5, #0
 8002f30:	e7b7      	b.n	8002ea2 <setvbuf+0xea>
 8002f32:	bf00      	nop
 8002f34:	2000000c 	.word	0x2000000c
 8002f38:	08004968 	.word	0x08004968
 8002f3c:	08004988 	.word	0x08004988
 8002f40:	08004948 	.word	0x08004948

08002f44 <__swbuf_r>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	460e      	mov	r6, r1
 8002f48:	4614      	mov	r4, r2
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	b118      	cbz	r0, 8002f56 <__swbuf_r+0x12>
 8002f4e:	6983      	ldr	r3, [r0, #24]
 8002f50:	b90b      	cbnz	r3, 8002f56 <__swbuf_r+0x12>
 8002f52:	f000 f9e3 	bl	800331c <__sinit>
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <__swbuf_r+0x98>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d12b      	bne.n	8002fb4 <__swbuf_r+0x70>
 8002f5c:	686c      	ldr	r4, [r5, #4]
 8002f5e:	69a3      	ldr	r3, [r4, #24]
 8002f60:	60a3      	str	r3, [r4, #8]
 8002f62:	89a3      	ldrh	r3, [r4, #12]
 8002f64:	071a      	lsls	r2, r3, #28
 8002f66:	d52f      	bpl.n	8002fc8 <__swbuf_r+0x84>
 8002f68:	6923      	ldr	r3, [r4, #16]
 8002f6a:	b36b      	cbz	r3, 8002fc8 <__swbuf_r+0x84>
 8002f6c:	6923      	ldr	r3, [r4, #16]
 8002f6e:	6820      	ldr	r0, [r4, #0]
 8002f70:	1ac0      	subs	r0, r0, r3
 8002f72:	6963      	ldr	r3, [r4, #20]
 8002f74:	b2f6      	uxtb	r6, r6
 8002f76:	4283      	cmp	r3, r0
 8002f78:	4637      	mov	r7, r6
 8002f7a:	dc04      	bgt.n	8002f86 <__swbuf_r+0x42>
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 f926 	bl	80031d0 <_fflush_r>
 8002f84:	bb30      	cbnz	r0, 8002fd4 <__swbuf_r+0x90>
 8002f86:	68a3      	ldr	r3, [r4, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60a3      	str	r3, [r4, #8]
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	6022      	str	r2, [r4, #0]
 8002f92:	701e      	strb	r6, [r3, #0]
 8002f94:	6963      	ldr	r3, [r4, #20]
 8002f96:	3001      	adds	r0, #1
 8002f98:	4283      	cmp	r3, r0
 8002f9a:	d004      	beq.n	8002fa6 <__swbuf_r+0x62>
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	07db      	lsls	r3, r3, #31
 8002fa0:	d506      	bpl.n	8002fb0 <__swbuf_r+0x6c>
 8002fa2:	2e0a      	cmp	r6, #10
 8002fa4:	d104      	bne.n	8002fb0 <__swbuf_r+0x6c>
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f000 f911 	bl	80031d0 <_fflush_r>
 8002fae:	b988      	cbnz	r0, 8002fd4 <__swbuf_r+0x90>
 8002fb0:	4638      	mov	r0, r7
 8002fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <__swbuf_r+0x9c>)
 8002fb6:	429c      	cmp	r4, r3
 8002fb8:	d101      	bne.n	8002fbe <__swbuf_r+0x7a>
 8002fba:	68ac      	ldr	r4, [r5, #8]
 8002fbc:	e7cf      	b.n	8002f5e <__swbuf_r+0x1a>
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <__swbuf_r+0xa0>)
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	bf08      	it	eq
 8002fc4:	68ec      	ldreq	r4, [r5, #12]
 8002fc6:	e7ca      	b.n	8002f5e <__swbuf_r+0x1a>
 8002fc8:	4621      	mov	r1, r4
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f000 f80c 	bl	8002fe8 <__swsetup_r>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d0cb      	beq.n	8002f6c <__swbuf_r+0x28>
 8002fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8002fd8:	e7ea      	b.n	8002fb0 <__swbuf_r+0x6c>
 8002fda:	bf00      	nop
 8002fdc:	08004968 	.word	0x08004968
 8002fe0:	08004988 	.word	0x08004988
 8002fe4:	08004948 	.word	0x08004948

08002fe8 <__swsetup_r>:
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <__swsetup_r+0xcc>)
 8002fea:	b570      	push	{r4, r5, r6, lr}
 8002fec:	681d      	ldr	r5, [r3, #0]
 8002fee:	4606      	mov	r6, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	b125      	cbz	r5, 8002ffe <__swsetup_r+0x16>
 8002ff4:	69ab      	ldr	r3, [r5, #24]
 8002ff6:	b913      	cbnz	r3, 8002ffe <__swsetup_r+0x16>
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 f98f 	bl	800331c <__sinit>
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <__swsetup_r+0xd0>)
 8003000:	429c      	cmp	r4, r3
 8003002:	d10f      	bne.n	8003024 <__swsetup_r+0x3c>
 8003004:	686c      	ldr	r4, [r5, #4]
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800300c:	0719      	lsls	r1, r3, #28
 800300e:	d42c      	bmi.n	800306a <__swsetup_r+0x82>
 8003010:	06dd      	lsls	r5, r3, #27
 8003012:	d411      	bmi.n	8003038 <__swsetup_r+0x50>
 8003014:	2309      	movs	r3, #9
 8003016:	6033      	str	r3, [r6, #0]
 8003018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	f04f 30ff 	mov.w	r0, #4294967295
 8003022:	e03e      	b.n	80030a2 <__swsetup_r+0xba>
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <__swsetup_r+0xd4>)
 8003026:	429c      	cmp	r4, r3
 8003028:	d101      	bne.n	800302e <__swsetup_r+0x46>
 800302a:	68ac      	ldr	r4, [r5, #8]
 800302c:	e7eb      	b.n	8003006 <__swsetup_r+0x1e>
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <__swsetup_r+0xd8>)
 8003030:	429c      	cmp	r4, r3
 8003032:	bf08      	it	eq
 8003034:	68ec      	ldreq	r4, [r5, #12]
 8003036:	e7e6      	b.n	8003006 <__swsetup_r+0x1e>
 8003038:	0758      	lsls	r0, r3, #29
 800303a:	d512      	bpl.n	8003062 <__swsetup_r+0x7a>
 800303c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800303e:	b141      	cbz	r1, 8003052 <__swsetup_r+0x6a>
 8003040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003044:	4299      	cmp	r1, r3
 8003046:	d002      	beq.n	800304e <__swsetup_r+0x66>
 8003048:	4630      	mov	r0, r6
 800304a:	f7ff fd55 	bl	8002af8 <_free_r>
 800304e:	2300      	movs	r3, #0
 8003050:	6363      	str	r3, [r4, #52]	; 0x34
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	2300      	movs	r3, #0
 800305c:	6063      	str	r3, [r4, #4]
 800305e:	6923      	ldr	r3, [r4, #16]
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	81a3      	strh	r3, [r4, #12]
 800306a:	6923      	ldr	r3, [r4, #16]
 800306c:	b94b      	cbnz	r3, 8003082 <__swsetup_r+0x9a>
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003078:	d003      	beq.n	8003082 <__swsetup_r+0x9a>
 800307a:	4621      	mov	r1, r4
 800307c:	4630      	mov	r0, r6
 800307e:	f000 fa2f 	bl	80034e0 <__smakebuf_r>
 8003082:	89a0      	ldrh	r0, [r4, #12]
 8003084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003088:	f010 0301 	ands.w	r3, r0, #1
 800308c:	d00a      	beq.n	80030a4 <__swsetup_r+0xbc>
 800308e:	2300      	movs	r3, #0
 8003090:	60a3      	str	r3, [r4, #8]
 8003092:	6963      	ldr	r3, [r4, #20]
 8003094:	425b      	negs	r3, r3
 8003096:	61a3      	str	r3, [r4, #24]
 8003098:	6923      	ldr	r3, [r4, #16]
 800309a:	b943      	cbnz	r3, 80030ae <__swsetup_r+0xc6>
 800309c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030a0:	d1ba      	bne.n	8003018 <__swsetup_r+0x30>
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	0781      	lsls	r1, r0, #30
 80030a6:	bf58      	it	pl
 80030a8:	6963      	ldrpl	r3, [r4, #20]
 80030aa:	60a3      	str	r3, [r4, #8]
 80030ac:	e7f4      	b.n	8003098 <__swsetup_r+0xb0>
 80030ae:	2000      	movs	r0, #0
 80030b0:	e7f7      	b.n	80030a2 <__swsetup_r+0xba>
 80030b2:	bf00      	nop
 80030b4:	2000000c 	.word	0x2000000c
 80030b8:	08004968 	.word	0x08004968
 80030bc:	08004988 	.word	0x08004988
 80030c0:	08004948 	.word	0x08004948

080030c4 <__sflush_r>:
 80030c4:	898a      	ldrh	r2, [r1, #12]
 80030c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ca:	4605      	mov	r5, r0
 80030cc:	0710      	lsls	r0, r2, #28
 80030ce:	460c      	mov	r4, r1
 80030d0:	d458      	bmi.n	8003184 <__sflush_r+0xc0>
 80030d2:	684b      	ldr	r3, [r1, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	dc05      	bgt.n	80030e4 <__sflush_r+0x20>
 80030d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	dc02      	bgt.n	80030e4 <__sflush_r+0x20>
 80030de:	2000      	movs	r0, #0
 80030e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030e6:	2e00      	cmp	r6, #0
 80030e8:	d0f9      	beq.n	80030de <__sflush_r+0x1a>
 80030ea:	2300      	movs	r3, #0
 80030ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030f0:	682f      	ldr	r7, [r5, #0]
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	d032      	beq.n	800315c <__sflush_r+0x98>
 80030f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030f8:	89a3      	ldrh	r3, [r4, #12]
 80030fa:	075a      	lsls	r2, r3, #29
 80030fc:	d505      	bpl.n	800310a <__sflush_r+0x46>
 80030fe:	6863      	ldr	r3, [r4, #4]
 8003100:	1ac0      	subs	r0, r0, r3
 8003102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003104:	b10b      	cbz	r3, 800310a <__sflush_r+0x46>
 8003106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003108:	1ac0      	subs	r0, r0, r3
 800310a:	2300      	movs	r3, #0
 800310c:	4602      	mov	r2, r0
 800310e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003110:	6a21      	ldr	r1, [r4, #32]
 8003112:	4628      	mov	r0, r5
 8003114:	47b0      	blx	r6
 8003116:	1c43      	adds	r3, r0, #1
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	d106      	bne.n	800312a <__sflush_r+0x66>
 800311c:	6829      	ldr	r1, [r5, #0]
 800311e:	291d      	cmp	r1, #29
 8003120:	d82c      	bhi.n	800317c <__sflush_r+0xb8>
 8003122:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <__sflush_r+0x108>)
 8003124:	40ca      	lsrs	r2, r1
 8003126:	07d6      	lsls	r6, r2, #31
 8003128:	d528      	bpl.n	800317c <__sflush_r+0xb8>
 800312a:	2200      	movs	r2, #0
 800312c:	6062      	str	r2, [r4, #4]
 800312e:	04d9      	lsls	r1, r3, #19
 8003130:	6922      	ldr	r2, [r4, #16]
 8003132:	6022      	str	r2, [r4, #0]
 8003134:	d504      	bpl.n	8003140 <__sflush_r+0x7c>
 8003136:	1c42      	adds	r2, r0, #1
 8003138:	d101      	bne.n	800313e <__sflush_r+0x7a>
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	b903      	cbnz	r3, 8003140 <__sflush_r+0x7c>
 800313e:	6560      	str	r0, [r4, #84]	; 0x54
 8003140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003142:	602f      	str	r7, [r5, #0]
 8003144:	2900      	cmp	r1, #0
 8003146:	d0ca      	beq.n	80030de <__sflush_r+0x1a>
 8003148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800314c:	4299      	cmp	r1, r3
 800314e:	d002      	beq.n	8003156 <__sflush_r+0x92>
 8003150:	4628      	mov	r0, r5
 8003152:	f7ff fcd1 	bl	8002af8 <_free_r>
 8003156:	2000      	movs	r0, #0
 8003158:	6360      	str	r0, [r4, #52]	; 0x34
 800315a:	e7c1      	b.n	80030e0 <__sflush_r+0x1c>
 800315c:	6a21      	ldr	r1, [r4, #32]
 800315e:	2301      	movs	r3, #1
 8003160:	4628      	mov	r0, r5
 8003162:	47b0      	blx	r6
 8003164:	1c41      	adds	r1, r0, #1
 8003166:	d1c7      	bne.n	80030f8 <__sflush_r+0x34>
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0c4      	beq.n	80030f8 <__sflush_r+0x34>
 800316e:	2b1d      	cmp	r3, #29
 8003170:	d001      	beq.n	8003176 <__sflush_r+0xb2>
 8003172:	2b16      	cmp	r3, #22
 8003174:	d101      	bne.n	800317a <__sflush_r+0xb6>
 8003176:	602f      	str	r7, [r5, #0]
 8003178:	e7b1      	b.n	80030de <__sflush_r+0x1a>
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003180:	81a3      	strh	r3, [r4, #12]
 8003182:	e7ad      	b.n	80030e0 <__sflush_r+0x1c>
 8003184:	690f      	ldr	r7, [r1, #16]
 8003186:	2f00      	cmp	r7, #0
 8003188:	d0a9      	beq.n	80030de <__sflush_r+0x1a>
 800318a:	0793      	lsls	r3, r2, #30
 800318c:	680e      	ldr	r6, [r1, #0]
 800318e:	bf08      	it	eq
 8003190:	694b      	ldreq	r3, [r1, #20]
 8003192:	600f      	str	r7, [r1, #0]
 8003194:	bf18      	it	ne
 8003196:	2300      	movne	r3, #0
 8003198:	eba6 0807 	sub.w	r8, r6, r7
 800319c:	608b      	str	r3, [r1, #8]
 800319e:	f1b8 0f00 	cmp.w	r8, #0
 80031a2:	dd9c      	ble.n	80030de <__sflush_r+0x1a>
 80031a4:	6a21      	ldr	r1, [r4, #32]
 80031a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031a8:	4643      	mov	r3, r8
 80031aa:	463a      	mov	r2, r7
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b0      	blx	r6
 80031b0:	2800      	cmp	r0, #0
 80031b2:	dc06      	bgt.n	80031c2 <__sflush_r+0xfe>
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	e78e      	b.n	80030e0 <__sflush_r+0x1c>
 80031c2:	4407      	add	r7, r0
 80031c4:	eba8 0800 	sub.w	r8, r8, r0
 80031c8:	e7e9      	b.n	800319e <__sflush_r+0xda>
 80031ca:	bf00      	nop
 80031cc:	20400001 	.word	0x20400001

080031d0 <_fflush_r>:
 80031d0:	b538      	push	{r3, r4, r5, lr}
 80031d2:	690b      	ldr	r3, [r1, #16]
 80031d4:	4605      	mov	r5, r0
 80031d6:	460c      	mov	r4, r1
 80031d8:	b913      	cbnz	r3, 80031e0 <_fflush_r+0x10>
 80031da:	2500      	movs	r5, #0
 80031dc:	4628      	mov	r0, r5
 80031de:	bd38      	pop	{r3, r4, r5, pc}
 80031e0:	b118      	cbz	r0, 80031ea <_fflush_r+0x1a>
 80031e2:	6983      	ldr	r3, [r0, #24]
 80031e4:	b90b      	cbnz	r3, 80031ea <_fflush_r+0x1a>
 80031e6:	f000 f899 	bl	800331c <__sinit>
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <_fflush_r+0x6c>)
 80031ec:	429c      	cmp	r4, r3
 80031ee:	d11b      	bne.n	8003228 <_fflush_r+0x58>
 80031f0:	686c      	ldr	r4, [r5, #4]
 80031f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0ef      	beq.n	80031da <_fflush_r+0xa>
 80031fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031fc:	07d0      	lsls	r0, r2, #31
 80031fe:	d404      	bmi.n	800320a <_fflush_r+0x3a>
 8003200:	0599      	lsls	r1, r3, #22
 8003202:	d402      	bmi.n	800320a <_fflush_r+0x3a>
 8003204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003206:	f000 f944 	bl	8003492 <__retarget_lock_acquire_recursive>
 800320a:	4628      	mov	r0, r5
 800320c:	4621      	mov	r1, r4
 800320e:	f7ff ff59 	bl	80030c4 <__sflush_r>
 8003212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003214:	07da      	lsls	r2, r3, #31
 8003216:	4605      	mov	r5, r0
 8003218:	d4e0      	bmi.n	80031dc <_fflush_r+0xc>
 800321a:	89a3      	ldrh	r3, [r4, #12]
 800321c:	059b      	lsls	r3, r3, #22
 800321e:	d4dd      	bmi.n	80031dc <_fflush_r+0xc>
 8003220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003222:	f000 f937 	bl	8003494 <__retarget_lock_release_recursive>
 8003226:	e7d9      	b.n	80031dc <_fflush_r+0xc>
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <_fflush_r+0x70>)
 800322a:	429c      	cmp	r4, r3
 800322c:	d101      	bne.n	8003232 <_fflush_r+0x62>
 800322e:	68ac      	ldr	r4, [r5, #8]
 8003230:	e7df      	b.n	80031f2 <_fflush_r+0x22>
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <_fflush_r+0x74>)
 8003234:	429c      	cmp	r4, r3
 8003236:	bf08      	it	eq
 8003238:	68ec      	ldreq	r4, [r5, #12]
 800323a:	e7da      	b.n	80031f2 <_fflush_r+0x22>
 800323c:	08004968 	.word	0x08004968
 8003240:	08004988 	.word	0x08004988
 8003244:	08004948 	.word	0x08004948

08003248 <fflush>:
 8003248:	4601      	mov	r1, r0
 800324a:	b920      	cbnz	r0, 8003256 <fflush+0xe>
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <fflush+0x18>)
 800324e:	4905      	ldr	r1, [pc, #20]	; (8003264 <fflush+0x1c>)
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	f000 b8fe 	b.w	8003452 <_fwalk_reent>
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <fflush+0x20>)
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	f7ff bfb9 	b.w	80031d0 <_fflush_r>
 800325e:	bf00      	nop
 8003260:	08004944 	.word	0x08004944
 8003264:	080031d1 	.word	0x080031d1
 8003268:	2000000c 	.word	0x2000000c

0800326c <std>:
 800326c:	2300      	movs	r3, #0
 800326e:	b510      	push	{r4, lr}
 8003270:	4604      	mov	r4, r0
 8003272:	e9c0 3300 	strd	r3, r3, [r0]
 8003276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800327a:	6083      	str	r3, [r0, #8]
 800327c:	8181      	strh	r1, [r0, #12]
 800327e:	6643      	str	r3, [r0, #100]	; 0x64
 8003280:	81c2      	strh	r2, [r0, #14]
 8003282:	6183      	str	r3, [r0, #24]
 8003284:	4619      	mov	r1, r3
 8003286:	2208      	movs	r2, #8
 8003288:	305c      	adds	r0, #92	; 0x5c
 800328a:	f7ff fc2d 	bl	8002ae8 <memset>
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <std+0x38>)
 8003290:	6263      	str	r3, [r4, #36]	; 0x24
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <std+0x3c>)
 8003294:	62a3      	str	r3, [r4, #40]	; 0x28
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <std+0x40>)
 8003298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <std+0x44>)
 800329c:	6224      	str	r4, [r4, #32]
 800329e:	6323      	str	r3, [r4, #48]	; 0x30
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	bf00      	nop
 80032a4:	08004321 	.word	0x08004321
 80032a8:	08004343 	.word	0x08004343
 80032ac:	0800437b 	.word	0x0800437b
 80032b0:	0800439f 	.word	0x0800439f

080032b4 <_cleanup_r>:
 80032b4:	4901      	ldr	r1, [pc, #4]	; (80032bc <_cleanup_r+0x8>)
 80032b6:	f000 b8cc 	b.w	8003452 <_fwalk_reent>
 80032ba:	bf00      	nop
 80032bc:	080031d1 	.word	0x080031d1

080032c0 <__sfmoreglue>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	1e4a      	subs	r2, r1, #1
 80032c4:	2568      	movs	r5, #104	; 0x68
 80032c6:	4355      	muls	r5, r2
 80032c8:	460e      	mov	r6, r1
 80032ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032ce:	f7ff fc63 	bl	8002b98 <_malloc_r>
 80032d2:	4604      	mov	r4, r0
 80032d4:	b140      	cbz	r0, 80032e8 <__sfmoreglue+0x28>
 80032d6:	2100      	movs	r1, #0
 80032d8:	e9c0 1600 	strd	r1, r6, [r0]
 80032dc:	300c      	adds	r0, #12
 80032de:	60a0      	str	r0, [r4, #8]
 80032e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032e4:	f7ff fc00 	bl	8002ae8 <memset>
 80032e8:	4620      	mov	r0, r4
 80032ea:	bd70      	pop	{r4, r5, r6, pc}

080032ec <__sfp_lock_acquire>:
 80032ec:	4801      	ldr	r0, [pc, #4]	; (80032f4 <__sfp_lock_acquire+0x8>)
 80032ee:	f000 b8d0 	b.w	8003492 <__retarget_lock_acquire_recursive>
 80032f2:	bf00      	nop
 80032f4:	200000f0 	.word	0x200000f0

080032f8 <__sfp_lock_release>:
 80032f8:	4801      	ldr	r0, [pc, #4]	; (8003300 <__sfp_lock_release+0x8>)
 80032fa:	f000 b8cb 	b.w	8003494 <__retarget_lock_release_recursive>
 80032fe:	bf00      	nop
 8003300:	200000f0 	.word	0x200000f0

08003304 <__sinit_lock_acquire>:
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <__sinit_lock_acquire+0x8>)
 8003306:	f000 b8c4 	b.w	8003492 <__retarget_lock_acquire_recursive>
 800330a:	bf00      	nop
 800330c:	200000eb 	.word	0x200000eb

08003310 <__sinit_lock_release>:
 8003310:	4801      	ldr	r0, [pc, #4]	; (8003318 <__sinit_lock_release+0x8>)
 8003312:	f000 b8bf 	b.w	8003494 <__retarget_lock_release_recursive>
 8003316:	bf00      	nop
 8003318:	200000eb 	.word	0x200000eb

0800331c <__sinit>:
 800331c:	b510      	push	{r4, lr}
 800331e:	4604      	mov	r4, r0
 8003320:	f7ff fff0 	bl	8003304 <__sinit_lock_acquire>
 8003324:	69a3      	ldr	r3, [r4, #24]
 8003326:	b11b      	cbz	r3, 8003330 <__sinit+0x14>
 8003328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800332c:	f7ff bff0 	b.w	8003310 <__sinit_lock_release>
 8003330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003334:	6523      	str	r3, [r4, #80]	; 0x50
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <__sinit+0x68>)
 8003338:	4a13      	ldr	r2, [pc, #76]	; (8003388 <__sinit+0x6c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	62a2      	str	r2, [r4, #40]	; 0x28
 800333e:	42a3      	cmp	r3, r4
 8003340:	bf04      	itt	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	61a3      	streq	r3, [r4, #24]
 8003346:	4620      	mov	r0, r4
 8003348:	f000 f820 	bl	800338c <__sfp>
 800334c:	6060      	str	r0, [r4, #4]
 800334e:	4620      	mov	r0, r4
 8003350:	f000 f81c 	bl	800338c <__sfp>
 8003354:	60a0      	str	r0, [r4, #8]
 8003356:	4620      	mov	r0, r4
 8003358:	f000 f818 	bl	800338c <__sfp>
 800335c:	2200      	movs	r2, #0
 800335e:	60e0      	str	r0, [r4, #12]
 8003360:	2104      	movs	r1, #4
 8003362:	6860      	ldr	r0, [r4, #4]
 8003364:	f7ff ff82 	bl	800326c <std>
 8003368:	68a0      	ldr	r0, [r4, #8]
 800336a:	2201      	movs	r2, #1
 800336c:	2109      	movs	r1, #9
 800336e:	f7ff ff7d 	bl	800326c <std>
 8003372:	68e0      	ldr	r0, [r4, #12]
 8003374:	2202      	movs	r2, #2
 8003376:	2112      	movs	r1, #18
 8003378:	f7ff ff78 	bl	800326c <std>
 800337c:	2301      	movs	r3, #1
 800337e:	61a3      	str	r3, [r4, #24]
 8003380:	e7d2      	b.n	8003328 <__sinit+0xc>
 8003382:	bf00      	nop
 8003384:	08004944 	.word	0x08004944
 8003388:	080032b5 	.word	0x080032b5

0800338c <__sfp>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	4607      	mov	r7, r0
 8003390:	f7ff ffac 	bl	80032ec <__sfp_lock_acquire>
 8003394:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <__sfp+0x84>)
 8003396:	681e      	ldr	r6, [r3, #0]
 8003398:	69b3      	ldr	r3, [r6, #24]
 800339a:	b913      	cbnz	r3, 80033a2 <__sfp+0x16>
 800339c:	4630      	mov	r0, r6
 800339e:	f7ff ffbd 	bl	800331c <__sinit>
 80033a2:	3648      	adds	r6, #72	; 0x48
 80033a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	d503      	bpl.n	80033b4 <__sfp+0x28>
 80033ac:	6833      	ldr	r3, [r6, #0]
 80033ae:	b30b      	cbz	r3, 80033f4 <__sfp+0x68>
 80033b0:	6836      	ldr	r6, [r6, #0]
 80033b2:	e7f7      	b.n	80033a4 <__sfp+0x18>
 80033b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033b8:	b9d5      	cbnz	r5, 80033f0 <__sfp+0x64>
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <__sfp+0x88>)
 80033bc:	60e3      	str	r3, [r4, #12]
 80033be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033c2:	6665      	str	r5, [r4, #100]	; 0x64
 80033c4:	f000 f864 	bl	8003490 <__retarget_lock_init_recursive>
 80033c8:	f7ff ff96 	bl	80032f8 <__sfp_lock_release>
 80033cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033d4:	6025      	str	r5, [r4, #0]
 80033d6:	61a5      	str	r5, [r4, #24]
 80033d8:	2208      	movs	r2, #8
 80033da:	4629      	mov	r1, r5
 80033dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033e0:	f7ff fb82 	bl	8002ae8 <memset>
 80033e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033ec:	4620      	mov	r0, r4
 80033ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f0:	3468      	adds	r4, #104	; 0x68
 80033f2:	e7d9      	b.n	80033a8 <__sfp+0x1c>
 80033f4:	2104      	movs	r1, #4
 80033f6:	4638      	mov	r0, r7
 80033f8:	f7ff ff62 	bl	80032c0 <__sfmoreglue>
 80033fc:	4604      	mov	r4, r0
 80033fe:	6030      	str	r0, [r6, #0]
 8003400:	2800      	cmp	r0, #0
 8003402:	d1d5      	bne.n	80033b0 <__sfp+0x24>
 8003404:	f7ff ff78 	bl	80032f8 <__sfp_lock_release>
 8003408:	230c      	movs	r3, #12
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	e7ee      	b.n	80033ec <__sfp+0x60>
 800340e:	bf00      	nop
 8003410:	08004944 	.word	0x08004944
 8003414:	ffff0001 	.word	0xffff0001

08003418 <_fwalk>:
 8003418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800341c:	460f      	mov	r7, r1
 800341e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003422:	2600      	movs	r6, #0
 8003424:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003428:	f1b8 0801 	subs.w	r8, r8, #1
 800342c:	d505      	bpl.n	800343a <_fwalk+0x22>
 800342e:	6824      	ldr	r4, [r4, #0]
 8003430:	2c00      	cmp	r4, #0
 8003432:	d1f7      	bne.n	8003424 <_fwalk+0xc>
 8003434:	4630      	mov	r0, r6
 8003436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800343a:	89ab      	ldrh	r3, [r5, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d906      	bls.n	800344e <_fwalk+0x36>
 8003440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003444:	3301      	adds	r3, #1
 8003446:	d002      	beq.n	800344e <_fwalk+0x36>
 8003448:	4628      	mov	r0, r5
 800344a:	47b8      	blx	r7
 800344c:	4306      	orrs	r6, r0
 800344e:	3568      	adds	r5, #104	; 0x68
 8003450:	e7ea      	b.n	8003428 <_fwalk+0x10>

08003452 <_fwalk_reent>:
 8003452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003456:	4606      	mov	r6, r0
 8003458:	4688      	mov	r8, r1
 800345a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800345e:	2700      	movs	r7, #0
 8003460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003464:	f1b9 0901 	subs.w	r9, r9, #1
 8003468:	d505      	bpl.n	8003476 <_fwalk_reent+0x24>
 800346a:	6824      	ldr	r4, [r4, #0]
 800346c:	2c00      	cmp	r4, #0
 800346e:	d1f7      	bne.n	8003460 <_fwalk_reent+0xe>
 8003470:	4638      	mov	r0, r7
 8003472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003476:	89ab      	ldrh	r3, [r5, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d907      	bls.n	800348c <_fwalk_reent+0x3a>
 800347c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003480:	3301      	adds	r3, #1
 8003482:	d003      	beq.n	800348c <_fwalk_reent+0x3a>
 8003484:	4629      	mov	r1, r5
 8003486:	4630      	mov	r0, r6
 8003488:	47c0      	blx	r8
 800348a:	4307      	orrs	r7, r0
 800348c:	3568      	adds	r5, #104	; 0x68
 800348e:	e7e9      	b.n	8003464 <_fwalk_reent+0x12>

08003490 <__retarget_lock_init_recursive>:
 8003490:	4770      	bx	lr

08003492 <__retarget_lock_acquire_recursive>:
 8003492:	4770      	bx	lr

08003494 <__retarget_lock_release_recursive>:
 8003494:	4770      	bx	lr

08003496 <__swhatbuf_r>:
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	460e      	mov	r6, r1
 800349a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349e:	2900      	cmp	r1, #0
 80034a0:	b096      	sub	sp, #88	; 0x58
 80034a2:	4614      	mov	r4, r2
 80034a4:	461d      	mov	r5, r3
 80034a6:	da07      	bge.n	80034b8 <__swhatbuf_r+0x22>
 80034a8:	2300      	movs	r3, #0
 80034aa:	602b      	str	r3, [r5, #0]
 80034ac:	89b3      	ldrh	r3, [r6, #12]
 80034ae:	061a      	lsls	r2, r3, #24
 80034b0:	d410      	bmi.n	80034d4 <__swhatbuf_r+0x3e>
 80034b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b6:	e00e      	b.n	80034d6 <__swhatbuf_r+0x40>
 80034b8:	466a      	mov	r2, sp
 80034ba:	f001 f96d 	bl	8004798 <_fstat_r>
 80034be:	2800      	cmp	r0, #0
 80034c0:	dbf2      	blt.n	80034a8 <__swhatbuf_r+0x12>
 80034c2:	9a01      	ldr	r2, [sp, #4]
 80034c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034cc:	425a      	negs	r2, r3
 80034ce:	415a      	adcs	r2, r3
 80034d0:	602a      	str	r2, [r5, #0]
 80034d2:	e7ee      	b.n	80034b2 <__swhatbuf_r+0x1c>
 80034d4:	2340      	movs	r3, #64	; 0x40
 80034d6:	2000      	movs	r0, #0
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	b016      	add	sp, #88	; 0x58
 80034dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080034e0 <__smakebuf_r>:
 80034e0:	898b      	ldrh	r3, [r1, #12]
 80034e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034e4:	079d      	lsls	r5, r3, #30
 80034e6:	4606      	mov	r6, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	d507      	bpl.n	80034fc <__smakebuf_r+0x1c>
 80034ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	6123      	str	r3, [r4, #16]
 80034f4:	2301      	movs	r3, #1
 80034f6:	6163      	str	r3, [r4, #20]
 80034f8:	b002      	add	sp, #8
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	ab01      	add	r3, sp, #4
 80034fe:	466a      	mov	r2, sp
 8003500:	f7ff ffc9 	bl	8003496 <__swhatbuf_r>
 8003504:	9900      	ldr	r1, [sp, #0]
 8003506:	4605      	mov	r5, r0
 8003508:	4630      	mov	r0, r6
 800350a:	f7ff fb45 	bl	8002b98 <_malloc_r>
 800350e:	b948      	cbnz	r0, 8003524 <__smakebuf_r+0x44>
 8003510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003514:	059a      	lsls	r2, r3, #22
 8003516:	d4ef      	bmi.n	80034f8 <__smakebuf_r+0x18>
 8003518:	f023 0303 	bic.w	r3, r3, #3
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	e7e3      	b.n	80034ec <__smakebuf_r+0xc>
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <__smakebuf_r+0x7c>)
 8003526:	62b3      	str	r3, [r6, #40]	; 0x28
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	6020      	str	r0, [r4, #0]
 800352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003530:	81a3      	strh	r3, [r4, #12]
 8003532:	9b00      	ldr	r3, [sp, #0]
 8003534:	6163      	str	r3, [r4, #20]
 8003536:	9b01      	ldr	r3, [sp, #4]
 8003538:	6120      	str	r0, [r4, #16]
 800353a:	b15b      	cbz	r3, 8003554 <__smakebuf_r+0x74>
 800353c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003540:	4630      	mov	r0, r6
 8003542:	f001 f93b 	bl	80047bc <_isatty_r>
 8003546:	b128      	cbz	r0, 8003554 <__smakebuf_r+0x74>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	81a3      	strh	r3, [r4, #12]
 8003554:	89a0      	ldrh	r0, [r4, #12]
 8003556:	4305      	orrs	r5, r0
 8003558:	81a5      	strh	r5, [r4, #12]
 800355a:	e7cd      	b.n	80034f8 <__smakebuf_r+0x18>
 800355c:	080032b5 	.word	0x080032b5

08003560 <__malloc_lock>:
 8003560:	4801      	ldr	r0, [pc, #4]	; (8003568 <__malloc_lock+0x8>)
 8003562:	f7ff bf96 	b.w	8003492 <__retarget_lock_acquire_recursive>
 8003566:	bf00      	nop
 8003568:	200000ec 	.word	0x200000ec

0800356c <__malloc_unlock>:
 800356c:	4801      	ldr	r0, [pc, #4]	; (8003574 <__malloc_unlock+0x8>)
 800356e:	f7ff bf91 	b.w	8003494 <__retarget_lock_release_recursive>
 8003572:	bf00      	nop
 8003574:	200000ec 	.word	0x200000ec

08003578 <__sfputc_r>:
 8003578:	6893      	ldr	r3, [r2, #8]
 800357a:	3b01      	subs	r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	b410      	push	{r4}
 8003580:	6093      	str	r3, [r2, #8]
 8003582:	da08      	bge.n	8003596 <__sfputc_r+0x1e>
 8003584:	6994      	ldr	r4, [r2, #24]
 8003586:	42a3      	cmp	r3, r4
 8003588:	db01      	blt.n	800358e <__sfputc_r+0x16>
 800358a:	290a      	cmp	r1, #10
 800358c:	d103      	bne.n	8003596 <__sfputc_r+0x1e>
 800358e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003592:	f7ff bcd7 	b.w	8002f44 <__swbuf_r>
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	1c58      	adds	r0, r3, #1
 800359a:	6010      	str	r0, [r2, #0]
 800359c:	7019      	strb	r1, [r3, #0]
 800359e:	4608      	mov	r0, r1
 80035a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <__sfputs_r>:
 80035a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a8:	4606      	mov	r6, r0
 80035aa:	460f      	mov	r7, r1
 80035ac:	4614      	mov	r4, r2
 80035ae:	18d5      	adds	r5, r2, r3
 80035b0:	42ac      	cmp	r4, r5
 80035b2:	d101      	bne.n	80035b8 <__sfputs_r+0x12>
 80035b4:	2000      	movs	r0, #0
 80035b6:	e007      	b.n	80035c8 <__sfputs_r+0x22>
 80035b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035bc:	463a      	mov	r2, r7
 80035be:	4630      	mov	r0, r6
 80035c0:	f7ff ffda 	bl	8003578 <__sfputc_r>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d1f3      	bne.n	80035b0 <__sfputs_r+0xa>
 80035c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035cc <_vfiprintf_r>:
 80035cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d0:	460d      	mov	r5, r1
 80035d2:	b09d      	sub	sp, #116	; 0x74
 80035d4:	4614      	mov	r4, r2
 80035d6:	4698      	mov	r8, r3
 80035d8:	4606      	mov	r6, r0
 80035da:	b118      	cbz	r0, 80035e4 <_vfiprintf_r+0x18>
 80035dc:	6983      	ldr	r3, [r0, #24]
 80035de:	b90b      	cbnz	r3, 80035e4 <_vfiprintf_r+0x18>
 80035e0:	f7ff fe9c 	bl	800331c <__sinit>
 80035e4:	4b89      	ldr	r3, [pc, #548]	; (800380c <_vfiprintf_r+0x240>)
 80035e6:	429d      	cmp	r5, r3
 80035e8:	d11b      	bne.n	8003622 <_vfiprintf_r+0x56>
 80035ea:	6875      	ldr	r5, [r6, #4]
 80035ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035ee:	07d9      	lsls	r1, r3, #31
 80035f0:	d405      	bmi.n	80035fe <_vfiprintf_r+0x32>
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	059a      	lsls	r2, r3, #22
 80035f6:	d402      	bmi.n	80035fe <_vfiprintf_r+0x32>
 80035f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035fa:	f7ff ff4a 	bl	8003492 <__retarget_lock_acquire_recursive>
 80035fe:	89ab      	ldrh	r3, [r5, #12]
 8003600:	071b      	lsls	r3, r3, #28
 8003602:	d501      	bpl.n	8003608 <_vfiprintf_r+0x3c>
 8003604:	692b      	ldr	r3, [r5, #16]
 8003606:	b9eb      	cbnz	r3, 8003644 <_vfiprintf_r+0x78>
 8003608:	4629      	mov	r1, r5
 800360a:	4630      	mov	r0, r6
 800360c:	f7ff fcec 	bl	8002fe8 <__swsetup_r>
 8003610:	b1c0      	cbz	r0, 8003644 <_vfiprintf_r+0x78>
 8003612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003614:	07dc      	lsls	r4, r3, #31
 8003616:	d50e      	bpl.n	8003636 <_vfiprintf_r+0x6a>
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	b01d      	add	sp, #116	; 0x74
 800361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003622:	4b7b      	ldr	r3, [pc, #492]	; (8003810 <_vfiprintf_r+0x244>)
 8003624:	429d      	cmp	r5, r3
 8003626:	d101      	bne.n	800362c <_vfiprintf_r+0x60>
 8003628:	68b5      	ldr	r5, [r6, #8]
 800362a:	e7df      	b.n	80035ec <_vfiprintf_r+0x20>
 800362c:	4b79      	ldr	r3, [pc, #484]	; (8003814 <_vfiprintf_r+0x248>)
 800362e:	429d      	cmp	r5, r3
 8003630:	bf08      	it	eq
 8003632:	68f5      	ldreq	r5, [r6, #12]
 8003634:	e7da      	b.n	80035ec <_vfiprintf_r+0x20>
 8003636:	89ab      	ldrh	r3, [r5, #12]
 8003638:	0598      	lsls	r0, r3, #22
 800363a:	d4ed      	bmi.n	8003618 <_vfiprintf_r+0x4c>
 800363c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800363e:	f7ff ff29 	bl	8003494 <__retarget_lock_release_recursive>
 8003642:	e7e9      	b.n	8003618 <_vfiprintf_r+0x4c>
 8003644:	2300      	movs	r3, #0
 8003646:	9309      	str	r3, [sp, #36]	; 0x24
 8003648:	2320      	movs	r3, #32
 800364a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800364e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003652:	2330      	movs	r3, #48	; 0x30
 8003654:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003818 <_vfiprintf_r+0x24c>
 8003658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800365c:	f04f 0901 	mov.w	r9, #1
 8003660:	4623      	mov	r3, r4
 8003662:	469a      	mov	sl, r3
 8003664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003668:	b10a      	cbz	r2, 800366e <_vfiprintf_r+0xa2>
 800366a:	2a25      	cmp	r2, #37	; 0x25
 800366c:	d1f9      	bne.n	8003662 <_vfiprintf_r+0x96>
 800366e:	ebba 0b04 	subs.w	fp, sl, r4
 8003672:	d00b      	beq.n	800368c <_vfiprintf_r+0xc0>
 8003674:	465b      	mov	r3, fp
 8003676:	4622      	mov	r2, r4
 8003678:	4629      	mov	r1, r5
 800367a:	4630      	mov	r0, r6
 800367c:	f7ff ff93 	bl	80035a6 <__sfputs_r>
 8003680:	3001      	adds	r0, #1
 8003682:	f000 80aa 	beq.w	80037da <_vfiprintf_r+0x20e>
 8003686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003688:	445a      	add	r2, fp
 800368a:	9209      	str	r2, [sp, #36]	; 0x24
 800368c:	f89a 3000 	ldrb.w	r3, [sl]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a2 	beq.w	80037da <_vfiprintf_r+0x20e>
 8003696:	2300      	movs	r3, #0
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036a0:	f10a 0a01 	add.w	sl, sl, #1
 80036a4:	9304      	str	r3, [sp, #16]
 80036a6:	9307      	str	r3, [sp, #28]
 80036a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ac:	931a      	str	r3, [sp, #104]	; 0x68
 80036ae:	4654      	mov	r4, sl
 80036b0:	2205      	movs	r2, #5
 80036b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b6:	4858      	ldr	r0, [pc, #352]	; (8003818 <_vfiprintf_r+0x24c>)
 80036b8:	f7fc fdb2 	bl	8000220 <memchr>
 80036bc:	9a04      	ldr	r2, [sp, #16]
 80036be:	b9d8      	cbnz	r0, 80036f8 <_vfiprintf_r+0x12c>
 80036c0:	06d1      	lsls	r1, r2, #27
 80036c2:	bf44      	itt	mi
 80036c4:	2320      	movmi	r3, #32
 80036c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ca:	0713      	lsls	r3, r2, #28
 80036cc:	bf44      	itt	mi
 80036ce:	232b      	movmi	r3, #43	; 0x2b
 80036d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036d4:	f89a 3000 	ldrb.w	r3, [sl]
 80036d8:	2b2a      	cmp	r3, #42	; 0x2a
 80036da:	d015      	beq.n	8003708 <_vfiprintf_r+0x13c>
 80036dc:	9a07      	ldr	r2, [sp, #28]
 80036de:	4654      	mov	r4, sl
 80036e0:	2000      	movs	r0, #0
 80036e2:	f04f 0c0a 	mov.w	ip, #10
 80036e6:	4621      	mov	r1, r4
 80036e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036ec:	3b30      	subs	r3, #48	; 0x30
 80036ee:	2b09      	cmp	r3, #9
 80036f0:	d94e      	bls.n	8003790 <_vfiprintf_r+0x1c4>
 80036f2:	b1b0      	cbz	r0, 8003722 <_vfiprintf_r+0x156>
 80036f4:	9207      	str	r2, [sp, #28]
 80036f6:	e014      	b.n	8003722 <_vfiprintf_r+0x156>
 80036f8:	eba0 0308 	sub.w	r3, r0, r8
 80036fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003700:	4313      	orrs	r3, r2
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	46a2      	mov	sl, r4
 8003706:	e7d2      	b.n	80036ae <_vfiprintf_r+0xe2>
 8003708:	9b03      	ldr	r3, [sp, #12]
 800370a:	1d19      	adds	r1, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	9103      	str	r1, [sp, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	bfbb      	ittet	lt
 8003714:	425b      	neglt	r3, r3
 8003716:	f042 0202 	orrlt.w	r2, r2, #2
 800371a:	9307      	strge	r3, [sp, #28]
 800371c:	9307      	strlt	r3, [sp, #28]
 800371e:	bfb8      	it	lt
 8003720:	9204      	strlt	r2, [sp, #16]
 8003722:	7823      	ldrb	r3, [r4, #0]
 8003724:	2b2e      	cmp	r3, #46	; 0x2e
 8003726:	d10c      	bne.n	8003742 <_vfiprintf_r+0x176>
 8003728:	7863      	ldrb	r3, [r4, #1]
 800372a:	2b2a      	cmp	r3, #42	; 0x2a
 800372c:	d135      	bne.n	800379a <_vfiprintf_r+0x1ce>
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	1d1a      	adds	r2, r3, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	9203      	str	r2, [sp, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	bfb8      	it	lt
 800373a:	f04f 33ff 	movlt.w	r3, #4294967295
 800373e:	3402      	adds	r4, #2
 8003740:	9305      	str	r3, [sp, #20]
 8003742:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003828 <_vfiprintf_r+0x25c>
 8003746:	7821      	ldrb	r1, [r4, #0]
 8003748:	2203      	movs	r2, #3
 800374a:	4650      	mov	r0, sl
 800374c:	f7fc fd68 	bl	8000220 <memchr>
 8003750:	b140      	cbz	r0, 8003764 <_vfiprintf_r+0x198>
 8003752:	2340      	movs	r3, #64	; 0x40
 8003754:	eba0 000a 	sub.w	r0, r0, sl
 8003758:	fa03 f000 	lsl.w	r0, r3, r0
 800375c:	9b04      	ldr	r3, [sp, #16]
 800375e:	4303      	orrs	r3, r0
 8003760:	3401      	adds	r4, #1
 8003762:	9304      	str	r3, [sp, #16]
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	482c      	ldr	r0, [pc, #176]	; (800381c <_vfiprintf_r+0x250>)
 800376a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800376e:	2206      	movs	r2, #6
 8003770:	f7fc fd56 	bl	8000220 <memchr>
 8003774:	2800      	cmp	r0, #0
 8003776:	d03f      	beq.n	80037f8 <_vfiprintf_r+0x22c>
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <_vfiprintf_r+0x254>)
 800377a:	bb1b      	cbnz	r3, 80037c4 <_vfiprintf_r+0x1f8>
 800377c:	9b03      	ldr	r3, [sp, #12]
 800377e:	3307      	adds	r3, #7
 8003780:	f023 0307 	bic.w	r3, r3, #7
 8003784:	3308      	adds	r3, #8
 8003786:	9303      	str	r3, [sp, #12]
 8003788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800378a:	443b      	add	r3, r7
 800378c:	9309      	str	r3, [sp, #36]	; 0x24
 800378e:	e767      	b.n	8003660 <_vfiprintf_r+0x94>
 8003790:	fb0c 3202 	mla	r2, ip, r2, r3
 8003794:	460c      	mov	r4, r1
 8003796:	2001      	movs	r0, #1
 8003798:	e7a5      	b.n	80036e6 <_vfiprintf_r+0x11a>
 800379a:	2300      	movs	r3, #0
 800379c:	3401      	adds	r4, #1
 800379e:	9305      	str	r3, [sp, #20]
 80037a0:	4619      	mov	r1, r3
 80037a2:	f04f 0c0a 	mov.w	ip, #10
 80037a6:	4620      	mov	r0, r4
 80037a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ac:	3a30      	subs	r2, #48	; 0x30
 80037ae:	2a09      	cmp	r2, #9
 80037b0:	d903      	bls.n	80037ba <_vfiprintf_r+0x1ee>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0c5      	beq.n	8003742 <_vfiprintf_r+0x176>
 80037b6:	9105      	str	r1, [sp, #20]
 80037b8:	e7c3      	b.n	8003742 <_vfiprintf_r+0x176>
 80037ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80037be:	4604      	mov	r4, r0
 80037c0:	2301      	movs	r3, #1
 80037c2:	e7f0      	b.n	80037a6 <_vfiprintf_r+0x1da>
 80037c4:	ab03      	add	r3, sp, #12
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	462a      	mov	r2, r5
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <_vfiprintf_r+0x258>)
 80037cc:	a904      	add	r1, sp, #16
 80037ce:	4630      	mov	r0, r6
 80037d0:	f3af 8000 	nop.w
 80037d4:	4607      	mov	r7, r0
 80037d6:	1c78      	adds	r0, r7, #1
 80037d8:	d1d6      	bne.n	8003788 <_vfiprintf_r+0x1bc>
 80037da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037dc:	07d9      	lsls	r1, r3, #31
 80037de:	d405      	bmi.n	80037ec <_vfiprintf_r+0x220>
 80037e0:	89ab      	ldrh	r3, [r5, #12]
 80037e2:	059a      	lsls	r2, r3, #22
 80037e4:	d402      	bmi.n	80037ec <_vfiprintf_r+0x220>
 80037e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037e8:	f7ff fe54 	bl	8003494 <__retarget_lock_release_recursive>
 80037ec:	89ab      	ldrh	r3, [r5, #12]
 80037ee:	065b      	lsls	r3, r3, #25
 80037f0:	f53f af12 	bmi.w	8003618 <_vfiprintf_r+0x4c>
 80037f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037f6:	e711      	b.n	800361c <_vfiprintf_r+0x50>
 80037f8:	ab03      	add	r3, sp, #12
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	462a      	mov	r2, r5
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <_vfiprintf_r+0x258>)
 8003800:	a904      	add	r1, sp, #16
 8003802:	4630      	mov	r0, r6
 8003804:	f000 f880 	bl	8003908 <_printf_i>
 8003808:	e7e4      	b.n	80037d4 <_vfiprintf_r+0x208>
 800380a:	bf00      	nop
 800380c:	08004968 	.word	0x08004968
 8003810:	08004988 	.word	0x08004988
 8003814:	08004948 	.word	0x08004948
 8003818:	080049a8 	.word	0x080049a8
 800381c:	080049b2 	.word	0x080049b2
 8003820:	00000000 	.word	0x00000000
 8003824:	080035a7 	.word	0x080035a7
 8003828:	080049ae 	.word	0x080049ae

0800382c <_printf_common>:
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	4616      	mov	r6, r2
 8003832:	4699      	mov	r9, r3
 8003834:	688a      	ldr	r2, [r1, #8]
 8003836:	690b      	ldr	r3, [r1, #16]
 8003838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800383c:	4293      	cmp	r3, r2
 800383e:	bfb8      	it	lt
 8003840:	4613      	movlt	r3, r2
 8003842:	6033      	str	r3, [r6, #0]
 8003844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003848:	4607      	mov	r7, r0
 800384a:	460c      	mov	r4, r1
 800384c:	b10a      	cbz	r2, 8003852 <_printf_common+0x26>
 800384e:	3301      	adds	r3, #1
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	0699      	lsls	r1, r3, #26
 8003856:	bf42      	ittt	mi
 8003858:	6833      	ldrmi	r3, [r6, #0]
 800385a:	3302      	addmi	r3, #2
 800385c:	6033      	strmi	r3, [r6, #0]
 800385e:	6825      	ldr	r5, [r4, #0]
 8003860:	f015 0506 	ands.w	r5, r5, #6
 8003864:	d106      	bne.n	8003874 <_printf_common+0x48>
 8003866:	f104 0a19 	add.w	sl, r4, #25
 800386a:	68e3      	ldr	r3, [r4, #12]
 800386c:	6832      	ldr	r2, [r6, #0]
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	42ab      	cmp	r3, r5
 8003872:	dc26      	bgt.n	80038c2 <_printf_common+0x96>
 8003874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003878:	1e13      	subs	r3, r2, #0
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	bf18      	it	ne
 800387e:	2301      	movne	r3, #1
 8003880:	0692      	lsls	r2, r2, #26
 8003882:	d42b      	bmi.n	80038dc <_printf_common+0xb0>
 8003884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003888:	4649      	mov	r1, r9
 800388a:	4638      	mov	r0, r7
 800388c:	47c0      	blx	r8
 800388e:	3001      	adds	r0, #1
 8003890:	d01e      	beq.n	80038d0 <_printf_common+0xa4>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	68e5      	ldr	r5, [r4, #12]
 8003896:	6832      	ldr	r2, [r6, #0]
 8003898:	f003 0306 	and.w	r3, r3, #6
 800389c:	2b04      	cmp	r3, #4
 800389e:	bf08      	it	eq
 80038a0:	1aad      	subeq	r5, r5, r2
 80038a2:	68a3      	ldr	r3, [r4, #8]
 80038a4:	6922      	ldr	r2, [r4, #16]
 80038a6:	bf0c      	ite	eq
 80038a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038ac:	2500      	movne	r5, #0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	bfc4      	itt	gt
 80038b2:	1a9b      	subgt	r3, r3, r2
 80038b4:	18ed      	addgt	r5, r5, r3
 80038b6:	2600      	movs	r6, #0
 80038b8:	341a      	adds	r4, #26
 80038ba:	42b5      	cmp	r5, r6
 80038bc:	d11a      	bne.n	80038f4 <_printf_common+0xc8>
 80038be:	2000      	movs	r0, #0
 80038c0:	e008      	b.n	80038d4 <_printf_common+0xa8>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4652      	mov	r2, sl
 80038c6:	4649      	mov	r1, r9
 80038c8:	4638      	mov	r0, r7
 80038ca:	47c0      	blx	r8
 80038cc:	3001      	adds	r0, #1
 80038ce:	d103      	bne.n	80038d8 <_printf_common+0xac>
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	3501      	adds	r5, #1
 80038da:	e7c6      	b.n	800386a <_printf_common+0x3e>
 80038dc:	18e1      	adds	r1, r4, r3
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	2030      	movs	r0, #48	; 0x30
 80038e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038e6:	4422      	add	r2, r4
 80038e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038f0:	3302      	adds	r3, #2
 80038f2:	e7c7      	b.n	8003884 <_printf_common+0x58>
 80038f4:	2301      	movs	r3, #1
 80038f6:	4622      	mov	r2, r4
 80038f8:	4649      	mov	r1, r9
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c0      	blx	r8
 80038fe:	3001      	adds	r0, #1
 8003900:	d0e6      	beq.n	80038d0 <_printf_common+0xa4>
 8003902:	3601      	adds	r6, #1
 8003904:	e7d9      	b.n	80038ba <_printf_common+0x8e>
	...

08003908 <_printf_i>:
 8003908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	460c      	mov	r4, r1
 800390e:	4691      	mov	r9, r2
 8003910:	7e27      	ldrb	r7, [r4, #24]
 8003912:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003914:	2f78      	cmp	r7, #120	; 0x78
 8003916:	4680      	mov	r8, r0
 8003918:	469a      	mov	sl, r3
 800391a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800391e:	d807      	bhi.n	8003930 <_printf_i+0x28>
 8003920:	2f62      	cmp	r7, #98	; 0x62
 8003922:	d80a      	bhi.n	800393a <_printf_i+0x32>
 8003924:	2f00      	cmp	r7, #0
 8003926:	f000 80d8 	beq.w	8003ada <_printf_i+0x1d2>
 800392a:	2f58      	cmp	r7, #88	; 0x58
 800392c:	f000 80a3 	beq.w	8003a76 <_printf_i+0x16e>
 8003930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003938:	e03a      	b.n	80039b0 <_printf_i+0xa8>
 800393a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800393e:	2b15      	cmp	r3, #21
 8003940:	d8f6      	bhi.n	8003930 <_printf_i+0x28>
 8003942:	a001      	add	r0, pc, #4	; (adr r0, 8003948 <_printf_i+0x40>)
 8003944:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003948:	080039a1 	.word	0x080039a1
 800394c:	080039b5 	.word	0x080039b5
 8003950:	08003931 	.word	0x08003931
 8003954:	08003931 	.word	0x08003931
 8003958:	08003931 	.word	0x08003931
 800395c:	08003931 	.word	0x08003931
 8003960:	080039b5 	.word	0x080039b5
 8003964:	08003931 	.word	0x08003931
 8003968:	08003931 	.word	0x08003931
 800396c:	08003931 	.word	0x08003931
 8003970:	08003931 	.word	0x08003931
 8003974:	08003ac1 	.word	0x08003ac1
 8003978:	080039e5 	.word	0x080039e5
 800397c:	08003aa3 	.word	0x08003aa3
 8003980:	08003931 	.word	0x08003931
 8003984:	08003931 	.word	0x08003931
 8003988:	08003ae3 	.word	0x08003ae3
 800398c:	08003931 	.word	0x08003931
 8003990:	080039e5 	.word	0x080039e5
 8003994:	08003931 	.word	0x08003931
 8003998:	08003931 	.word	0x08003931
 800399c:	08003aab 	.word	0x08003aab
 80039a0:	680b      	ldr	r3, [r1, #0]
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	600a      	str	r2, [r1, #0]
 80039a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0a3      	b.n	8003afc <_printf_i+0x1f4>
 80039b4:	6825      	ldr	r5, [r4, #0]
 80039b6:	6808      	ldr	r0, [r1, #0]
 80039b8:	062e      	lsls	r6, r5, #24
 80039ba:	f100 0304 	add.w	r3, r0, #4
 80039be:	d50a      	bpl.n	80039d6 <_printf_i+0xce>
 80039c0:	6805      	ldr	r5, [r0, #0]
 80039c2:	600b      	str	r3, [r1, #0]
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	da03      	bge.n	80039d0 <_printf_i+0xc8>
 80039c8:	232d      	movs	r3, #45	; 0x2d
 80039ca:	426d      	negs	r5, r5
 80039cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d0:	485e      	ldr	r0, [pc, #376]	; (8003b4c <_printf_i+0x244>)
 80039d2:	230a      	movs	r3, #10
 80039d4:	e019      	b.n	8003a0a <_printf_i+0x102>
 80039d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039da:	6805      	ldr	r5, [r0, #0]
 80039dc:	600b      	str	r3, [r1, #0]
 80039de:	bf18      	it	ne
 80039e0:	b22d      	sxthne	r5, r5
 80039e2:	e7ef      	b.n	80039c4 <_printf_i+0xbc>
 80039e4:	680b      	ldr	r3, [r1, #0]
 80039e6:	6825      	ldr	r5, [r4, #0]
 80039e8:	1d18      	adds	r0, r3, #4
 80039ea:	6008      	str	r0, [r1, #0]
 80039ec:	0628      	lsls	r0, r5, #24
 80039ee:	d501      	bpl.n	80039f4 <_printf_i+0xec>
 80039f0:	681d      	ldr	r5, [r3, #0]
 80039f2:	e002      	b.n	80039fa <_printf_i+0xf2>
 80039f4:	0669      	lsls	r1, r5, #25
 80039f6:	d5fb      	bpl.n	80039f0 <_printf_i+0xe8>
 80039f8:	881d      	ldrh	r5, [r3, #0]
 80039fa:	4854      	ldr	r0, [pc, #336]	; (8003b4c <_printf_i+0x244>)
 80039fc:	2f6f      	cmp	r7, #111	; 0x6f
 80039fe:	bf0c      	ite	eq
 8003a00:	2308      	moveq	r3, #8
 8003a02:	230a      	movne	r3, #10
 8003a04:	2100      	movs	r1, #0
 8003a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a0a:	6866      	ldr	r6, [r4, #4]
 8003a0c:	60a6      	str	r6, [r4, #8]
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	bfa2      	ittt	ge
 8003a12:	6821      	ldrge	r1, [r4, #0]
 8003a14:	f021 0104 	bicge.w	r1, r1, #4
 8003a18:	6021      	strge	r1, [r4, #0]
 8003a1a:	b90d      	cbnz	r5, 8003a20 <_printf_i+0x118>
 8003a1c:	2e00      	cmp	r6, #0
 8003a1e:	d04d      	beq.n	8003abc <_printf_i+0x1b4>
 8003a20:	4616      	mov	r6, r2
 8003a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a26:	fb03 5711 	mls	r7, r3, r1, r5
 8003a2a:	5dc7      	ldrb	r7, [r0, r7]
 8003a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a30:	462f      	mov	r7, r5
 8003a32:	42bb      	cmp	r3, r7
 8003a34:	460d      	mov	r5, r1
 8003a36:	d9f4      	bls.n	8003a22 <_printf_i+0x11a>
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d10b      	bne.n	8003a54 <_printf_i+0x14c>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	07df      	lsls	r7, r3, #31
 8003a40:	d508      	bpl.n	8003a54 <_printf_i+0x14c>
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	6861      	ldr	r1, [r4, #4]
 8003a46:	4299      	cmp	r1, r3
 8003a48:	bfde      	ittt	le
 8003a4a:	2330      	movle	r3, #48	; 0x30
 8003a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a54:	1b92      	subs	r2, r2, r6
 8003a56:	6122      	str	r2, [r4, #16]
 8003a58:	f8cd a000 	str.w	sl, [sp]
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	aa03      	add	r2, sp, #12
 8003a60:	4621      	mov	r1, r4
 8003a62:	4640      	mov	r0, r8
 8003a64:	f7ff fee2 	bl	800382c <_printf_common>
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d14c      	bne.n	8003b06 <_printf_i+0x1fe>
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	b004      	add	sp, #16
 8003a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a76:	4835      	ldr	r0, [pc, #212]	; (8003b4c <_printf_i+0x244>)
 8003a78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	680e      	ldr	r6, [r1, #0]
 8003a80:	061f      	lsls	r7, r3, #24
 8003a82:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a86:	600e      	str	r6, [r1, #0]
 8003a88:	d514      	bpl.n	8003ab4 <_printf_i+0x1ac>
 8003a8a:	07d9      	lsls	r1, r3, #31
 8003a8c:	bf44      	itt	mi
 8003a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8003a92:	6023      	strmi	r3, [r4, #0]
 8003a94:	b91d      	cbnz	r5, 8003a9e <_printf_i+0x196>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	f023 0320 	bic.w	r3, r3, #32
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	e7b0      	b.n	8003a04 <_printf_i+0xfc>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f043 0320 	orr.w	r3, r3, #32
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	2378      	movs	r3, #120	; 0x78
 8003aac:	4828      	ldr	r0, [pc, #160]	; (8003b50 <_printf_i+0x248>)
 8003aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ab2:	e7e3      	b.n	8003a7c <_printf_i+0x174>
 8003ab4:	065e      	lsls	r6, r3, #25
 8003ab6:	bf48      	it	mi
 8003ab8:	b2ad      	uxthmi	r5, r5
 8003aba:	e7e6      	b.n	8003a8a <_printf_i+0x182>
 8003abc:	4616      	mov	r6, r2
 8003abe:	e7bb      	b.n	8003a38 <_printf_i+0x130>
 8003ac0:	680b      	ldr	r3, [r1, #0]
 8003ac2:	6826      	ldr	r6, [r4, #0]
 8003ac4:	6960      	ldr	r0, [r4, #20]
 8003ac6:	1d1d      	adds	r5, r3, #4
 8003ac8:	600d      	str	r5, [r1, #0]
 8003aca:	0635      	lsls	r5, r6, #24
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	d501      	bpl.n	8003ad4 <_printf_i+0x1cc>
 8003ad0:	6018      	str	r0, [r3, #0]
 8003ad2:	e002      	b.n	8003ada <_printf_i+0x1d2>
 8003ad4:	0671      	lsls	r1, r6, #25
 8003ad6:	d5fb      	bpl.n	8003ad0 <_printf_i+0x1c8>
 8003ad8:	8018      	strh	r0, [r3, #0]
 8003ada:	2300      	movs	r3, #0
 8003adc:	6123      	str	r3, [r4, #16]
 8003ade:	4616      	mov	r6, r2
 8003ae0:	e7ba      	b.n	8003a58 <_printf_i+0x150>
 8003ae2:	680b      	ldr	r3, [r1, #0]
 8003ae4:	1d1a      	adds	r2, r3, #4
 8003ae6:	600a      	str	r2, [r1, #0]
 8003ae8:	681e      	ldr	r6, [r3, #0]
 8003aea:	6862      	ldr	r2, [r4, #4]
 8003aec:	2100      	movs	r1, #0
 8003aee:	4630      	mov	r0, r6
 8003af0:	f7fc fb96 	bl	8000220 <memchr>
 8003af4:	b108      	cbz	r0, 8003afa <_printf_i+0x1f2>
 8003af6:	1b80      	subs	r0, r0, r6
 8003af8:	6060      	str	r0, [r4, #4]
 8003afa:	6863      	ldr	r3, [r4, #4]
 8003afc:	6123      	str	r3, [r4, #16]
 8003afe:	2300      	movs	r3, #0
 8003b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b04:	e7a8      	b.n	8003a58 <_printf_i+0x150>
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	4632      	mov	r2, r6
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	47d0      	blx	sl
 8003b10:	3001      	adds	r0, #1
 8003b12:	d0ab      	beq.n	8003a6c <_printf_i+0x164>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	079b      	lsls	r3, r3, #30
 8003b18:	d413      	bmi.n	8003b42 <_printf_i+0x23a>
 8003b1a:	68e0      	ldr	r0, [r4, #12]
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	4298      	cmp	r0, r3
 8003b20:	bfb8      	it	lt
 8003b22:	4618      	movlt	r0, r3
 8003b24:	e7a4      	b.n	8003a70 <_printf_i+0x168>
 8003b26:	2301      	movs	r3, #1
 8003b28:	4632      	mov	r2, r6
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	47d0      	blx	sl
 8003b30:	3001      	adds	r0, #1
 8003b32:	d09b      	beq.n	8003a6c <_printf_i+0x164>
 8003b34:	3501      	adds	r5, #1
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	9903      	ldr	r1, [sp, #12]
 8003b3a:	1a5b      	subs	r3, r3, r1
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dcf2      	bgt.n	8003b26 <_printf_i+0x21e>
 8003b40:	e7eb      	b.n	8003b1a <_printf_i+0x212>
 8003b42:	2500      	movs	r5, #0
 8003b44:	f104 0619 	add.w	r6, r4, #25
 8003b48:	e7f5      	b.n	8003b36 <_printf_i+0x22e>
 8003b4a:	bf00      	nop
 8003b4c:	080049b9 	.word	0x080049b9
 8003b50:	080049ca 	.word	0x080049ca

08003b54 <__svfiscanf_r>:
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b58:	461d      	mov	r5, r3
 8003b5a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003b5c:	07df      	lsls	r7, r3, #31
 8003b5e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003b62:	4606      	mov	r6, r0
 8003b64:	460c      	mov	r4, r1
 8003b66:	4692      	mov	sl, r2
 8003b68:	d405      	bmi.n	8003b76 <__svfiscanf_r+0x22>
 8003b6a:	898b      	ldrh	r3, [r1, #12]
 8003b6c:	0598      	lsls	r0, r3, #22
 8003b6e:	d402      	bmi.n	8003b76 <__svfiscanf_r+0x22>
 8003b70:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8003b72:	f7ff fc8e 	bl	8003492 <__retarget_lock_acquire_recursive>
 8003b76:	2300      	movs	r3, #0
 8003b78:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8003b7c:	4bae      	ldr	r3, [pc, #696]	; (8003e38 <__svfiscanf_r+0x2e4>)
 8003b7e:	93a0      	str	r3, [sp, #640]	; 0x280
 8003b80:	f10d 0804 	add.w	r8, sp, #4
 8003b84:	4bad      	ldr	r3, [pc, #692]	; (8003e3c <__svfiscanf_r+0x2e8>)
 8003b86:	4fae      	ldr	r7, [pc, #696]	; (8003e40 <__svfiscanf_r+0x2ec>)
 8003b88:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8003e44 <__svfiscanf_r+0x2f0>
 8003b8c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003b90:	93a1      	str	r3, [sp, #644]	; 0x284
 8003b92:	9500      	str	r5, [sp, #0]
 8003b94:	f89a b000 	ldrb.w	fp, [sl]
 8003b98:	f1bb 0f00 	cmp.w	fp, #0
 8003b9c:	f000 8170 	beq.w	8003e80 <__svfiscanf_r+0x32c>
 8003ba0:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8003ba4:	f013 0308 	ands.w	r3, r3, #8
 8003ba8:	f10a 0501 	add.w	r5, sl, #1
 8003bac:	d019      	beq.n	8003be2 <__svfiscanf_r+0x8e>
 8003bae:	6863      	ldr	r3, [r4, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	dd0f      	ble.n	8003bd4 <__svfiscanf_r+0x80>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	5cba      	ldrb	r2, [r7, r2]
 8003bba:	0711      	lsls	r1, r2, #28
 8003bbc:	d401      	bmi.n	8003bc2 <__svfiscanf_r+0x6e>
 8003bbe:	46aa      	mov	sl, r5
 8003bc0:	e7e8      	b.n	8003b94 <__svfiscanf_r+0x40>
 8003bc2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003bc4:	3201      	adds	r2, #1
 8003bc6:	9245      	str	r2, [sp, #276]	; 0x114
 8003bc8:	6862      	ldr	r2, [r4, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	3a01      	subs	r2, #1
 8003bce:	6062      	str	r2, [r4, #4]
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	e7ec      	b.n	8003bae <__svfiscanf_r+0x5a>
 8003bd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4630      	mov	r0, r6
 8003bda:	4798      	blx	r3
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d0e9      	beq.n	8003bb4 <__svfiscanf_r+0x60>
 8003be0:	e7ed      	b.n	8003bbe <__svfiscanf_r+0x6a>
 8003be2:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003be6:	f040 8086 	bne.w	8003cf6 <__svfiscanf_r+0x1a2>
 8003bea:	9341      	str	r3, [sp, #260]	; 0x104
 8003bec:	9343      	str	r3, [sp, #268]	; 0x10c
 8003bee:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf4:	bf02      	ittt	eq
 8003bf6:	2310      	moveq	r3, #16
 8003bf8:	9341      	streq	r3, [sp, #260]	; 0x104
 8003bfa:	f10a 0502 	addeq.w	r5, sl, #2
 8003bfe:	220a      	movs	r2, #10
 8003c00:	46aa      	mov	sl, r5
 8003c02:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003c06:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003c0a:	2b09      	cmp	r3, #9
 8003c0c:	d91e      	bls.n	8003c4c <__svfiscanf_r+0xf8>
 8003c0e:	488d      	ldr	r0, [pc, #564]	; (8003e44 <__svfiscanf_r+0x2f0>)
 8003c10:	2203      	movs	r2, #3
 8003c12:	f7fc fb05 	bl	8000220 <memchr>
 8003c16:	b140      	cbz	r0, 8003c2a <__svfiscanf_r+0xd6>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	eba0 0009 	sub.w	r0, r0, r9
 8003c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8003c22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c24:	4318      	orrs	r0, r3
 8003c26:	9041      	str	r0, [sp, #260]	; 0x104
 8003c28:	4655      	mov	r5, sl
 8003c2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c2e:	2b78      	cmp	r3, #120	; 0x78
 8003c30:	d807      	bhi.n	8003c42 <__svfiscanf_r+0xee>
 8003c32:	2b57      	cmp	r3, #87	; 0x57
 8003c34:	d811      	bhi.n	8003c5a <__svfiscanf_r+0x106>
 8003c36:	2b25      	cmp	r3, #37	; 0x25
 8003c38:	d05d      	beq.n	8003cf6 <__svfiscanf_r+0x1a2>
 8003c3a:	d857      	bhi.n	8003cec <__svfiscanf_r+0x198>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80d6 	beq.w	8003dee <__svfiscanf_r+0x29a>
 8003c42:	2303      	movs	r3, #3
 8003c44:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c46:	230a      	movs	r3, #10
 8003c48:	9342      	str	r3, [sp, #264]	; 0x108
 8003c4a:	e08b      	b.n	8003d64 <__svfiscanf_r+0x210>
 8003c4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003c4e:	fb02 1303 	mla	r3, r2, r3, r1
 8003c52:	3b30      	subs	r3, #48	; 0x30
 8003c54:	9343      	str	r3, [sp, #268]	; 0x10c
 8003c56:	4655      	mov	r5, sl
 8003c58:	e7d2      	b.n	8003c00 <__svfiscanf_r+0xac>
 8003c5a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003c5e:	2a20      	cmp	r2, #32
 8003c60:	d8ef      	bhi.n	8003c42 <__svfiscanf_r+0xee>
 8003c62:	a101      	add	r1, pc, #4	; (adr r1, 8003c68 <__svfiscanf_r+0x114>)
 8003c64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003c68:	08003d4f 	.word	0x08003d4f
 8003c6c:	08003c43 	.word	0x08003c43
 8003c70:	08003c43 	.word	0x08003c43
 8003c74:	08003dad 	.word	0x08003dad
 8003c78:	08003c43 	.word	0x08003c43
 8003c7c:	08003c43 	.word	0x08003c43
 8003c80:	08003c43 	.word	0x08003c43
 8003c84:	08003c43 	.word	0x08003c43
 8003c88:	08003c43 	.word	0x08003c43
 8003c8c:	08003c43 	.word	0x08003c43
 8003c90:	08003c43 	.word	0x08003c43
 8003c94:	08003dc3 	.word	0x08003dc3
 8003c98:	08003d99 	.word	0x08003d99
 8003c9c:	08003cf3 	.word	0x08003cf3
 8003ca0:	08003cf3 	.word	0x08003cf3
 8003ca4:	08003cf3 	.word	0x08003cf3
 8003ca8:	08003c43 	.word	0x08003c43
 8003cac:	08003d9d 	.word	0x08003d9d
 8003cb0:	08003c43 	.word	0x08003c43
 8003cb4:	08003c43 	.word	0x08003c43
 8003cb8:	08003c43 	.word	0x08003c43
 8003cbc:	08003c43 	.word	0x08003c43
 8003cc0:	08003dd3 	.word	0x08003dd3
 8003cc4:	08003da5 	.word	0x08003da5
 8003cc8:	08003d47 	.word	0x08003d47
 8003ccc:	08003c43 	.word	0x08003c43
 8003cd0:	08003c43 	.word	0x08003c43
 8003cd4:	08003dcf 	.word	0x08003dcf
 8003cd8:	08003c43 	.word	0x08003c43
 8003cdc:	08003d99 	.word	0x08003d99
 8003ce0:	08003c43 	.word	0x08003c43
 8003ce4:	08003c43 	.word	0x08003c43
 8003ce8:	08003d4f 	.word	0x08003d4f
 8003cec:	3b45      	subs	r3, #69	; 0x45
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d8a7      	bhi.n	8003c42 <__svfiscanf_r+0xee>
 8003cf2:	2305      	movs	r3, #5
 8003cf4:	e035      	b.n	8003d62 <__svfiscanf_r+0x20e>
 8003cf6:	6863      	ldr	r3, [r4, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	dd0d      	ble.n	8003d18 <__svfiscanf_r+0x1c4>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	455a      	cmp	r2, fp
 8003d02:	f040 80bd 	bne.w	8003e80 <__svfiscanf_r+0x32c>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6862      	ldr	r2, [r4, #4]
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d0e:	3a01      	subs	r2, #1
 8003d10:	3301      	adds	r3, #1
 8003d12:	6062      	str	r2, [r4, #4]
 8003d14:	9345      	str	r3, [sp, #276]	; 0x114
 8003d16:	e752      	b.n	8003bbe <__svfiscanf_r+0x6a>
 8003d18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	4798      	blx	r3
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d0eb      	beq.n	8003cfc <__svfiscanf_r+0x1a8>
 8003d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d26:	07da      	lsls	r2, r3, #31
 8003d28:	f140 80a2 	bpl.w	8003e70 <__svfiscanf_r+0x31c>
 8003d2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d066      	beq.n	8003e00 <__svfiscanf_r+0x2ac>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d38:	bf18      	it	ne
 8003d3a:	f04f 30ff 	movne.w	r0, #4294967295
 8003d3e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d48:	f042 0220 	orr.w	r2, r2, #32
 8003d4c:	9241      	str	r2, [sp, #260]	; 0x104
 8003d4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d54:	9241      	str	r2, [sp, #260]	; 0x104
 8003d56:	2210      	movs	r2, #16
 8003d58:	2b6f      	cmp	r3, #111	; 0x6f
 8003d5a:	9242      	str	r2, [sp, #264]	; 0x108
 8003d5c:	bf34      	ite	cc
 8003d5e:	2303      	movcc	r3, #3
 8003d60:	2304      	movcs	r3, #4
 8003d62:	9347      	str	r3, [sp, #284]	; 0x11c
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	dd4d      	ble.n	8003e06 <__svfiscanf_r+0x2b2>
 8003d6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d6c:	065b      	lsls	r3, r3, #25
 8003d6e:	d404      	bmi.n	8003d7a <__svfiscanf_r+0x226>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	781a      	ldrb	r2, [r3, #0]
 8003d74:	5cba      	ldrb	r2, [r7, r2]
 8003d76:	0710      	lsls	r0, r2, #28
 8003d78:	d44c      	bmi.n	8003e14 <__svfiscanf_r+0x2c0>
 8003d7a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	dc63      	bgt.n	8003e48 <__svfiscanf_r+0x2f4>
 8003d80:	466b      	mov	r3, sp
 8003d82:	4622      	mov	r2, r4
 8003d84:	a941      	add	r1, sp, #260	; 0x104
 8003d86:	4630      	mov	r0, r6
 8003d88:	f000 f8b0 	bl	8003eec <_scanf_chars>
 8003d8c:	2801      	cmp	r0, #1
 8003d8e:	d077      	beq.n	8003e80 <__svfiscanf_r+0x32c>
 8003d90:	2802      	cmp	r0, #2
 8003d92:	f47f af14 	bne.w	8003bbe <__svfiscanf_r+0x6a>
 8003d96:	e7c5      	b.n	8003d24 <__svfiscanf_r+0x1d0>
 8003d98:	220a      	movs	r2, #10
 8003d9a:	e7dd      	b.n	8003d58 <__svfiscanf_r+0x204>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9342      	str	r3, [sp, #264]	; 0x108
 8003da0:	2303      	movs	r3, #3
 8003da2:	e7de      	b.n	8003d62 <__svfiscanf_r+0x20e>
 8003da4:	2308      	movs	r3, #8
 8003da6:	9342      	str	r3, [sp, #264]	; 0x108
 8003da8:	2304      	movs	r3, #4
 8003daa:	e7da      	b.n	8003d62 <__svfiscanf_r+0x20e>
 8003dac:	4629      	mov	r1, r5
 8003dae:	4640      	mov	r0, r8
 8003db0:	f000 fa7c 	bl	80042ac <__sccl>
 8003db4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dba:	9341      	str	r3, [sp, #260]	; 0x104
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e7cf      	b.n	8003d62 <__svfiscanf_r+0x20e>
 8003dc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc8:	9341      	str	r3, [sp, #260]	; 0x104
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e7c9      	b.n	8003d62 <__svfiscanf_r+0x20e>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e7c7      	b.n	8003d62 <__svfiscanf_r+0x20e>
 8003dd2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003dd4:	06c3      	lsls	r3, r0, #27
 8003dd6:	f53f aef2 	bmi.w	8003bbe <__svfiscanf_r+0x6a>
 8003dda:	9b00      	ldr	r3, [sp, #0]
 8003ddc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003dde:	1d19      	adds	r1, r3, #4
 8003de0:	9100      	str	r1, [sp, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	07c0      	lsls	r0, r0, #31
 8003de6:	bf4c      	ite	mi
 8003de8:	801a      	strhmi	r2, [r3, #0]
 8003dea:	601a      	strpl	r2, [r3, #0]
 8003dec:	e6e7      	b.n	8003bbe <__svfiscanf_r+0x6a>
 8003dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003df0:	07d8      	lsls	r0, r3, #31
 8003df2:	d405      	bmi.n	8003e00 <__svfiscanf_r+0x2ac>
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	0599      	lsls	r1, r3, #22
 8003df8:	d402      	bmi.n	8003e00 <__svfiscanf_r+0x2ac>
 8003dfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dfc:	f7ff fb4a 	bl	8003494 <__retarget_lock_release_recursive>
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	e79b      	b.n	8003d3e <__svfiscanf_r+0x1ea>
 8003e06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	4798      	blx	r3
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d0ab      	beq.n	8003d6a <__svfiscanf_r+0x216>
 8003e12:	e787      	b.n	8003d24 <__svfiscanf_r+0x1d0>
 8003e14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003e16:	3201      	adds	r2, #1
 8003e18:	9245      	str	r2, [sp, #276]	; 0x114
 8003e1a:	6862      	ldr	r2, [r4, #4]
 8003e1c:	3a01      	subs	r2, #1
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	6062      	str	r2, [r4, #4]
 8003e22:	dd02      	ble.n	8003e2a <__svfiscanf_r+0x2d6>
 8003e24:	3301      	adds	r3, #1
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	e7a2      	b.n	8003d70 <__svfiscanf_r+0x21c>
 8003e2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4630      	mov	r0, r6
 8003e30:	4798      	blx	r3
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d09c      	beq.n	8003d70 <__svfiscanf_r+0x21c>
 8003e36:	e775      	b.n	8003d24 <__svfiscanf_r+0x1d0>
 8003e38:	08004625 	.word	0x08004625
 8003e3c:	08004199 	.word	0x08004199
 8003e40:	080049f7 	.word	0x080049f7
 8003e44:	080049ae 	.word	0x080049ae
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	dc06      	bgt.n	8003e5a <__svfiscanf_r+0x306>
 8003e4c:	466b      	mov	r3, sp
 8003e4e:	4622      	mov	r2, r4
 8003e50:	a941      	add	r1, sp, #260	; 0x104
 8003e52:	4630      	mov	r0, r6
 8003e54:	f000 f8a2 	bl	8003f9c <_scanf_i>
 8003e58:	e798      	b.n	8003d8c <__svfiscanf_r+0x238>
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <__svfiscanf_r+0x344>)
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f43f aeae 	beq.w	8003bbe <__svfiscanf_r+0x6a>
 8003e62:	466b      	mov	r3, sp
 8003e64:	4622      	mov	r2, r4
 8003e66:	a941      	add	r1, sp, #260	; 0x104
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f3af 8000 	nop.w
 8003e6e:	e78d      	b.n	8003d8c <__svfiscanf_r+0x238>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	0599      	lsls	r1, r3, #22
 8003e74:	f53f af5a 	bmi.w	8003d2c <__svfiscanf_r+0x1d8>
 8003e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7a:	f7ff fb0b 	bl	8003494 <__retarget_lock_release_recursive>
 8003e7e:	e755      	b.n	8003d2c <__svfiscanf_r+0x1d8>
 8003e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e82:	07da      	lsls	r2, r3, #31
 8003e84:	d405      	bmi.n	8003e92 <__svfiscanf_r+0x33e>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	059b      	lsls	r3, r3, #22
 8003e8a:	d402      	bmi.n	8003e92 <__svfiscanf_r+0x33e>
 8003e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8e:	f7ff fb01 	bl	8003494 <__retarget_lock_release_recursive>
 8003e92:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003e94:	e753      	b.n	8003d3e <__svfiscanf_r+0x1ea>
 8003e96:	bf00      	nop
 8003e98:	00000000 	.word	0x00000000

08003e9c <_vfiscanf_r>:
 8003e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	b138      	cbz	r0, 8003eb4 <_vfiscanf_r+0x18>
 8003ea4:	6981      	ldr	r1, [r0, #24]
 8003ea6:	b929      	cbnz	r1, 8003eb4 <_vfiscanf_r+0x18>
 8003ea8:	e9cd 2300 	strd	r2, r3, [sp]
 8003eac:	f7ff fa36 	bl	800331c <__sinit>
 8003eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eb4:	490a      	ldr	r1, [pc, #40]	; (8003ee0 <_vfiscanf_r+0x44>)
 8003eb6:	428c      	cmp	r4, r1
 8003eb8:	d107      	bne.n	8003eca <_vfiscanf_r+0x2e>
 8003eba:	686c      	ldr	r4, [r5, #4]
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	b003      	add	sp, #12
 8003ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ec6:	f7ff be45 	b.w	8003b54 <__svfiscanf_r>
 8003eca:	4906      	ldr	r1, [pc, #24]	; (8003ee4 <_vfiscanf_r+0x48>)
 8003ecc:	428c      	cmp	r4, r1
 8003ece:	d101      	bne.n	8003ed4 <_vfiscanf_r+0x38>
 8003ed0:	68ac      	ldr	r4, [r5, #8]
 8003ed2:	e7f3      	b.n	8003ebc <_vfiscanf_r+0x20>
 8003ed4:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <_vfiscanf_r+0x4c>)
 8003ed6:	428c      	cmp	r4, r1
 8003ed8:	bf08      	it	eq
 8003eda:	68ec      	ldreq	r4, [r5, #12]
 8003edc:	e7ee      	b.n	8003ebc <_vfiscanf_r+0x20>
 8003ede:	bf00      	nop
 8003ee0:	08004968 	.word	0x08004968
 8003ee4:	08004988 	.word	0x08004988
 8003ee8:	08004948 	.word	0x08004948

08003eec <_scanf_chars>:
 8003eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef0:	4615      	mov	r5, r2
 8003ef2:	688a      	ldr	r2, [r1, #8]
 8003ef4:	4680      	mov	r8, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	b932      	cbnz	r2, 8003f08 <_scanf_chars+0x1c>
 8003efa:	698a      	ldr	r2, [r1, #24]
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2201      	moveq	r2, #1
 8003f02:	f04f 32ff 	movne.w	r2, #4294967295
 8003f06:	608a      	str	r2, [r1, #8]
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003f98 <_scanf_chars+0xac>
 8003f0e:	06d1      	lsls	r1, r2, #27
 8003f10:	bf5f      	itttt	pl
 8003f12:	681a      	ldrpl	r2, [r3, #0]
 8003f14:	1d11      	addpl	r1, r2, #4
 8003f16:	6019      	strpl	r1, [r3, #0]
 8003f18:	6816      	ldrpl	r6, [r2, #0]
 8003f1a:	2700      	movs	r7, #0
 8003f1c:	69a0      	ldr	r0, [r4, #24]
 8003f1e:	b188      	cbz	r0, 8003f44 <_scanf_chars+0x58>
 8003f20:	2801      	cmp	r0, #1
 8003f22:	d107      	bne.n	8003f34 <_scanf_chars+0x48>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	6963      	ldr	r3, [r4, #20]
 8003f2a:	5c9b      	ldrb	r3, [r3, r2]
 8003f2c:	b953      	cbnz	r3, 8003f44 <_scanf_chars+0x58>
 8003f2e:	bb27      	cbnz	r7, 8003f7a <_scanf_chars+0x8e>
 8003f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f34:	2802      	cmp	r0, #2
 8003f36:	d120      	bne.n	8003f7a <_scanf_chars+0x8e>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003f40:	071b      	lsls	r3, r3, #28
 8003f42:	d41a      	bmi.n	8003f7a <_scanf_chars+0x8e>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	06da      	lsls	r2, r3, #27
 8003f48:	bf5e      	ittt	pl
 8003f4a:	682b      	ldrpl	r3, [r5, #0]
 8003f4c:	781b      	ldrbpl	r3, [r3, #0]
 8003f4e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003f52:	682a      	ldr	r2, [r5, #0]
 8003f54:	686b      	ldr	r3, [r5, #4]
 8003f56:	3201      	adds	r2, #1
 8003f58:	602a      	str	r2, [r5, #0]
 8003f5a:	68a2      	ldr	r2, [r4, #8]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	3a01      	subs	r2, #1
 8003f60:	606b      	str	r3, [r5, #4]
 8003f62:	3701      	adds	r7, #1
 8003f64:	60a2      	str	r2, [r4, #8]
 8003f66:	b142      	cbz	r2, 8003f7a <_scanf_chars+0x8e>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	dcd7      	bgt.n	8003f1c <_scanf_chars+0x30>
 8003f6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003f70:	4629      	mov	r1, r5
 8003f72:	4640      	mov	r0, r8
 8003f74:	4798      	blx	r3
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d0d0      	beq.n	8003f1c <_scanf_chars+0x30>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	f013 0310 	ands.w	r3, r3, #16
 8003f80:	d105      	bne.n	8003f8e <_scanf_chars+0xa2>
 8003f82:	68e2      	ldr	r2, [r4, #12]
 8003f84:	3201      	adds	r2, #1
 8003f86:	60e2      	str	r2, [r4, #12]
 8003f88:	69a2      	ldr	r2, [r4, #24]
 8003f8a:	b102      	cbz	r2, 8003f8e <_scanf_chars+0xa2>
 8003f8c:	7033      	strb	r3, [r6, #0]
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	441f      	add	r7, r3
 8003f92:	6127      	str	r7, [r4, #16]
 8003f94:	2000      	movs	r0, #0
 8003f96:	e7cb      	b.n	8003f30 <_scanf_chars+0x44>
 8003f98:	080049f7 	.word	0x080049f7

08003f9c <_scanf_i>:
 8003f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa0:	4698      	mov	r8, r3
 8003fa2:	4b74      	ldr	r3, [pc, #464]	; (8004174 <_scanf_i+0x1d8>)
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	4682      	mov	sl, r0
 8003fa8:	4616      	mov	r6, r2
 8003faa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	ab03      	add	r3, sp, #12
 8003fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003fb6:	4b70      	ldr	r3, [pc, #448]	; (8004178 <_scanf_i+0x1dc>)
 8003fb8:	69a1      	ldr	r1, [r4, #24]
 8003fba:	4a70      	ldr	r2, [pc, #448]	; (800417c <_scanf_i+0x1e0>)
 8003fbc:	2903      	cmp	r1, #3
 8003fbe:	bf18      	it	ne
 8003fc0:	461a      	movne	r2, r3
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	9201      	str	r2, [sp, #4]
 8003fc6:	1e5a      	subs	r2, r3, #1
 8003fc8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003fcc:	bf88      	it	hi
 8003fce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003fd2:	4627      	mov	r7, r4
 8003fd4:	bf82      	ittt	hi
 8003fd6:	eb03 0905 	addhi.w	r9, r3, r5
 8003fda:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003fde:	60a3      	strhi	r3, [r4, #8]
 8003fe0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003fe4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003fe8:	bf98      	it	ls
 8003fea:	f04f 0900 	movls.w	r9, #0
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	463d      	mov	r5, r7
 8003ff2:	f04f 0b00 	mov.w	fp, #0
 8003ff6:	6831      	ldr	r1, [r6, #0]
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	7809      	ldrb	r1, [r1, #0]
 8003ffc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004000:	2202      	movs	r2, #2
 8004002:	f7fc f90d 	bl	8000220 <memchr>
 8004006:	b328      	cbz	r0, 8004054 <_scanf_i+0xb8>
 8004008:	f1bb 0f01 	cmp.w	fp, #1
 800400c:	d159      	bne.n	80040c2 <_scanf_i+0x126>
 800400e:	6862      	ldr	r2, [r4, #4]
 8004010:	b92a      	cbnz	r2, 800401e <_scanf_i+0x82>
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	2308      	movs	r3, #8
 8004016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401a:	6063      	str	r3, [r4, #4]
 800401c:	6022      	str	r2, [r4, #0]
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004024:	6022      	str	r2, [r4, #0]
 8004026:	68a2      	ldr	r2, [r4, #8]
 8004028:	1e51      	subs	r1, r2, #1
 800402a:	60a1      	str	r1, [r4, #8]
 800402c:	b192      	cbz	r2, 8004054 <_scanf_i+0xb8>
 800402e:	6832      	ldr	r2, [r6, #0]
 8004030:	1c51      	adds	r1, r2, #1
 8004032:	6031      	str	r1, [r6, #0]
 8004034:	7812      	ldrb	r2, [r2, #0]
 8004036:	f805 2b01 	strb.w	r2, [r5], #1
 800403a:	6872      	ldr	r2, [r6, #4]
 800403c:	3a01      	subs	r2, #1
 800403e:	2a00      	cmp	r2, #0
 8004040:	6072      	str	r2, [r6, #4]
 8004042:	dc07      	bgt.n	8004054 <_scanf_i+0xb8>
 8004044:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004048:	4631      	mov	r1, r6
 800404a:	4650      	mov	r0, sl
 800404c:	4790      	blx	r2
 800404e:	2800      	cmp	r0, #0
 8004050:	f040 8085 	bne.w	800415e <_scanf_i+0x1c2>
 8004054:	f10b 0b01 	add.w	fp, fp, #1
 8004058:	f1bb 0f03 	cmp.w	fp, #3
 800405c:	d1cb      	bne.n	8003ff6 <_scanf_i+0x5a>
 800405e:	6863      	ldr	r3, [r4, #4]
 8004060:	b90b      	cbnz	r3, 8004066 <_scanf_i+0xca>
 8004062:	230a      	movs	r3, #10
 8004064:	6063      	str	r3, [r4, #4]
 8004066:	6863      	ldr	r3, [r4, #4]
 8004068:	4945      	ldr	r1, [pc, #276]	; (8004180 <_scanf_i+0x1e4>)
 800406a:	6960      	ldr	r0, [r4, #20]
 800406c:	1ac9      	subs	r1, r1, r3
 800406e:	f000 f91d 	bl	80042ac <__sccl>
 8004072:	f04f 0b00 	mov.w	fp, #0
 8004076:	68a3      	ldr	r3, [r4, #8]
 8004078:	6822      	ldr	r2, [r4, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d03d      	beq.n	80040fa <_scanf_i+0x15e>
 800407e:	6831      	ldr	r1, [r6, #0]
 8004080:	6960      	ldr	r0, [r4, #20]
 8004082:	f891 c000 	ldrb.w	ip, [r1]
 8004086:	f810 000c 	ldrb.w	r0, [r0, ip]
 800408a:	2800      	cmp	r0, #0
 800408c:	d035      	beq.n	80040fa <_scanf_i+0x15e>
 800408e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004092:	d124      	bne.n	80040de <_scanf_i+0x142>
 8004094:	0510      	lsls	r0, r2, #20
 8004096:	d522      	bpl.n	80040de <_scanf_i+0x142>
 8004098:	f10b 0b01 	add.w	fp, fp, #1
 800409c:	f1b9 0f00 	cmp.w	r9, #0
 80040a0:	d003      	beq.n	80040aa <_scanf_i+0x10e>
 80040a2:	3301      	adds	r3, #1
 80040a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80040a8:	60a3      	str	r3, [r4, #8]
 80040aa:	6873      	ldr	r3, [r6, #4]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	6073      	str	r3, [r6, #4]
 80040b2:	dd1b      	ble.n	80040ec <_scanf_i+0x150>
 80040b4:	6833      	ldr	r3, [r6, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	6033      	str	r3, [r6, #0]
 80040ba:	68a3      	ldr	r3, [r4, #8]
 80040bc:	3b01      	subs	r3, #1
 80040be:	60a3      	str	r3, [r4, #8]
 80040c0:	e7d9      	b.n	8004076 <_scanf_i+0xda>
 80040c2:	f1bb 0f02 	cmp.w	fp, #2
 80040c6:	d1ae      	bne.n	8004026 <_scanf_i+0x8a>
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80040ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80040d2:	d1bf      	bne.n	8004054 <_scanf_i+0xb8>
 80040d4:	2310      	movs	r3, #16
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040dc:	e7a2      	b.n	8004024 <_scanf_i+0x88>
 80040de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80040e2:	6022      	str	r2, [r4, #0]
 80040e4:	780b      	ldrb	r3, [r1, #0]
 80040e6:	f805 3b01 	strb.w	r3, [r5], #1
 80040ea:	e7de      	b.n	80040aa <_scanf_i+0x10e>
 80040ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80040f0:	4631      	mov	r1, r6
 80040f2:	4650      	mov	r0, sl
 80040f4:	4798      	blx	r3
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d0df      	beq.n	80040ba <_scanf_i+0x11e>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	05d9      	lsls	r1, r3, #23
 80040fe:	d50d      	bpl.n	800411c <_scanf_i+0x180>
 8004100:	42bd      	cmp	r5, r7
 8004102:	d909      	bls.n	8004118 <_scanf_i+0x17c>
 8004104:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800410c:	4632      	mov	r2, r6
 800410e:	4650      	mov	r0, sl
 8004110:	4798      	blx	r3
 8004112:	f105 39ff 	add.w	r9, r5, #4294967295
 8004116:	464d      	mov	r5, r9
 8004118:	42bd      	cmp	r5, r7
 800411a:	d028      	beq.n	800416e <_scanf_i+0x1d2>
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	f012 0210 	ands.w	r2, r2, #16
 8004122:	d113      	bne.n	800414c <_scanf_i+0x1b0>
 8004124:	702a      	strb	r2, [r5, #0]
 8004126:	6863      	ldr	r3, [r4, #4]
 8004128:	9e01      	ldr	r6, [sp, #4]
 800412a:	4639      	mov	r1, r7
 800412c:	4650      	mov	r0, sl
 800412e:	47b0      	blx	r6
 8004130:	f8d8 3000 	ldr.w	r3, [r8]
 8004134:	6821      	ldr	r1, [r4, #0]
 8004136:	1d1a      	adds	r2, r3, #4
 8004138:	f8c8 2000 	str.w	r2, [r8]
 800413c:	f011 0f20 	tst.w	r1, #32
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	d00f      	beq.n	8004164 <_scanf_i+0x1c8>
 8004144:	6018      	str	r0, [r3, #0]
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	3301      	adds	r3, #1
 800414a:	60e3      	str	r3, [r4, #12]
 800414c:	1bed      	subs	r5, r5, r7
 800414e:	44ab      	add	fp, r5
 8004150:	6925      	ldr	r5, [r4, #16]
 8004152:	445d      	add	r5, fp
 8004154:	6125      	str	r5, [r4, #16]
 8004156:	2000      	movs	r0, #0
 8004158:	b007      	add	sp, #28
 800415a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415e:	f04f 0b00 	mov.w	fp, #0
 8004162:	e7ca      	b.n	80040fa <_scanf_i+0x15e>
 8004164:	07ca      	lsls	r2, r1, #31
 8004166:	bf4c      	ite	mi
 8004168:	8018      	strhmi	r0, [r3, #0]
 800416a:	6018      	strpl	r0, [r3, #0]
 800416c:	e7eb      	b.n	8004146 <_scanf_i+0x1aa>
 800416e:	2001      	movs	r0, #1
 8004170:	e7f2      	b.n	8004158 <_scanf_i+0x1bc>
 8004172:	bf00      	nop
 8004174:	08004928 	.word	0x08004928
 8004178:	080045ad 	.word	0x080045ad
 800417c:	080044b1 	.word	0x080044b1
 8004180:	080049f4 	.word	0x080049f4

08004184 <lflush>:
 8004184:	8983      	ldrh	r3, [r0, #12]
 8004186:	f003 0309 	and.w	r3, r3, #9
 800418a:	2b09      	cmp	r3, #9
 800418c:	d101      	bne.n	8004192 <lflush+0xe>
 800418e:	f7ff b85b 	b.w	8003248 <fflush>
 8004192:	2000      	movs	r0, #0
 8004194:	4770      	bx	lr
	...

08004198 <__srefill_r>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	460c      	mov	r4, r1
 800419c:	4605      	mov	r5, r0
 800419e:	b118      	cbz	r0, 80041a8 <__srefill_r+0x10>
 80041a0:	6983      	ldr	r3, [r0, #24]
 80041a2:	b90b      	cbnz	r3, 80041a8 <__srefill_r+0x10>
 80041a4:	f7ff f8ba 	bl	800331c <__sinit>
 80041a8:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <__srefill_r+0x100>)
 80041aa:	429c      	cmp	r4, r3
 80041ac:	d10a      	bne.n	80041c4 <__srefill_r+0x2c>
 80041ae:	686c      	ldr	r4, [r5, #4]
 80041b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041b4:	2300      	movs	r3, #0
 80041b6:	6063      	str	r3, [r4, #4]
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	069e      	lsls	r6, r3, #26
 80041bc:	d50c      	bpl.n	80041d8 <__srefill_r+0x40>
 80041be:	f04f 30ff 	mov.w	r0, #4294967295
 80041c2:	e066      	b.n	8004292 <__srefill_r+0xfa>
 80041c4:	4b35      	ldr	r3, [pc, #212]	; (800429c <__srefill_r+0x104>)
 80041c6:	429c      	cmp	r4, r3
 80041c8:	d101      	bne.n	80041ce <__srefill_r+0x36>
 80041ca:	68ac      	ldr	r4, [r5, #8]
 80041cc:	e7f0      	b.n	80041b0 <__srefill_r+0x18>
 80041ce:	4b34      	ldr	r3, [pc, #208]	; (80042a0 <__srefill_r+0x108>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	bf08      	it	eq
 80041d4:	68ec      	ldreq	r4, [r5, #12]
 80041d6:	e7eb      	b.n	80041b0 <__srefill_r+0x18>
 80041d8:	0758      	lsls	r0, r3, #29
 80041da:	d448      	bmi.n	800426e <__srefill_r+0xd6>
 80041dc:	06d9      	lsls	r1, r3, #27
 80041de:	d405      	bmi.n	80041ec <__srefill_r+0x54>
 80041e0:	2309      	movs	r3, #9
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041e8:	81a3      	strh	r3, [r4, #12]
 80041ea:	e7e8      	b.n	80041be <__srefill_r+0x26>
 80041ec:	071a      	lsls	r2, r3, #28
 80041ee:	d50b      	bpl.n	8004208 <__srefill_r+0x70>
 80041f0:	4621      	mov	r1, r4
 80041f2:	4628      	mov	r0, r5
 80041f4:	f7fe ffec 	bl	80031d0 <_fflush_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d1e0      	bne.n	80041be <__srefill_r+0x26>
 80041fc:	89a3      	ldrh	r3, [r4, #12]
 80041fe:	60a0      	str	r0, [r4, #8]
 8004200:	f023 0308 	bic.w	r3, r3, #8
 8004204:	81a3      	strh	r3, [r4, #12]
 8004206:	61a0      	str	r0, [r4, #24]
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	81a3      	strh	r3, [r4, #12]
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	b91b      	cbnz	r3, 800421c <__srefill_r+0x84>
 8004214:	4621      	mov	r1, r4
 8004216:	4628      	mov	r0, r5
 8004218:	f7ff f962 	bl	80034e0 <__smakebuf_r>
 800421c:	89a6      	ldrh	r6, [r4, #12]
 800421e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004222:	07b3      	lsls	r3, r6, #30
 8004224:	d00f      	beq.n	8004246 <__srefill_r+0xae>
 8004226:	2301      	movs	r3, #1
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <__srefill_r+0x10c>)
 800422c:	491e      	ldr	r1, [pc, #120]	; (80042a8 <__srefill_r+0x110>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	f006 0609 	and.w	r6, r6, #9
 8004234:	f7ff f8f0 	bl	8003418 <_fwalk>
 8004238:	2e09      	cmp	r6, #9
 800423a:	81a7      	strh	r7, [r4, #12]
 800423c:	d103      	bne.n	8004246 <__srefill_r+0xae>
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f7fe ff3f 	bl	80030c4 <__sflush_r>
 8004246:	6922      	ldr	r2, [r4, #16]
 8004248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800424a:	6963      	ldr	r3, [r4, #20]
 800424c:	6a21      	ldr	r1, [r4, #32]
 800424e:	6022      	str	r2, [r4, #0]
 8004250:	4628      	mov	r0, r5
 8004252:	47b0      	blx	r6
 8004254:	2800      	cmp	r0, #0
 8004256:	6060      	str	r0, [r4, #4]
 8004258:	dc1c      	bgt.n	8004294 <__srefill_r+0xfc>
 800425a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800425e:	bf17      	itett	ne
 8004260:	2200      	movne	r2, #0
 8004262:	f043 0320 	orreq.w	r3, r3, #32
 8004266:	6062      	strne	r2, [r4, #4]
 8004268:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800426c:	e7bc      	b.n	80041e8 <__srefill_r+0x50>
 800426e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004270:	2900      	cmp	r1, #0
 8004272:	d0cd      	beq.n	8004210 <__srefill_r+0x78>
 8004274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004278:	4299      	cmp	r1, r3
 800427a:	d002      	beq.n	8004282 <__srefill_r+0xea>
 800427c:	4628      	mov	r0, r5
 800427e:	f7fe fc3b 	bl	8002af8 <_free_r>
 8004282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004284:	6063      	str	r3, [r4, #4]
 8004286:	2000      	movs	r0, #0
 8004288:	6360      	str	r0, [r4, #52]	; 0x34
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0c0      	beq.n	8004210 <__srefill_r+0x78>
 800428e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004294:	2000      	movs	r0, #0
 8004296:	e7fc      	b.n	8004292 <__srefill_r+0xfa>
 8004298:	08004968 	.word	0x08004968
 800429c:	08004988 	.word	0x08004988
 80042a0:	08004948 	.word	0x08004948
 80042a4:	08004944 	.word	0x08004944
 80042a8:	08004185 	.word	0x08004185

080042ac <__sccl>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	780b      	ldrb	r3, [r1, #0]
 80042b0:	4604      	mov	r4, r0
 80042b2:	2b5e      	cmp	r3, #94	; 0x5e
 80042b4:	bf0b      	itete	eq
 80042b6:	784b      	ldrbeq	r3, [r1, #1]
 80042b8:	1c48      	addne	r0, r1, #1
 80042ba:	1c88      	addeq	r0, r1, #2
 80042bc:	2200      	movne	r2, #0
 80042be:	bf08      	it	eq
 80042c0:	2201      	moveq	r2, #1
 80042c2:	1e61      	subs	r1, r4, #1
 80042c4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80042c8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80042cc:	42a9      	cmp	r1, r5
 80042ce:	d1fb      	bne.n	80042c8 <__sccl+0x1c>
 80042d0:	b90b      	cbnz	r3, 80042d6 <__sccl+0x2a>
 80042d2:	3801      	subs	r0, #1
 80042d4:	bd70      	pop	{r4, r5, r6, pc}
 80042d6:	f082 0101 	eor.w	r1, r2, #1
 80042da:	54e1      	strb	r1, [r4, r3]
 80042dc:	1c42      	adds	r2, r0, #1
 80042de:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80042e2:	2d2d      	cmp	r5, #45	; 0x2d
 80042e4:	f102 36ff 	add.w	r6, r2, #4294967295
 80042e8:	4610      	mov	r0, r2
 80042ea:	d006      	beq.n	80042fa <__sccl+0x4e>
 80042ec:	2d5d      	cmp	r5, #93	; 0x5d
 80042ee:	d0f1      	beq.n	80042d4 <__sccl+0x28>
 80042f0:	b90d      	cbnz	r5, 80042f6 <__sccl+0x4a>
 80042f2:	4630      	mov	r0, r6
 80042f4:	e7ee      	b.n	80042d4 <__sccl+0x28>
 80042f6:	462b      	mov	r3, r5
 80042f8:	e7ef      	b.n	80042da <__sccl+0x2e>
 80042fa:	7816      	ldrb	r6, [r2, #0]
 80042fc:	2e5d      	cmp	r6, #93	; 0x5d
 80042fe:	d0fa      	beq.n	80042f6 <__sccl+0x4a>
 8004300:	42b3      	cmp	r3, r6
 8004302:	dcf8      	bgt.n	80042f6 <__sccl+0x4a>
 8004304:	4618      	mov	r0, r3
 8004306:	3001      	adds	r0, #1
 8004308:	4286      	cmp	r6, r0
 800430a:	5421      	strb	r1, [r4, r0]
 800430c:	dcfb      	bgt.n	8004306 <__sccl+0x5a>
 800430e:	43d8      	mvns	r0, r3
 8004310:	4430      	add	r0, r6
 8004312:	1c5d      	adds	r5, r3, #1
 8004314:	42b3      	cmp	r3, r6
 8004316:	bfa8      	it	ge
 8004318:	2000      	movge	r0, #0
 800431a:	182b      	adds	r3, r5, r0
 800431c:	3202      	adds	r2, #2
 800431e:	e7de      	b.n	80042de <__sccl+0x32>

08004320 <__sread>:
 8004320:	b510      	push	{r4, lr}
 8004322:	460c      	mov	r4, r1
 8004324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004328:	f000 fa9e 	bl	8004868 <_read_r>
 800432c:	2800      	cmp	r0, #0
 800432e:	bfab      	itete	ge
 8004330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004332:	89a3      	ldrhlt	r3, [r4, #12]
 8004334:	181b      	addge	r3, r3, r0
 8004336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800433a:	bfac      	ite	ge
 800433c:	6563      	strge	r3, [r4, #84]	; 0x54
 800433e:	81a3      	strhlt	r3, [r4, #12]
 8004340:	bd10      	pop	{r4, pc}

08004342 <__swrite>:
 8004342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004346:	461f      	mov	r7, r3
 8004348:	898b      	ldrh	r3, [r1, #12]
 800434a:	05db      	lsls	r3, r3, #23
 800434c:	4605      	mov	r5, r0
 800434e:	460c      	mov	r4, r1
 8004350:	4616      	mov	r6, r2
 8004352:	d505      	bpl.n	8004360 <__swrite+0x1e>
 8004354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004358:	2302      	movs	r3, #2
 800435a:	2200      	movs	r2, #0
 800435c:	f000 fa3e 	bl	80047dc <_lseek_r>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800436a:	81a3      	strh	r3, [r4, #12]
 800436c:	4632      	mov	r2, r6
 800436e:	463b      	mov	r3, r7
 8004370:	4628      	mov	r0, r5
 8004372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004376:	f000 b9ed 	b.w	8004754 <_write_r>

0800437a <__sseek>:
 800437a:	b510      	push	{r4, lr}
 800437c:	460c      	mov	r4, r1
 800437e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004382:	f000 fa2b 	bl	80047dc <_lseek_r>
 8004386:	1c43      	adds	r3, r0, #1
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	bf15      	itete	ne
 800438c:	6560      	strne	r0, [r4, #84]	; 0x54
 800438e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004396:	81a3      	strheq	r3, [r4, #12]
 8004398:	bf18      	it	ne
 800439a:	81a3      	strhne	r3, [r4, #12]
 800439c:	bd10      	pop	{r4, pc}

0800439e <__sclose>:
 800439e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a2:	f000 b9e9 	b.w	8004778 <_close_r>
	...

080043a8 <_strtol_l.isra.0>:
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ae:	d001      	beq.n	80043b4 <_strtol_l.isra.0+0xc>
 80043b0:	2b24      	cmp	r3, #36	; 0x24
 80043b2:	d906      	bls.n	80043c2 <_strtol_l.isra.0+0x1a>
 80043b4:	f7fe fb66 	bl	8002a84 <__errno>
 80043b8:	2316      	movs	r3, #22
 80043ba:	6003      	str	r3, [r0, #0]
 80043bc:	2000      	movs	r0, #0
 80043be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c2:	4f3a      	ldr	r7, [pc, #232]	; (80044ac <_strtol_l.isra.0+0x104>)
 80043c4:	468e      	mov	lr, r1
 80043c6:	4676      	mov	r6, lr
 80043c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80043cc:	5de5      	ldrb	r5, [r4, r7]
 80043ce:	f015 0508 	ands.w	r5, r5, #8
 80043d2:	d1f8      	bne.n	80043c6 <_strtol_l.isra.0+0x1e>
 80043d4:	2c2d      	cmp	r4, #45	; 0x2d
 80043d6:	d134      	bne.n	8004442 <_strtol_l.isra.0+0x9a>
 80043d8:	f89e 4000 	ldrb.w	r4, [lr]
 80043dc:	f04f 0801 	mov.w	r8, #1
 80043e0:	f106 0e02 	add.w	lr, r6, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d05c      	beq.n	80044a2 <_strtol_l.isra.0+0xfa>
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d10c      	bne.n	8004406 <_strtol_l.isra.0+0x5e>
 80043ec:	2c30      	cmp	r4, #48	; 0x30
 80043ee:	d10a      	bne.n	8004406 <_strtol_l.isra.0+0x5e>
 80043f0:	f89e 4000 	ldrb.w	r4, [lr]
 80043f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80043f8:	2c58      	cmp	r4, #88	; 0x58
 80043fa:	d14d      	bne.n	8004498 <_strtol_l.isra.0+0xf0>
 80043fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004400:	2310      	movs	r3, #16
 8004402:	f10e 0e02 	add.w	lr, lr, #2
 8004406:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800440a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800440e:	2600      	movs	r6, #0
 8004410:	fbbc f9f3 	udiv	r9, ip, r3
 8004414:	4635      	mov	r5, r6
 8004416:	fb03 ca19 	mls	sl, r3, r9, ip
 800441a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800441e:	2f09      	cmp	r7, #9
 8004420:	d818      	bhi.n	8004454 <_strtol_l.isra.0+0xac>
 8004422:	463c      	mov	r4, r7
 8004424:	42a3      	cmp	r3, r4
 8004426:	dd24      	ble.n	8004472 <_strtol_l.isra.0+0xca>
 8004428:	2e00      	cmp	r6, #0
 800442a:	db1f      	blt.n	800446c <_strtol_l.isra.0+0xc4>
 800442c:	45a9      	cmp	r9, r5
 800442e:	d31d      	bcc.n	800446c <_strtol_l.isra.0+0xc4>
 8004430:	d101      	bne.n	8004436 <_strtol_l.isra.0+0x8e>
 8004432:	45a2      	cmp	sl, r4
 8004434:	db1a      	blt.n	800446c <_strtol_l.isra.0+0xc4>
 8004436:	fb05 4503 	mla	r5, r5, r3, r4
 800443a:	2601      	movs	r6, #1
 800443c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004440:	e7eb      	b.n	800441a <_strtol_l.isra.0+0x72>
 8004442:	2c2b      	cmp	r4, #43	; 0x2b
 8004444:	bf08      	it	eq
 8004446:	f89e 4000 	ldrbeq.w	r4, [lr]
 800444a:	46a8      	mov	r8, r5
 800444c:	bf08      	it	eq
 800444e:	f106 0e02 	addeq.w	lr, r6, #2
 8004452:	e7c7      	b.n	80043e4 <_strtol_l.isra.0+0x3c>
 8004454:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004458:	2f19      	cmp	r7, #25
 800445a:	d801      	bhi.n	8004460 <_strtol_l.isra.0+0xb8>
 800445c:	3c37      	subs	r4, #55	; 0x37
 800445e:	e7e1      	b.n	8004424 <_strtol_l.isra.0+0x7c>
 8004460:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004464:	2f19      	cmp	r7, #25
 8004466:	d804      	bhi.n	8004472 <_strtol_l.isra.0+0xca>
 8004468:	3c57      	subs	r4, #87	; 0x57
 800446a:	e7db      	b.n	8004424 <_strtol_l.isra.0+0x7c>
 800446c:	f04f 36ff 	mov.w	r6, #4294967295
 8004470:	e7e4      	b.n	800443c <_strtol_l.isra.0+0x94>
 8004472:	2e00      	cmp	r6, #0
 8004474:	da05      	bge.n	8004482 <_strtol_l.isra.0+0xda>
 8004476:	2322      	movs	r3, #34	; 0x22
 8004478:	6003      	str	r3, [r0, #0]
 800447a:	4665      	mov	r5, ip
 800447c:	b942      	cbnz	r2, 8004490 <_strtol_l.isra.0+0xe8>
 800447e:	4628      	mov	r0, r5
 8004480:	e79d      	b.n	80043be <_strtol_l.isra.0+0x16>
 8004482:	f1b8 0f00 	cmp.w	r8, #0
 8004486:	d000      	beq.n	800448a <_strtol_l.isra.0+0xe2>
 8004488:	426d      	negs	r5, r5
 800448a:	2a00      	cmp	r2, #0
 800448c:	d0f7      	beq.n	800447e <_strtol_l.isra.0+0xd6>
 800448e:	b10e      	cbz	r6, 8004494 <_strtol_l.isra.0+0xec>
 8004490:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	e7f2      	b.n	800447e <_strtol_l.isra.0+0xd6>
 8004498:	2430      	movs	r4, #48	; 0x30
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1b3      	bne.n	8004406 <_strtol_l.isra.0+0x5e>
 800449e:	2308      	movs	r3, #8
 80044a0:	e7b1      	b.n	8004406 <_strtol_l.isra.0+0x5e>
 80044a2:	2c30      	cmp	r4, #48	; 0x30
 80044a4:	d0a4      	beq.n	80043f0 <_strtol_l.isra.0+0x48>
 80044a6:	230a      	movs	r3, #10
 80044a8:	e7ad      	b.n	8004406 <_strtol_l.isra.0+0x5e>
 80044aa:	bf00      	nop
 80044ac:	080049f7 	.word	0x080049f7

080044b0 <_strtol_r>:
 80044b0:	f7ff bf7a 	b.w	80043a8 <_strtol_l.isra.0>

080044b4 <_strtoul_l.isra.0>:
 80044b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044b8:	4e3b      	ldr	r6, [pc, #236]	; (80045a8 <_strtoul_l.isra.0+0xf4>)
 80044ba:	4686      	mov	lr, r0
 80044bc:	468c      	mov	ip, r1
 80044be:	4660      	mov	r0, ip
 80044c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80044c4:	5da5      	ldrb	r5, [r4, r6]
 80044c6:	f015 0508 	ands.w	r5, r5, #8
 80044ca:	d1f8      	bne.n	80044be <_strtoul_l.isra.0+0xa>
 80044cc:	2c2d      	cmp	r4, #45	; 0x2d
 80044ce:	d134      	bne.n	800453a <_strtoul_l.isra.0+0x86>
 80044d0:	f89c 4000 	ldrb.w	r4, [ip]
 80044d4:	f04f 0801 	mov.w	r8, #1
 80044d8:	f100 0c02 	add.w	ip, r0, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d05e      	beq.n	800459e <_strtoul_l.isra.0+0xea>
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d10c      	bne.n	80044fe <_strtoul_l.isra.0+0x4a>
 80044e4:	2c30      	cmp	r4, #48	; 0x30
 80044e6:	d10a      	bne.n	80044fe <_strtoul_l.isra.0+0x4a>
 80044e8:	f89c 0000 	ldrb.w	r0, [ip]
 80044ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80044f0:	2858      	cmp	r0, #88	; 0x58
 80044f2:	d14f      	bne.n	8004594 <_strtoul_l.isra.0+0xe0>
 80044f4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80044f8:	2310      	movs	r3, #16
 80044fa:	f10c 0c02 	add.w	ip, ip, #2
 80044fe:	f04f 37ff 	mov.w	r7, #4294967295
 8004502:	2500      	movs	r5, #0
 8004504:	fbb7 f7f3 	udiv	r7, r7, r3
 8004508:	fb03 f907 	mul.w	r9, r3, r7
 800450c:	ea6f 0909 	mvn.w	r9, r9
 8004510:	4628      	mov	r0, r5
 8004512:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004516:	2e09      	cmp	r6, #9
 8004518:	d818      	bhi.n	800454c <_strtoul_l.isra.0+0x98>
 800451a:	4634      	mov	r4, r6
 800451c:	42a3      	cmp	r3, r4
 800451e:	dd24      	ble.n	800456a <_strtoul_l.isra.0+0xb6>
 8004520:	2d00      	cmp	r5, #0
 8004522:	db1f      	blt.n	8004564 <_strtoul_l.isra.0+0xb0>
 8004524:	4287      	cmp	r7, r0
 8004526:	d31d      	bcc.n	8004564 <_strtoul_l.isra.0+0xb0>
 8004528:	d101      	bne.n	800452e <_strtoul_l.isra.0+0x7a>
 800452a:	45a1      	cmp	r9, r4
 800452c:	db1a      	blt.n	8004564 <_strtoul_l.isra.0+0xb0>
 800452e:	fb00 4003 	mla	r0, r0, r3, r4
 8004532:	2501      	movs	r5, #1
 8004534:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004538:	e7eb      	b.n	8004512 <_strtoul_l.isra.0+0x5e>
 800453a:	2c2b      	cmp	r4, #43	; 0x2b
 800453c:	bf08      	it	eq
 800453e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004542:	46a8      	mov	r8, r5
 8004544:	bf08      	it	eq
 8004546:	f100 0c02 	addeq.w	ip, r0, #2
 800454a:	e7c7      	b.n	80044dc <_strtoul_l.isra.0+0x28>
 800454c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004550:	2e19      	cmp	r6, #25
 8004552:	d801      	bhi.n	8004558 <_strtoul_l.isra.0+0xa4>
 8004554:	3c37      	subs	r4, #55	; 0x37
 8004556:	e7e1      	b.n	800451c <_strtoul_l.isra.0+0x68>
 8004558:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800455c:	2e19      	cmp	r6, #25
 800455e:	d804      	bhi.n	800456a <_strtoul_l.isra.0+0xb6>
 8004560:	3c57      	subs	r4, #87	; 0x57
 8004562:	e7db      	b.n	800451c <_strtoul_l.isra.0+0x68>
 8004564:	f04f 35ff 	mov.w	r5, #4294967295
 8004568:	e7e4      	b.n	8004534 <_strtoul_l.isra.0+0x80>
 800456a:	2d00      	cmp	r5, #0
 800456c:	da07      	bge.n	800457e <_strtoul_l.isra.0+0xca>
 800456e:	2322      	movs	r3, #34	; 0x22
 8004570:	f8ce 3000 	str.w	r3, [lr]
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	b942      	cbnz	r2, 800458c <_strtoul_l.isra.0+0xd8>
 800457a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800457e:	f1b8 0f00 	cmp.w	r8, #0
 8004582:	d000      	beq.n	8004586 <_strtoul_l.isra.0+0xd2>
 8004584:	4240      	negs	r0, r0
 8004586:	2a00      	cmp	r2, #0
 8004588:	d0f7      	beq.n	800457a <_strtoul_l.isra.0+0xc6>
 800458a:	b10d      	cbz	r5, 8004590 <_strtoul_l.isra.0+0xdc>
 800458c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004590:	6011      	str	r1, [r2, #0]
 8004592:	e7f2      	b.n	800457a <_strtoul_l.isra.0+0xc6>
 8004594:	2430      	movs	r4, #48	; 0x30
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1b1      	bne.n	80044fe <_strtoul_l.isra.0+0x4a>
 800459a:	2308      	movs	r3, #8
 800459c:	e7af      	b.n	80044fe <_strtoul_l.isra.0+0x4a>
 800459e:	2c30      	cmp	r4, #48	; 0x30
 80045a0:	d0a2      	beq.n	80044e8 <_strtoul_l.isra.0+0x34>
 80045a2:	230a      	movs	r3, #10
 80045a4:	e7ab      	b.n	80044fe <_strtoul_l.isra.0+0x4a>
 80045a6:	bf00      	nop
 80045a8:	080049f7 	.word	0x080049f7

080045ac <_strtoul_r>:
 80045ac:	f7ff bf82 	b.w	80044b4 <_strtoul_l.isra.0>

080045b0 <__submore>:
 80045b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b4:	460c      	mov	r4, r1
 80045b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80045b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045bc:	4299      	cmp	r1, r3
 80045be:	d11d      	bne.n	80045fc <__submore+0x4c>
 80045c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045c4:	f7fe fae8 	bl	8002b98 <_malloc_r>
 80045c8:	b918      	cbnz	r0, 80045d2 <__submore+0x22>
 80045ca:	f04f 30ff 	mov.w	r0, #4294967295
 80045ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80045d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80045dc:	6360      	str	r0, [r4, #52]	; 0x34
 80045de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80045e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80045e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80045ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80045ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80045f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80045f6:	6020      	str	r0, [r4, #0]
 80045f8:	2000      	movs	r0, #0
 80045fa:	e7e8      	b.n	80045ce <__submore+0x1e>
 80045fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80045fe:	0077      	lsls	r7, r6, #1
 8004600:	463a      	mov	r2, r7
 8004602:	f000 f90b 	bl	800481c <_realloc_r>
 8004606:	4605      	mov	r5, r0
 8004608:	2800      	cmp	r0, #0
 800460a:	d0de      	beq.n	80045ca <__submore+0x1a>
 800460c:	eb00 0806 	add.w	r8, r0, r6
 8004610:	4601      	mov	r1, r0
 8004612:	4632      	mov	r2, r6
 8004614:	4640      	mov	r0, r8
 8004616:	f000 f8f3 	bl	8004800 <memcpy>
 800461a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800461e:	f8c4 8000 	str.w	r8, [r4]
 8004622:	e7e9      	b.n	80045f8 <__submore+0x48>

08004624 <_ungetc_r>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	4614      	mov	r4, r2
 8004628:	1c4a      	adds	r2, r1, #1
 800462a:	4606      	mov	r6, r0
 800462c:	460d      	mov	r5, r1
 800462e:	d103      	bne.n	8004638 <_ungetc_r+0x14>
 8004630:	f04f 35ff 	mov.w	r5, #4294967295
 8004634:	4628      	mov	r0, r5
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	b118      	cbz	r0, 8004642 <_ungetc_r+0x1e>
 800463a:	6983      	ldr	r3, [r0, #24]
 800463c:	b90b      	cbnz	r3, 8004642 <_ungetc_r+0x1e>
 800463e:	f7fe fe6d 	bl	800331c <__sinit>
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <_ungetc_r+0x124>)
 8004644:	429c      	cmp	r4, r3
 8004646:	d11d      	bne.n	8004684 <_ungetc_r+0x60>
 8004648:	6874      	ldr	r4, [r6, #4]
 800464a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800464c:	07db      	lsls	r3, r3, #31
 800464e:	d405      	bmi.n	800465c <_ungetc_r+0x38>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	0598      	lsls	r0, r3, #22
 8004654:	d402      	bmi.n	800465c <_ungetc_r+0x38>
 8004656:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004658:	f7fe ff1b 	bl	8003492 <__retarget_lock_acquire_recursive>
 800465c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004660:	f023 0320 	bic.w	r3, r3, #32
 8004664:	0759      	lsls	r1, r3, #29
 8004666:	81a3      	strh	r3, [r4, #12]
 8004668:	b29a      	uxth	r2, r3
 800466a:	d42d      	bmi.n	80046c8 <_ungetc_r+0xa4>
 800466c:	06d3      	lsls	r3, r2, #27
 800466e:	d413      	bmi.n	8004698 <_ungetc_r+0x74>
 8004670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004672:	07dd      	lsls	r5, r3, #31
 8004674:	d4dc      	bmi.n	8004630 <_ungetc_r+0xc>
 8004676:	f412 7f00 	tst.w	r2, #512	; 0x200
 800467a:	d1d9      	bne.n	8004630 <_ungetc_r+0xc>
 800467c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800467e:	f7fe ff09 	bl	8003494 <__retarget_lock_release_recursive>
 8004682:	e7d5      	b.n	8004630 <_ungetc_r+0xc>
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <_ungetc_r+0x128>)
 8004686:	429c      	cmp	r4, r3
 8004688:	d101      	bne.n	800468e <_ungetc_r+0x6a>
 800468a:	68b4      	ldr	r4, [r6, #8]
 800468c:	e7dd      	b.n	800464a <_ungetc_r+0x26>
 800468e:	4b30      	ldr	r3, [pc, #192]	; (8004750 <_ungetc_r+0x12c>)
 8004690:	429c      	cmp	r4, r3
 8004692:	bf08      	it	eq
 8004694:	68f4      	ldreq	r4, [r6, #12]
 8004696:	e7d8      	b.n	800464a <_ungetc_r+0x26>
 8004698:	0710      	lsls	r0, r2, #28
 800469a:	d511      	bpl.n	80046c0 <_ungetc_r+0x9c>
 800469c:	4621      	mov	r1, r4
 800469e:	4630      	mov	r0, r6
 80046a0:	f7fe fd96 	bl	80031d0 <_fflush_r>
 80046a4:	b130      	cbz	r0, 80046b4 <_ungetc_r+0x90>
 80046a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046a8:	07d9      	lsls	r1, r3, #31
 80046aa:	d4c1      	bmi.n	8004630 <_ungetc_r+0xc>
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80046b2:	e7e2      	b.n	800467a <_ungetc_r+0x56>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	60a0      	str	r0, [r4, #8]
 80046b8:	f023 0308 	bic.w	r3, r3, #8
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	61a0      	str	r0, [r4, #24]
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046ca:	6862      	ldr	r2, [r4, #4]
 80046cc:	b2ed      	uxtb	r5, r5
 80046ce:	b1d3      	cbz	r3, 8004706 <_ungetc_r+0xe2>
 80046d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046d2:	4293      	cmp	r3, r2
 80046d4:	dc05      	bgt.n	80046e2 <_ungetc_r+0xbe>
 80046d6:	4621      	mov	r1, r4
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff ff69 	bl	80045b0 <__submore>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d1e1      	bne.n	80046a6 <_ungetc_r+0x82>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	3301      	adds	r3, #1
 80046f0:	6063      	str	r3, [r4, #4]
 80046f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046f4:	07da      	lsls	r2, r3, #31
 80046f6:	d49d      	bmi.n	8004634 <_ungetc_r+0x10>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	059b      	lsls	r3, r3, #22
 80046fc:	d49a      	bmi.n	8004634 <_ungetc_r+0x10>
 80046fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004700:	f7fe fec8 	bl	8003494 <__retarget_lock_release_recursive>
 8004704:	e796      	b.n	8004634 <_ungetc_r+0x10>
 8004706:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004708:	6920      	ldr	r0, [r4, #16]
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	f001 0101 	and.w	r1, r1, #1
 8004710:	b160      	cbz	r0, 800472c <_ungetc_r+0x108>
 8004712:	4298      	cmp	r0, r3
 8004714:	d20a      	bcs.n	800472c <_ungetc_r+0x108>
 8004716:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800471a:	42a8      	cmp	r0, r5
 800471c:	d106      	bne.n	800472c <_ungetc_r+0x108>
 800471e:	3b01      	subs	r3, #1
 8004720:	3201      	adds	r2, #1
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	6062      	str	r2, [r4, #4]
 8004726:	2900      	cmp	r1, #0
 8004728:	d184      	bne.n	8004634 <_ungetc_r+0x10>
 800472a:	e7e5      	b.n	80046f8 <_ungetc_r+0xd4>
 800472c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004734:	6363      	str	r3, [r4, #52]	; 0x34
 8004736:	2303      	movs	r3, #3
 8004738:	63a3      	str	r3, [r4, #56]	; 0x38
 800473a:	4623      	mov	r3, r4
 800473c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	2301      	movs	r3, #1
 8004744:	6063      	str	r3, [r4, #4]
 8004746:	e7ee      	b.n	8004726 <_ungetc_r+0x102>
 8004748:	08004968 	.word	0x08004968
 800474c:	08004988 	.word	0x08004988
 8004750:	08004948 	.word	0x08004948

08004754 <_write_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d07      	ldr	r5, [pc, #28]	; (8004774 <_write_r+0x20>)
 8004758:	4604      	mov	r4, r0
 800475a:	4608      	mov	r0, r1
 800475c:	4611      	mov	r1, r2
 800475e:	2200      	movs	r2, #0
 8004760:	602a      	str	r2, [r5, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f7fc fbef 	bl	8000f46 <_write>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_write_r+0x1e>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_write_r+0x1e>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	200000f4 	.word	0x200000f4

08004778 <_close_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4d06      	ldr	r5, [pc, #24]	; (8004794 <_close_r+0x1c>)
 800477c:	2300      	movs	r3, #0
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	f7fc fb3a 	bl	8000dfc <_close>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_close_r+0x1a>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_close_r+0x1a>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	200000f4 	.word	0x200000f4

08004798 <_fstat_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d07      	ldr	r5, [pc, #28]	; (80047b8 <_fstat_r+0x20>)
 800479c:	2300      	movs	r3, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	f7fc fb35 	bl	8000e14 <_fstat>
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	d102      	bne.n	80047b4 <_fstat_r+0x1c>
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	b103      	cbz	r3, 80047b4 <_fstat_r+0x1c>
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
 80047b6:	bf00      	nop
 80047b8:	200000f4 	.word	0x200000f4

080047bc <_isatty_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4d06      	ldr	r5, [pc, #24]	; (80047d8 <_isatty_r+0x1c>)
 80047c0:	2300      	movs	r3, #0
 80047c2:	4604      	mov	r4, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	f7fc fb34 	bl	8000e34 <_isatty>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_isatty_r+0x1a>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_isatty_r+0x1a>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	200000f4 	.word	0x200000f4

080047dc <_lseek_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d07      	ldr	r5, [pc, #28]	; (80047fc <_lseek_r+0x20>)
 80047e0:	4604      	mov	r4, r0
 80047e2:	4608      	mov	r0, r1
 80047e4:	4611      	mov	r1, r2
 80047e6:	2200      	movs	r2, #0
 80047e8:	602a      	str	r2, [r5, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f7fc fb2d 	bl	8000e4a <_lseek>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_lseek_r+0x1e>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_lseek_r+0x1e>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	200000f4 	.word	0x200000f4

08004800 <memcpy>:
 8004800:	440a      	add	r2, r1
 8004802:	4291      	cmp	r1, r2
 8004804:	f100 33ff 	add.w	r3, r0, #4294967295
 8004808:	d100      	bne.n	800480c <memcpy+0xc>
 800480a:	4770      	bx	lr
 800480c:	b510      	push	{r4, lr}
 800480e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004816:	4291      	cmp	r1, r2
 8004818:	d1f9      	bne.n	800480e <memcpy+0xe>
 800481a:	bd10      	pop	{r4, pc}

0800481c <_realloc_r>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	4607      	mov	r7, r0
 8004820:	4614      	mov	r4, r2
 8004822:	460e      	mov	r6, r1
 8004824:	b921      	cbnz	r1, 8004830 <_realloc_r+0x14>
 8004826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800482a:	4611      	mov	r1, r2
 800482c:	f7fe b9b4 	b.w	8002b98 <_malloc_r>
 8004830:	b922      	cbnz	r2, 800483c <_realloc_r+0x20>
 8004832:	f7fe f961 	bl	8002af8 <_free_r>
 8004836:	4625      	mov	r5, r4
 8004838:	4628      	mov	r0, r5
 800483a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483c:	f000 f826 	bl	800488c <_malloc_usable_size_r>
 8004840:	42a0      	cmp	r0, r4
 8004842:	d20f      	bcs.n	8004864 <_realloc_r+0x48>
 8004844:	4621      	mov	r1, r4
 8004846:	4638      	mov	r0, r7
 8004848:	f7fe f9a6 	bl	8002b98 <_malloc_r>
 800484c:	4605      	mov	r5, r0
 800484e:	2800      	cmp	r0, #0
 8004850:	d0f2      	beq.n	8004838 <_realloc_r+0x1c>
 8004852:	4631      	mov	r1, r6
 8004854:	4622      	mov	r2, r4
 8004856:	f7ff ffd3 	bl	8004800 <memcpy>
 800485a:	4631      	mov	r1, r6
 800485c:	4638      	mov	r0, r7
 800485e:	f7fe f94b 	bl	8002af8 <_free_r>
 8004862:	e7e9      	b.n	8004838 <_realloc_r+0x1c>
 8004864:	4635      	mov	r5, r6
 8004866:	e7e7      	b.n	8004838 <_realloc_r+0x1c>

08004868 <_read_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d07      	ldr	r5, [pc, #28]	; (8004888 <_read_r+0x20>)
 800486c:	4604      	mov	r4, r0
 800486e:	4608      	mov	r0, r1
 8004870:	4611      	mov	r1, r2
 8004872:	2200      	movs	r2, #0
 8004874:	602a      	str	r2, [r5, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7fc fb3c 	bl	8000ef4 <_read>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_read_r+0x1e>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_read_r+0x1e>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200000f4 	.word	0x200000f4

0800488c <_malloc_usable_size_r>:
 800488c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004890:	1f18      	subs	r0, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfbc      	itt	lt
 8004896:	580b      	ldrlt	r3, [r1, r0]
 8004898:	18c0      	addlt	r0, r0, r3
 800489a:	4770      	bx	lr

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	bf00      	nop
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
