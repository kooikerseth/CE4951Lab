
CE4951Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000155c  20000078  08004e90  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015d4  08004e90  000215d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9bc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fff  00000000  00000000  0002da64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  000305c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bfc  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccae  00000000  00000000  00053c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0074  00000000  00000000  000608e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a3c  00000000  00000000  001309ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004aa0 	.word	0x08004aa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004aa0 	.word	0x08004aa0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b96e 	b.w	8000bb0 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	4604      	mov	r4, r0
 80008f4:	468c      	mov	ip, r1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 8083 	bne.w	8000a02 <__udivmoddi4+0x116>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4617      	mov	r7, r2
 8000900:	d947      	bls.n	8000992 <__udivmoddi4+0xa6>
 8000902:	fab2 f282 	clz	r2, r2
 8000906:	b142      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000908:	f1c2 0020 	rsb	r0, r2, #32
 800090c:	fa24 f000 	lsr.w	r0, r4, r0
 8000910:	4091      	lsls	r1, r2
 8000912:	4097      	lsls	r7, r2
 8000914:	ea40 0c01 	orr.w	ip, r0, r1
 8000918:	4094      	lsls	r4, r2
 800091a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800091e:	0c23      	lsrs	r3, r4, #16
 8000920:	fbbc f6f8 	udiv	r6, ip, r8
 8000924:	fa1f fe87 	uxth.w	lr, r7
 8000928:	fb08 c116 	mls	r1, r8, r6, ip
 800092c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000930:	fb06 f10e 	mul.w	r1, r6, lr
 8000934:	4299      	cmp	r1, r3
 8000936:	d909      	bls.n	800094c <__udivmoddi4+0x60>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f106 30ff 	add.w	r0, r6, #4294967295
 800093e:	f080 8119 	bcs.w	8000b74 <__udivmoddi4+0x288>
 8000942:	4299      	cmp	r1, r3
 8000944:	f240 8116 	bls.w	8000b74 <__udivmoddi4+0x288>
 8000948:	3e02      	subs	r6, #2
 800094a:	443b      	add	r3, r7
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	b2a4      	uxth	r4, r4
 8000950:	fbb3 f0f8 	udiv	r0, r3, r8
 8000954:	fb08 3310 	mls	r3, r8, r0, r3
 8000958:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800095c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000960:	45a6      	cmp	lr, r4
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x8c>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 33ff 	add.w	r3, r0, #4294967295
 800096a:	f080 8105 	bcs.w	8000b78 <__udivmoddi4+0x28c>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8102 	bls.w	8000b78 <__udivmoddi4+0x28c>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097c:	eba4 040e 	sub.w	r4, r4, lr
 8000980:	2600      	movs	r6, #0
 8000982:	b11d      	cbz	r5, 800098c <__udivmoddi4+0xa0>
 8000984:	40d4      	lsrs	r4, r2
 8000986:	2300      	movs	r3, #0
 8000988:	e9c5 4300 	strd	r4, r3, [r5]
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	b902      	cbnz	r2, 8000996 <__udivmoddi4+0xaa>
 8000994:	deff      	udf	#255	; 0xff
 8000996:	fab2 f282 	clz	r2, r2
 800099a:	2a00      	cmp	r2, #0
 800099c:	d150      	bne.n	8000a40 <__udivmoddi4+0x154>
 800099e:	1bcb      	subs	r3, r1, r7
 80009a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a4:	fa1f f887 	uxth.w	r8, r7
 80009a8:	2601      	movs	r6, #1
 80009aa:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ae:	0c21      	lsrs	r1, r4, #16
 80009b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b8:	fb08 f30c 	mul.w	r3, r8, ip
 80009bc:	428b      	cmp	r3, r1
 80009be:	d907      	bls.n	80009d0 <__udivmoddi4+0xe4>
 80009c0:	1879      	adds	r1, r7, r1
 80009c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0xe2>
 80009c8:	428b      	cmp	r3, r1
 80009ca:	f200 80e9 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 80009ce:	4684      	mov	ip, r0
 80009d0:	1ac9      	subs	r1, r1, r3
 80009d2:	b2a3      	uxth	r3, r4
 80009d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009dc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009e0:	fb08 f800 	mul.w	r8, r8, r0
 80009e4:	45a0      	cmp	r8, r4
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x10c>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x10a>
 80009f0:	45a0      	cmp	r8, r4
 80009f2:	f200 80d9 	bhi.w	8000ba8 <__udivmoddi4+0x2bc>
 80009f6:	4618      	mov	r0, r3
 80009f8:	eba4 0408 	sub.w	r4, r4, r8
 80009fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a00:	e7bf      	b.n	8000982 <__udivmoddi4+0x96>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d909      	bls.n	8000a1a <__udivmoddi4+0x12e>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	f000 80b1 	beq.w	8000b6e <__udivmoddi4+0x282>
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a12:	4630      	mov	r0, r6
 8000a14:	4631      	mov	r1, r6
 8000a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1a:	fab3 f683 	clz	r6, r3
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d14a      	bne.n	8000ab8 <__udivmoddi4+0x1cc>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d302      	bcc.n	8000a2c <__udivmoddi4+0x140>
 8000a26:	4282      	cmp	r2, r0
 8000a28:	f200 80b8 	bhi.w	8000b9c <__udivmoddi4+0x2b0>
 8000a2c:	1a84      	subs	r4, r0, r2
 8000a2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a32:	2001      	movs	r0, #1
 8000a34:	468c      	mov	ip, r1
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0a8      	beq.n	800098c <__udivmoddi4+0xa0>
 8000a3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a3e:	e7a5      	b.n	800098c <__udivmoddi4+0xa0>
 8000a40:	f1c2 0320 	rsb	r3, r2, #32
 8000a44:	fa20 f603 	lsr.w	r6, r0, r3
 8000a48:	4097      	lsls	r7, r2
 8000a4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a52:	40d9      	lsrs	r1, r3
 8000a54:	4330      	orrs	r0, r6
 8000a56:	0c03      	lsrs	r3, r0, #16
 8000a58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a5c:	fa1f f887 	uxth.w	r8, r7
 8000a60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f108 	mul.w	r1, r6, r8
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a72:	d909      	bls.n	8000a88 <__udivmoddi4+0x19c>
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a7a:	f080 808d 	bcs.w	8000b98 <__udivmoddi4+0x2ac>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 808a 	bls.w	8000b98 <__udivmoddi4+0x2ac>
 8000a84:	3e02      	subs	r6, #2
 8000a86:	443b      	add	r3, r7
 8000a88:	1a5b      	subs	r3, r3, r1
 8000a8a:	b281      	uxth	r1, r0
 8000a8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a98:	fb00 f308 	mul.w	r3, r0, r8
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d907      	bls.n	8000ab0 <__udivmoddi4+0x1c4>
 8000aa0:	1879      	adds	r1, r7, r1
 8000aa2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000aa6:	d273      	bcs.n	8000b90 <__udivmoddi4+0x2a4>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	d971      	bls.n	8000b90 <__udivmoddi4+0x2a4>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4439      	add	r1, r7
 8000ab0:	1acb      	subs	r3, r1, r3
 8000ab2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ab6:	e778      	b.n	80009aa <__udivmoddi4+0xbe>
 8000ab8:	f1c6 0c20 	rsb	ip, r6, #32
 8000abc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ac0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ac4:	431c      	orrs	r4, r3
 8000ac6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ace:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ad2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ad6:	431f      	orrs	r7, r3
 8000ad8:	0c3b      	lsrs	r3, r7, #16
 8000ada:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ade:	fa1f f884 	uxth.w	r8, r4
 8000ae2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ae6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aea:	fb09 fa08 	mul.w	sl, r9, r8
 8000aee:	458a      	cmp	sl, r1
 8000af0:	fa02 f206 	lsl.w	r2, r2, r6
 8000af4:	fa00 f306 	lsl.w	r3, r0, r6
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x220>
 8000afa:	1861      	adds	r1, r4, r1
 8000afc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b00:	d248      	bcs.n	8000b94 <__udivmoddi4+0x2a8>
 8000b02:	458a      	cmp	sl, r1
 8000b04:	d946      	bls.n	8000b94 <__udivmoddi4+0x2a8>
 8000b06:	f1a9 0902 	sub.w	r9, r9, #2
 8000b0a:	4421      	add	r1, r4
 8000b0c:	eba1 010a 	sub.w	r1, r1, sl
 8000b10:	b2bf      	uxth	r7, r7
 8000b12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b1e:	fb00 f808 	mul.w	r8, r0, r8
 8000b22:	45b8      	cmp	r8, r7
 8000b24:	d907      	bls.n	8000b36 <__udivmoddi4+0x24a>
 8000b26:	19e7      	adds	r7, r4, r7
 8000b28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b2c:	d22e      	bcs.n	8000b8c <__udivmoddi4+0x2a0>
 8000b2e:	45b8      	cmp	r8, r7
 8000b30:	d92c      	bls.n	8000b8c <__udivmoddi4+0x2a0>
 8000b32:	3802      	subs	r0, #2
 8000b34:	4427      	add	r7, r4
 8000b36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b3a:	eba7 0708 	sub.w	r7, r7, r8
 8000b3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b42:	454f      	cmp	r7, r9
 8000b44:	46c6      	mov	lr, r8
 8000b46:	4649      	mov	r1, r9
 8000b48:	d31a      	bcc.n	8000b80 <__udivmoddi4+0x294>
 8000b4a:	d017      	beq.n	8000b7c <__udivmoddi4+0x290>
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x27a>
 8000b4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b52:	eb67 0701 	sbc.w	r7, r7, r1
 8000b56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b5a:	40f2      	lsrs	r2, r6
 8000b5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b60:	40f7      	lsrs	r7, r6
 8000b62:	e9c5 2700 	strd	r2, r7, [r5]
 8000b66:	2600      	movs	r6, #0
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e70b      	b.n	800098c <__udivmoddi4+0xa0>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e9      	b.n	800094c <__udivmoddi4+0x60>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6fd      	b.n	8000978 <__udivmoddi4+0x8c>
 8000b7c:	4543      	cmp	r3, r8
 8000b7e:	d2e5      	bcs.n	8000b4c <__udivmoddi4+0x260>
 8000b80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b84:	eb69 0104 	sbc.w	r1, r9, r4
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7df      	b.n	8000b4c <__udivmoddi4+0x260>
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e7d2      	b.n	8000b36 <__udivmoddi4+0x24a>
 8000b90:	4660      	mov	r0, ip
 8000b92:	e78d      	b.n	8000ab0 <__udivmoddi4+0x1c4>
 8000b94:	4681      	mov	r9, r0
 8000b96:	e7b9      	b.n	8000b0c <__udivmoddi4+0x220>
 8000b98:	4666      	mov	r6, ip
 8000b9a:	e775      	b.n	8000a88 <__udivmoddi4+0x19c>
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	e74a      	b.n	8000a36 <__udivmoddi4+0x14a>
 8000ba0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ba4:	4439      	add	r1, r7
 8000ba6:	e713      	b.n	80009d0 <__udivmoddi4+0xe4>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	443c      	add	r4, r7
 8000bac:	e724      	b.n	80009f8 <__udivmoddi4+0x10c>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_idiv0>:
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <cq_init>:
/*
Initializes a circular queue and returns it
 @ param void
 @ return the initialized circular queue
*/
circular_queue cq_init( void ) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	6018      	str	r0, [r3, #0]

    // create a circular queue with default values
    circular_queue cq = {
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f002 fe0a 	bl	80037e6 <memset>
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	609a      	str	r2, [r3, #8]
            .isempty = DEFAULT_ISEMPTY,
            .isfull = DEFAULT_ISFULL
    };

    // return the circular queue
    return cq;
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4610      	mov	r0, r2
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000bea:	461a      	mov	r2, r3
 8000bec:	f002 fded 	bl	80037ca <memcpy>
}
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <cq_push>:
Pushes an element into the circular queue
@ param cq - the circular queue to push into
@ param c - the character to push into the queue
@ return void
*/
void cq_push( circular_queue * cq, char c ) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	70fb      	strb	r3, [r7, #3]

    // push the character into the queue then increment the pusher
    cq->buffer[(cq->pusher)++] = c;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	1c59      	adds	r1, r3, #1
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	6011      	str	r1, [r2, #0]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	78fa      	ldrb	r2, [r7, #3]
 8000c18:	741a      	strb	r2, [r3, #16]

    // if the pusher passes the end of the buffer, put it back at the start of the buffer
    if ( cq->pusher == CIRCULAR_QUEUE_SIZE ) cq->pusher = 0;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c22:	d102      	bne.n	8000c2a <cq_push+0x2e>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]

    // set the full flag if the pusher moves to the same position as the puller
    cq->isfull = ( cq->pusher == cq->puller );
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	bf0c      	ite	eq
 8000c36:	2301      	moveq	r3, #1
 8000c38:	2300      	movne	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60da      	str	r2, [r3, #12]

    // clear the empty flag
    cq->isempty = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <cq_pull>:
/*
Pulls the next element from the circular queue
@ param cq - the circular queue to pull from
@ return the character from the queue
*/
char cq_pull( circular_queue * cq ) {
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

    // pull the character out of the queue and increment the puller
    char c = cq->buffer[(cq->puller)++];
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	1c59      	adds	r1, r3, #1
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6051      	str	r1, [r2, #4]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	7c1b      	ldrb	r3, [r3, #16]
 8000c6c:	73fb      	strb	r3, [r7, #15]

    // if the pusher passes the end of the buffer, put it back at the start of the buffer
    if ( cq->puller == CIRCULAR_QUEUE_SIZE ) cq->puller = 0;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c76:	d102      	bne.n	8000c7e <cq_pull+0x2a>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]

    // set the empty flag if the puller moves to the same position as the pusher
    cq->isempty = ( cq->puller == cq->pusher );
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	bf0c      	ite	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	609a      	str	r2, [r3, #8]

    // clear the full flag
    cq->isfull = 0;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]

    // return the character
    return c;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <cq_isempty>:
/*
Determines whether a circular queue is empty or not
@ param cq - the circular queue to analyze
@ return 1 if the circular queue is empty, 0 otherwise
*/
int cq_isempty( circular_queue * cq ) {
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
    return cq->isempty;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <cq_isfull>:
/*
Determines whether a circular queue is full or not
@ param cq - the circular queue to analyze
@ return 1 if the circular queue is full, 0 otherwise
*/
int cq_isfull( circular_queue * cq ) {
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
    return cq->isfull;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d124      	bne.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x5c>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000cf4:	f001 fb22 	bl	800233c <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10b      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x3a>
			COLLISION_S;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d0a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000d0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d12:	6193      	str	r3, [r2, #24]
		}else{
			IDLE_S;
		}
	}
}
 8000d14:	e010      	b.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x5c>
			IDLE_S;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d22:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8000d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d2e:	2207      	movs	r2, #7
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40010000 	.word	0x40010000
 8000d44:	40020800 	.word	0x40020800
 8000d48:	2000110c 	.word	0x2000110c
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	20000004 	.word	0x20000004
 8000d54:	20000094 	.word	0x20000094

08000d58 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9){
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d68:	d15a      	bne.n	8000e20 <HAL_GPIO_EXTI_Callback+0xc8>

		if(TIM2->SR & TIM_SR_UIF){
 8000d6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d053      	beq.n	8000e20 <HAL_GPIO_EXTI_Callback+0xc8>
			TIM2->CNT = 0;
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->SR &= ~TIM_SR_UIF;
 8000d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	6113      	str	r3, [r2, #16]

			uint8_t value = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8000d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000d96:	f001 fad1 	bl	800233c <HAL_GPIO_ReadPin>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	73fb      	strb	r3, [r7, #15]
			if (bitCount ==7) {receiveBuffer[byteCount] = 0;}
 8000d9e:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d104      	bne.n	8000db0 <HAL_GPIO_EXTI_Callback+0x58>
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	54d1      	strb	r1, [r2, r3]
			receiveBuffer[byteCount] |= value<<bitCount--;
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1e59      	subs	r1, r3, #1
 8000db8:	481c      	ldr	r0, [pc, #112]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000dba:	6001      	str	r1, [r0, #0]
 8000dbc:	fa02 f103 	lsl.w	r1, r2, r3
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	b24b      	sxtb	r3, r1
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	b25a      	sxtb	r2, r3
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	b2d1      	uxtb	r1, r2
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000dd8:	54d1      	strb	r1, [r2, r3]

			if(bitCount < 0)
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da07      	bge.n	8000df2 <HAL_GPIO_EXTI_Callback+0x9a>
			{
				byteCount++;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000dea:	6013      	str	r3, [r2, #0]
				bitCount = 7;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000dee:	2207      	movs	r2, #7
 8000df0:	601a      	str	r2, [r3, #0]
			}
			if(byteCount == HEADER_LEN+256+1)
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f240 1207 	movw	r2, #263	; 0x107
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d102      	bne.n	8000e04 <HAL_GPIO_EXTI_Callback+0xac>
				byteCount = 0;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]

			BUSY_S;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000e10:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6193      	str	r3, [r2, #24]
			TIM1->CNT = 0;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	20000004 	.word	0x20000004
 8000e30:	20000094 	.word	0x20000094
 8000e34:	200014b8 	.word	0x200014b8
 8000e38:	2000110c 	.word	0x2000110c
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40010000 	.word	0x40010000

08000e44 <crc>:

uint8_t crc(uint8_t *data, size_t len)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
    size_t i;
    for (i = 0; i < len; i++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	e00d      	b.n	8000e74 <crc+0x30>
        crc = crc8x_table[crc ^ data[i]];
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781a      	ldrb	r2, [r3, #0]
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	4053      	eors	r3, r2
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <crc+0x48>)
 8000e6a:	5c9b      	ldrb	r3, [r3, r2]
 8000e6c:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < len; i++) {
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d3ed      	bcc.n	8000e58 <crc+0x14>
    }
    return crc;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	08004bac 	.word	0x08004bac

08000e90 <sendData>:

int sendData(int bytes){
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	//send data
	buffer[bytes] = 0;
 8000e98:	4aa9      	ldr	r2, [pc, #676]	; (8001140 <sendData+0x2b0>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]

	//headers

	messageBuffer[0] = MANCHESTER(0x55); //preamble
 8000ea2:	4ba8      	ldr	r3, [pc, #672]	; (8001144 <sendData+0x2b4>)
 8000ea4:	f649 1299 	movw	r2, #39321	; 0x9999
 8000ea8:	801a      	strh	r2, [r3, #0]
	messageBuffer[1] = MANCHESTER(0x01); //version
 8000eaa:	4ba6      	ldr	r3, [pc, #664]	; (8001144 <sendData+0x2b4>)
 8000eac:	f64a 22a9 	movw	r2, #43689	; 0xaaa9
 8000eb0:	805a      	strh	r2, [r3, #2]
	messageBuffer[2] = MANCHESTER(0x16); //source
 8000eb2:	4ba4      	ldr	r3, [pc, #656]	; (8001144 <sendData+0x2b4>)
 8000eb4:	f64a 1296 	movw	r2, #43414	; 0xa996
 8000eb8:	809a      	strh	r2, [r3, #4]
	messageBuffer[3] = MANCHESTER(0x15); //destination
 8000eba:	4ba2      	ldr	r3, [pc, #648]	; (8001144 <sendData+0x2b4>)
 8000ebc:	f64a 1299 	movw	r2, #43417	; 0xa999
 8000ec0:	80da      	strh	r2, [r3, #6]
	messageBuffer[4] = MANCHESTER(bytes); //length
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <sendData+0x40>
 8000ecc:	2201      	movs	r2, #1
 8000ece:	e000      	b.n	8000ed2 <sendData+0x42>
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <sendData+0x50>
 8000edc:	2304      	movs	r3, #4
 8000ede:	e000      	b.n	8000ee2 <sendData+0x52>
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	f002 0204 	and.w	r2, r2, #4
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d001      	beq.n	8000ef4 <sendData+0x64>
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	e000      	b.n	8000ef6 <sendData+0x66>
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	f002 0208 	and.w	r2, r2, #8
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d001      	beq.n	8000f08 <sendData+0x78>
 8000f04:	2240      	movs	r2, #64	; 0x40
 8000f06:	e000      	b.n	8000f0a <sendData+0x7a>
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	f002 0210 	and.w	r2, r2, #16
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d002      	beq.n	8000f1e <sendData+0x8e>
 8000f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1c:	e001      	b.n	8000f22 <sendData+0x92>
 8000f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	f002 0220 	and.w	r2, r2, #32
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d002      	beq.n	8000f36 <sendData+0xa6>
 8000f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f34:	e001      	b.n	8000f3a <sendData+0xaa>
 8000f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d002      	beq.n	8000f4e <sendData+0xbe>
 8000f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4c:	e001      	b.n	8000f52 <sendData+0xc2>
 8000f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d002      	beq.n	8000f66 <sendData+0xd6>
 8000f60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f64:	e000      	b.n	8000f68 <sendData+0xd8>
 8000f66:	4a78      	ldr	r2, [pc, #480]	; (8001148 <sendData+0x2b8>)
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b75      	ldr	r3, [pc, #468]	; (8001144 <sendData+0x2b4>)
 8000f70:	811a      	strh	r2, [r3, #8]
	messageBuffer[5] = MANCHESTER(CRCENABLE); //crc flag
 8000f72:	4b74      	ldr	r3, [pc, #464]	; (8001144 <sendData+0x2b4>)
 8000f74:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000f78:	815a      	strh	r2, [r3, #10]
	if (CRCENABLE)
		messageBuffer[HEADER_LEN+bytes] = MANCHESTER(crc(buffer,bytes)); //crc flag
	else
		messageBuffer[HEADER_LEN+bytes] = MANCHESTER(0xAA); //crc flag
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	4a71      	ldr	r2, [pc, #452]	; (8001144 <sendData+0x2b4>)
 8000f80:	f246 6166 	movw	r1, #26214	; 0x6666
 8000f84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < bytes;i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e075      	b.n	800107a <sendData+0x1ea>
	  output[i] = MANCHESTER(buffer[i]);
 8000f8e:	4a6c      	ldr	r2, [pc, #432]	; (8001140 <sendData+0x2b0>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <sendData+0x112>
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	e000      	b.n	8000fa4 <sendData+0x114>
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	4966      	ldr	r1, [pc, #408]	; (8001140 <sendData+0x2b0>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	440b      	add	r3, r1
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <sendData+0x128>
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	e000      	b.n	8000fba <sendData+0x12a>
 8000fb8:	2308      	movs	r3, #8
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4960      	ldr	r1, [pc, #384]	; (8001140 <sendData+0x2b0>)
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	440a      	add	r2, r1
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	f002 0204 	and.w	r2, r2, #4
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	d001      	beq.n	8000fd2 <sendData+0x142>
 8000fce:	2210      	movs	r2, #16
 8000fd0:	e000      	b.n	8000fd4 <sendData+0x144>
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4959      	ldr	r1, [pc, #356]	; (8001140 <sendData+0x2b0>)
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	440a      	add	r2, r1
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	f002 0208 	and.w	r2, r2, #8
 8000fe4:	2a00      	cmp	r2, #0
 8000fe6:	d001      	beq.n	8000fec <sendData+0x15c>
 8000fe8:	2240      	movs	r2, #64	; 0x40
 8000fea:	e000      	b.n	8000fee <sendData+0x15e>
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4953      	ldr	r1, [pc, #332]	; (8001140 <sendData+0x2b0>)
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	440a      	add	r2, r1
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	f002 0210 	and.w	r2, r2, #16
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d002      	beq.n	8001008 <sendData+0x178>
 8001002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001006:	e001      	b.n	800100c <sendData+0x17c>
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	494b      	ldr	r1, [pc, #300]	; (8001140 <sendData+0x2b0>)
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	440a      	add	r2, r1
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	f002 0220 	and.w	r2, r2, #32
 800101c:	2a00      	cmp	r2, #0
 800101e:	d002      	beq.n	8001026 <sendData+0x196>
 8001020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001024:	e001      	b.n	800102a <sendData+0x19a>
 8001026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	4944      	ldr	r1, [pc, #272]	; (8001140 <sendData+0x2b0>)
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	440a      	add	r2, r1
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800103a:	2a00      	cmp	r2, #0
 800103c:	d002      	beq.n	8001044 <sendData+0x1b4>
 800103e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001042:	e001      	b.n	8001048 <sendData+0x1b8>
 8001044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001048:	4313      	orrs	r3, r2
 800104a:	b21b      	sxth	r3, r3
 800104c:	493c      	ldr	r1, [pc, #240]	; (8001140 <sendData+0x2b0>)
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	440a      	add	r2, r1
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	b252      	sxtb	r2, r2
 8001056:	2a00      	cmp	r2, #0
 8001058:	da02      	bge.n	8001060 <sendData+0x1d0>
 800105a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800105e:	e000      	b.n	8001062 <sendData+0x1d2>
 8001060:	4a39      	ldr	r2, [pc, #228]	; (8001148 <sendData+0x2b8>)
 8001062:	4313      	orrs	r3, r2
 8001064:	b219      	sxth	r1, r3
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <sendData+0x2bc>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	b28a      	uxth	r2, r1
 8001072:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < bytes;i++){
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	db85      	blt.n	8000f8e <sendData+0xfe>
	}

	while (currentState == COLLISION || currentState == BUSY);
 8001082:	bf00      	nop
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <sendData+0x2c0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d0fb      	beq.n	8001084 <sendData+0x1f4>
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <sendData+0x2c0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f7      	beq.n	8001084 <sendData+0x1f4>
	BUSY_S;
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <sendData+0x2c0>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <sendData+0x2c4>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <sendData+0x2c4>)
 80010a0:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6193      	str	r3, [r2, #24]
	for (int i = 0; i < bytes+HEADER_LEN+1;i++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	e035      	b.n	800111c <sendData+0x28c>
		for (int j = 15; j >= 0; j--){
 80010b0:	230f      	movs	r3, #15
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e02c      	b.n	8001110 <sendData+0x280>
			if (currentState == COLLISION){
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <sendData+0x2c0>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d102      	bne.n	80010c4 <sendData+0x234>
				return -1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e037      	b.n	8001134 <sendData+0x2a4>
			}
			GPIOC->BSRR = (messageBuffer[i] & 1<<j)? GPIO_PIN_8:(uint32_t)GPIO_PIN_8<<16U;
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <sendData+0x2b4>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010cc:	461a      	mov	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	fa42 f303 	asr.w	r3, r2, r3
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <sendData+0x252>
 80010dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e0:	e001      	b.n	80010e6 <sendData+0x256>
 80010e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <sendData+0x2c8>)
 80010e8:	6193      	str	r3, [r2, #24]
			TIM1->CNT = 0;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <sendData+0x2cc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
			TIM8->SR &= ~TIM_SR_UIF;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <sendData+0x2d0>)
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <sendData+0x2d0>)
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	6113      	str	r3, [r2, #16]
			while(!(TIM8->SR & TIM_SR_UIF));
 80010fc:	bf00      	nop
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <sendData+0x2d0>)
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f9      	beq.n	80010fe <sendData+0x26e>
		for (int j = 15; j >= 0; j--){
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3b01      	subs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dacf      	bge.n	80010b6 <sendData+0x226>
	for (int i = 0; i < bytes+HEADER_LEN+1;i++){
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3301      	adds	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3306      	adds	r3, #6
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	429a      	cmp	r2, r3
 8001124:	ddc4      	ble.n	80010b0 <sendData+0x220>
		}
	}

	GPIOC->BSRR |= GPIO_PIN_8;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <sendData+0x2c8>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <sendData+0x2c8>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	6193      	str	r3, [r2, #24]

	return 0;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20001110 	.word	0x20001110
 8001144:	200012a8 	.word	0x200012a8
 8001148:	ffff8000 	.word	0xffff8000
 800114c:	20000000 	.word	0x20000000
 8001150:	2000110c 	.word	0x2000110c
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40010000 	.word	0x40010000
 8001160:	40010400 	.word	0x40010400

08001164 <printMessage>:

void printMessage(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	  printf("\n\nMESSAGE RECIEVED:\n");
 8001168:	4837      	ldr	r0, [pc, #220]	; (8001248 <printMessage+0xe4>)
 800116a:	f002 fbcb 	bl	8003904 <puts>
	  printf("\tPreamble:\t0x%02x\n",receiveBuffer[0]);
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <printMessage+0xe8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	4836      	ldr	r0, [pc, #216]	; (8001250 <printMessage+0xec>)
 8001176:	f002 fb3f 	bl	80037f8 <iprintf>
	  printf("\tVersion:\t0x%02x\n",receiveBuffer[1]);
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <printMessage+0xe8>)
 800117c:	785b      	ldrb	r3, [r3, #1]
 800117e:	4619      	mov	r1, r3
 8001180:	4834      	ldr	r0, [pc, #208]	; (8001254 <printMessage+0xf0>)
 8001182:	f002 fb39 	bl	80037f8 <iprintf>
	  printf("\tSource:\t\t0x%02x\n",receiveBuffer[2]);
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <printMessage+0xe8>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	4619      	mov	r1, r3
 800118c:	4832      	ldr	r0, [pc, #200]	; (8001258 <printMessage+0xf4>)
 800118e:	f002 fb33 	bl	80037f8 <iprintf>

	  printf("\tDestination:\t0x%02x",receiveBuffer[3]);
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <printMessage+0xe8>)
 8001194:	78db      	ldrb	r3, [r3, #3]
 8001196:	4619      	mov	r1, r3
 8001198:	4830      	ldr	r0, [pc, #192]	; (800125c <printMessage+0xf8>)
 800119a:	f002 fb2d 	bl	80037f8 <iprintf>
	  if (receiveBuffer[3] == 0x16)
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <printMessage+0xe8>)
 80011a0:	78db      	ldrb	r3, [r3, #3]
 80011a2:	2b16      	cmp	r3, #22
 80011a4:	d103      	bne.n	80011ae <printMessage+0x4a>
		  printf(" - accepted\n");
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <printMessage+0xfc>)
 80011a8:	f002 fbac 	bl	8003904 <puts>
 80011ac:	e002      	b.n	80011b4 <printMessage+0x50>
	  else
		  printf(" - rejected\n");
 80011ae:	482d      	ldr	r0, [pc, #180]	; (8001264 <printMessage+0x100>)
 80011b0:	f002 fba8 	bl	8003904 <puts>

	  printf("\tLength:\t\t0x%02x\n",receiveBuffer[4]);
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <printMessage+0xe8>)
 80011b6:	791b      	ldrb	r3, [r3, #4]
 80011b8:	4619      	mov	r1, r3
 80011ba:	482b      	ldr	r0, [pc, #172]	; (8001268 <printMessage+0x104>)
 80011bc:	f002 fb1c 	bl	80037f8 <iprintf>
	  printf("\tCRC Flag:\t0x%02x\n",receiveBuffer[5]);
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <printMessage+0xe8>)
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	4619      	mov	r1, r3
 80011c6:	4829      	ldr	r0, [pc, #164]	; (800126c <printMessage+0x108>)
 80011c8:	f002 fb16 	bl	80037f8 <iprintf>
	  if (receiveBuffer[5] == 1){
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <printMessage+0xe8>)
 80011ce:	795b      	ldrb	r3, [r3, #5]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d11b      	bne.n	800120c <printMessage+0xa8>
		  printf("\tCRC VAL:\t0x%02x",receiveBuffer[byteCount-1]);
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <printMessage+0x10c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3b01      	subs	r3, #1
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <printMessage+0xe8>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	4619      	mov	r1, r3
 80011e0:	4824      	ldr	r0, [pc, #144]	; (8001274 <printMessage+0x110>)
 80011e2:	f002 fb09 	bl	80037f8 <iprintf>
		  if (crc(receiveBuffer+HEADER_LEN,receiveBuffer[4]+1) == 0)
 80011e6:	4a24      	ldr	r2, [pc, #144]	; (8001278 <printMessage+0x114>)
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <printMessage+0xe8>)
 80011ea:	791b      	ldrb	r3, [r3, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f7ff fe27 	bl	8000e44 <crc>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <printMessage+0xa0>
			  printf(" - success\n");
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <printMessage+0x118>)
 80011fe:	f002 fb81 	bl	8003904 <puts>
 8001202:	e00f      	b.n	8001224 <printMessage+0xc0>
		  else
			  printf(" - fail\n");
 8001204:	481e      	ldr	r0, [pc, #120]	; (8001280 <printMessage+0x11c>)
 8001206:	f002 fb7d 	bl	8003904 <puts>
 800120a:	e00b      	b.n	8001224 <printMessage+0xc0>
	  }
	  else {
		  printf("\tCRC VAL:\t0x%02x",receiveBuffer[byteCount-1]);
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <printMessage+0x10c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <printMessage+0xe8>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	4619      	mov	r1, r3
 8001218:	4816      	ldr	r0, [pc, #88]	; (8001274 <printMessage+0x110>)
 800121a:	f002 faed 	bl	80037f8 <iprintf>
		  printf(" - ignore\n");
 800121e:	4819      	ldr	r0, [pc, #100]	; (8001284 <printMessage+0x120>)
 8001220:	f002 fb70 	bl	8003904 <puts>
	  }

	  printf("\tMESSAGE:\t");
 8001224:	4818      	ldr	r0, [pc, #96]	; (8001288 <printMessage+0x124>)
 8001226:	f002 fae7 	bl	80037f8 <iprintf>
	  fwrite(receiveBuffer+HEADER_LEN, 1, receiveBuffer[4], stdout);
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <printMessage+0x114>)
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <printMessage+0xe8>)
 800122e:	791b      	ldrb	r3, [r3, #4]
 8001230:	461a      	mov	r2, r3
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <printMessage+0x128>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2101      	movs	r1, #1
 800123a:	f002 fa91 	bl	8003760 <fwrite>
	  printf("\n\n");
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <printMessage+0x12c>)
 8001240:	f002 fb60 	bl	8003904 <puts>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08004ab8 	.word	0x08004ab8
 800124c:	200014b8 	.word	0x200014b8
 8001250:	08004acc 	.word	0x08004acc
 8001254:	08004ae0 	.word	0x08004ae0
 8001258:	08004af4 	.word	0x08004af4
 800125c:	08004b08 	.word	0x08004b08
 8001260:	08004b20 	.word	0x08004b20
 8001264:	08004b2c 	.word	0x08004b2c
 8001268:	08004b38 	.word	0x08004b38
 800126c:	08004b4c 	.word	0x08004b4c
 8001270:	20000094 	.word	0x20000094
 8001274:	08004b60 	.word	0x08004b60
 8001278:	200014be 	.word	0x200014be
 800127c:	08004b74 	.word	0x08004b74
 8001280:	08004b80 	.word	0x08004b80
 8001284:	08004b88 	.word	0x08004b88
 8001288:	08004b94 	.word	0x08004b94
 800128c:	20000014 	.word	0x20000014
 8001290:	08004ba0 	.word	0x08004ba0
 8001294:	00000000 	.word	0x00000000

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f000 fd35 	bl	8001d0c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f89f 	bl	80013e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 f9f5 	bl	8001694 <MX_GPIO_Init>
  MX_TIM1_Init();
 80012aa:	f000 f907 	bl	80014bc <MX_TIM1_Init>
  MX_TIM8_Init();
 80012ae:	f000 f9a1 	bl	80015f4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80012b2:	f000 f953 	bl	800155c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80012b6:	4840      	ldr	r0, [pc, #256]	; (80013b8 <main+0x120>)
 80012b8:	f001 fdba 	bl	8002e30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80012bc:	483f      	ldr	r0, [pc, #252]	; (80013bc <main+0x124>)
 80012be:	f001 fdb7 	bl	8002e30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80012c2:	483f      	ldr	r0, [pc, #252]	; (80013c0 <main+0x128>)
 80012c4:	f001 fdb4 	bl	8002e30 <HAL_TIM_Base_Start_IT>
  uart_init(57600,F_CPU);
 80012c8:	493e      	ldr	r1, [pc, #248]	; (80013c4 <main+0x12c>)
 80012ca:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 80012ce:	f000 fbad 	bl	8001a2c <uart_init>
  int readCount = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  char c;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello\n");
 80012d6:	483c      	ldr	r0, [pc, #240]	; (80013c8 <main+0x130>)
 80012d8:	f002 fb14 	bl	8003904 <puts>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	483a      	ldr	r0, [pc, #232]	; (80013cc <main+0x134>)
 80012e4:	f001 f842 	bl	800236c <HAL_GPIO_WritePin>
  bitCount = 7;
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <main+0x138>)
 80012ea:	2207      	movs	r2, #7
 80012ec:	601a      	str	r2, [r3, #0]
  while (1)
  {

	  //Poll for message
	  if(!uart_isempty())
 80012ee:	f000 fc81 	bl	8001bf4 <uart_isempty>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d148      	bne.n	800138a <main+0xf2>
	  {
		  c = uart_getc();
 80012f8:	f000 fc86 	bl	8001c08 <uart_getc>
 80012fc:	4603      	mov	r3, r0
 80012fe:	72fb      	strb	r3, [r7, #11]
		  if(c == '\r' || c == '\n'){
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	2b0d      	cmp	r3, #13
 8001304:	d002      	beq.n	800130c <main+0x74>
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	2b0a      	cmp	r3, #10
 800130a:	d138      	bne.n	800137e <main+0xe6>
			  while (1){
				  if (sendData(readCount) == 0)
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff fdbf 	bl	8000e90 <sendData>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d02e      	beq.n	8001376 <main+0xde>
					  break;
				  // random value between 0 and WAIT_MAX_N
				  double wait = rand()*(0.9);
 8001318:	f002 fafc 	bl	8003914 <rand>
 800131c:	4603      	mov	r3, r0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fa42 	bl	80007a8 <__aeabi_i2d>
 8001324:	a322      	add	r3, pc, #136	; (adr r3, 80013b0 <main+0x118>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7fe ffc1 	bl	80002b0 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	e9c7 2300 	strd	r2, r3, [r7]

				  TIM1->SR &= ~TIM_SR_UIF;
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <main+0x13c>)
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <main+0x13c>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6113      	str	r3, [r2, #16]
				  TIM1->CNT= (uint32_t)(TIM1->ARR * wait);
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <main+0x13c>)
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fa1e 	bl	8000788 <__aeabi_ui2d>
 800134c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001350:	f7fe ffae 	bl	80002b0 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4c1e      	ldr	r4, [pc, #120]	; (80013d4 <main+0x13c>)
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fa8d 	bl	800087c <__aeabi_d2uiz>
 8001362:	4603      	mov	r3, r0
 8001364:	6263      	str	r3, [r4, #36]	; 0x24
				  while(!(TIM1->SR & TIM_SR_UIF));
 8001366:	bf00      	nop
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <main+0x13c>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f9      	beq.n	8001368 <main+0xd0>
			  while (1){
 8001374:	e7ca      	b.n	800130c <main+0x74>
					  break;
 8001376:	bf00      	nop
			  }
			  readCount = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e005      	b.n	800138a <main+0xf2>
		  }
		  else
			  buffer[readCount++] = c;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	60fa      	str	r2, [r7, #12]
 8001384:	4914      	ldr	r1, [pc, #80]	; (80013d8 <main+0x140>)
 8001386:	7afa      	ldrb	r2, [r7, #11]
 8001388:	54ca      	strb	r2, [r1, r3]
	  }

	  //Print received message
	  if(byteCount > HEADER_LEN+receiveBuffer[4])
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <main+0x144>)
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	3306      	adds	r3, #6
 8001390:	461a      	mov	r2, r3
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <main+0x148>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d2a9      	bcs.n	80012ee <main+0x56>
	  {
		  //while(currentState != BUSY);
		  printMessage();
 800139a:	f7ff fee3 	bl	8001164 <printMessage>
		  byteCount = 0;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <main+0x148>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
		  bitCount = 7;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <main+0x138>)
 80013a6:	2207      	movs	r2, #7
 80013a8:	601a      	str	r2, [r3, #0]
	  if(!uart_isempty())
 80013aa:	e7a0      	b.n	80012ee <main+0x56>
 80013ac:	f3af 8000 	nop.w
 80013b0:	cccccccd 	.word	0xcccccccd
 80013b4:	3feccccc 	.word	0x3feccccc
 80013b8:	20001218 	.word	0x20001218
 80013bc:	200010c4 	.word	0x200010c4
 80013c0:	20001260 	.word	0x20001260
 80013c4:	0280de80 	.word	0x0280de80
 80013c8:	08004ba4 	.word	0x08004ba4
 80013cc:	40020800 	.word	0x40020800
 80013d0:	20000004 	.word	0x20000004
 80013d4:	40010000 	.word	0x40010000
 80013d8:	20001110 	.word	0x20001110
 80013dc:	200014b8 	.word	0x200014b8
 80013e0:	20000094 	.word	0x20000094

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b094      	sub	sp, #80	; 0x50
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	2234      	movs	r2, #52	; 0x34
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f9f7 	bl	80037e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <SystemClock_Config+0xd0>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <SystemClock_Config+0xd0>)
 8001412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <SystemClock_Config+0xd0>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001424:	2300      	movs	r3, #0
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <SystemClock_Config+0xd4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <SystemClock_Config+0xd4>)
 800142e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <SystemClock_Config+0xd4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001444:	2301      	movs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001448:	2310      	movs	r3, #16
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144c:	2302      	movs	r3, #2
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001450:	2300      	movs	r3, #0
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001454:	2308      	movs	r3, #8
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001458:	23a8      	movs	r3, #168	; 0xa8
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001460:	2302      	movs	r3, #2
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001464:	2302      	movs	r3, #2
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4618      	mov	r0, r3
 800146e:	f001 f9f1 	bl	8002854 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001478:	f000 f97e 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001480:	2302      	movs	r3, #2
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001488:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800148c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	2105      	movs	r1, #5
 800149a:	4618      	mov	r0, r3
 800149c:	f000 ff98 	bl	80023d0 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014a6:	f000 f967 	bl	8001778 <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3750      	adds	r7, #80	; 0x50
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000

080014bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_TIM1_Init+0x98>)
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <MX_TIM1_Init+0x9c>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 153;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_TIM1_Init+0x98>)
 80014e0:	2299      	movs	r2, #153	; 0x99
 80014e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_TIM1_Init+0x98>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_TIM1_Init+0x98>)
 80014ec:	f640 125f 	movw	r2, #2399	; 0x95f
 80014f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_TIM1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_TIM1_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_TIM1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <MX_TIM1_Init+0x98>)
 8001506:	f001 fc43 	bl	8002d90 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001510:	f000 f932 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <MX_TIM1_Init+0x98>)
 8001522:	f001 fdfd 	bl	8003120 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800152c:	f000 f924 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_TIM1_Init+0x98>)
 800153e:	f002 f819 	bl	8003574 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001548:	f000 f916 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20001218 	.word	0x20001218
 8001558:	40010000 	.word	0x40010000

0800155c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_TIM2_Init+0x94>)
 800157a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 153;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_TIM2_Init+0x94>)
 8001582:	2299      	movs	r2, #153	; 0x99
 8001584:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_TIM2_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 550;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_TIM2_Init+0x94>)
 800158e:	f240 2226 	movw	r2, #550	; 0x226
 8001592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_TIM2_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_TIM2_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <MX_TIM2_Init+0x94>)
 80015a2:	f001 fbf5 	bl	8002d90 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015ac:	f000 f8e4 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_TIM2_Init+0x94>)
 80015be:	f001 fdaf 	bl	8003120 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015c8:	f000 f8d6 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015cc:	2320      	movs	r3, #32
 80015ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_TIM2_Init+0x94>)
 80015da:	f001 ffcb 	bl	8003574 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015e4:	f000 f8c8 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20001260 	.word	0x20001260

080015f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <MX_TIM8_Init+0x98>)
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <MX_TIM8_Init+0x9c>)
 8001614:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 153;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_TIM8_Init+0x98>)
 8001618:	2299      	movs	r2, #153	; 0x99
 800161a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_TIM8_Init+0x98>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 553;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_TIM8_Init+0x98>)
 8001624:	f240 2229 	movw	r2, #553	; 0x229
 8001628:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <MX_TIM8_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_TIM8_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <MX_TIM8_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <MX_TIM8_Init+0x98>)
 800163e:	f001 fba7 	bl	8002d90 <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001648:	f000 f896 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <MX_TIM8_Init+0x98>)
 800165a:	f001 fd61 	bl	8003120 <HAL_TIM_ConfigClockSource>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001664:	f000 f888 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001668:	2320      	movs	r3, #32
 800166a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_TIM8_Init+0x98>)
 8001676:	f001 ff7d 	bl	8003574 <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001680:	f000 f87a 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200010c4 	.word	0x200010c4
 8001690:	40010400 	.word	0x40010400

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <MX_GPIO_Init+0xd8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a2e      	ldr	r2, [pc, #184]	; (800176c <MX_GPIO_Init+0xd8>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <MX_GPIO_Init+0xd8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <MX_GPIO_Init+0xd8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a27      	ldr	r2, [pc, #156]	; (800176c <MX_GPIO_Init+0xd8>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_GPIO_Init+0xd8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80016e8:	4821      	ldr	r0, [pc, #132]	; (8001770 <MX_GPIO_Init+0xdc>)
 80016ea:	f000 fe3f 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	481f      	ldr	r0, [pc, #124]	; (8001774 <MX_GPIO_Init+0xe0>)
 80016f6:	f000 fe39 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4619      	mov	r1, r3
 8001712:	4817      	ldr	r0, [pc, #92]	; (8001770 <MX_GPIO_Init+0xdc>)
 8001714:	f000 fc7e 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800171e:	2311      	movs	r3, #17
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4619      	mov	r1, r3
 8001730:	4810      	ldr	r0, [pc, #64]	; (8001774 <MX_GPIO_Init+0xe0>)
 8001732:	f000 fc6f 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800173c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001742:	2302      	movs	r3, #2
 8001744:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <MX_GPIO_Init+0xe0>)
 800174e:	f000 fc61 	bl	8002014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2101      	movs	r1, #1
 8001756:	2017      	movs	r0, #23
 8001758:	f000 fc25 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800175c:	2017      	movs	r0, #23
 800175e:	f000 fc3e 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400
 8001774:	40020800 	.word	0x40020800

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	e7fe      	b.n	8001780 <Error_Handler+0x8>
	...

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_MspInit+0x4c>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_TIM_Base_MspInit+0x98>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d116      	bne.n	8001814 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a20      	ldr	r2, [pc, #128]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2019      	movs	r0, #25
 8001808:	f000 fbcd 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800180c:	2019      	movs	r0, #25
 800180e:	f000 fbe6 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001812:	e026      	b.n	8001862 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d10e      	bne.n	800183c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
}
 800183a:	e012      	b.n	8001862 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_TIM_Base_MspInit+0xa0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10d      	bne.n	8001862 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_TIM_Base_MspInit+0x9c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40010000 	.word	0x40010000
 8001870:	40023800 	.word	0x40023800
 8001874:	40010400 	.word	0x40010400

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 fa74 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80018d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018d4:	f000 fd64 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018e2:	f001 fb15 	bl	8002f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20001218 	.word	0x20001218

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800190a:	f001 fec3 	bl	8003694 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
	return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0x12>

08001934 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195c:	605a      	str	r2, [r3, #4]
	return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_isatty>:

int _isatty(int file)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
	return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f001 fe62 	bl	8003694 <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20020000 	.word	0x20020000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	20000098 	.word	0x20000098
 8001a04:	200015d8 	.word	0x200015d8

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <SystemInit+0x20>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <SystemInit+0x20>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <uart_init>:
/**
 * Initializes USART2 as a UART
 * @param baud - the baud rate
 * @param sysclk - the frequency of the system clock in Hz
 */
void uart_init(int baud, int sysclk) {
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	f8c7 0814 	str.w	r0, [r7, #2068]	; 0x814
 8001a38:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810

    // define the input and output buffer
    input_buffer = cq_init();
 8001a3c:	4c36      	ldr	r4, [pc, #216]	; (8001b18 <uart_init+0xec>)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f8b7 	bl	8000bb4 <cq_init>
 8001a46:	463b      	mov	r3, r7
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001a50:	461a      	mov	r2, r3
 8001a52:	f001 feba 	bl	80037ca <memcpy>
    output_buffer = cq_init();
 8001a56:	4c31      	ldr	r4, [pc, #196]	; (8001b1c <uart_init+0xf0>)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f8aa 	bl	8000bb4 <cq_init>
 8001a60:	463b      	mov	r3, r7
 8001a62:	4620      	mov	r0, r4
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f001 fead 	bl	80037ca <memcpy>

    // enable GPIOA in RCC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <uart_init+0xf4>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a2a      	ldr	r2, [pc, #168]	; (8001b20 <uart_init+0xf4>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30

    // enable USART2 in RCC
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <uart_init+0xf4>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a27      	ldr	r2, [pc, #156]	; (8001b20 <uart_init+0xf4>)
 8001a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40

    // set PA2 and PA3 as pullup
    GPIOA->PUPDR |= (0b01 << GPIO_PUPDR_PUPD2_Pos | 0b01 << GPIO_PUPDR_PUPD3_Pos);
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <uart_init+0xf8>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a25      	ldr	r2, [pc, #148]	; (8001b24 <uart_init+0xf8>)
 8001a8e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001a92:	60d3      	str	r3, [r2, #12]

    // clear PA2 and PA3 mode
    GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <uart_init+0xf8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <uart_init+0xf8>)
 8001a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a9e:	6013      	str	r3, [r2, #0]

    // set PA2 and PA3 mode to alternate function
    GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos | 0b10 << GPIO_MODER_MODER3_Pos);
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <uart_init+0xf8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <uart_init+0xf8>)
 8001aa6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001aaa:	6013      	str	r3, [r2, #0]

    // clear alternate function select for PA2 and PA3
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <uart_init+0xf8>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <uart_init+0xf8>)
 8001ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ab6:	6213      	str	r3, [r2, #32]

    // select USART1..3 (AF7) as the alternate function for PA3 and PA2
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos | 7 << GPIO_AFRL_AFSEL3_Pos);
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <uart_init+0xf8>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <uart_init+0xf8>)
 8001abe:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001ac2:	6213      	str	r3, [r2, #32]

    // set USART2's baud rate
    USART2->BRR = sysclk / baud;
 8001ac4:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8001ac8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001acc:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <uart_init+0xfc>)
 8001ad2:	609a      	str	r2, [r3, #8]

    // enable USART2's UART, RX, and TX
    USART2->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE);
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <uart_init+0xfc>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <uart_init+0xfc>)
 8001ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ade:	f043 030c 	orr.w	r3, r3, #12
 8001ae2:	60d3      	str	r3, [r2, #12]

    // enable USART2's TXE interrupt and RXNE interrupt
    USART2->CR1 |= (USART_CR1_TXEIE | USART_CR1_RXNEIE);
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <uart_init+0xfc>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <uart_init+0xfc>)
 8001aea:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001aee:	60d3      	str	r3, [r2, #12]

    // enable USART2 interrupts in NVIC
    NVIC->ISER[1] |= (1 << 6);
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <uart_init+0x100>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <uart_init+0x100>)
 8001af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afa:	6053      	str	r3, [r2, #4]

    // set output buffer source
    setvbuf(stdout, NULL, _IONBF, 0);
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <uart_init+0x104>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6898      	ldr	r0, [r3, #8]
 8001b02:	2300      	movs	r3, #0
 8001b04:	2202      	movs	r2, #2
 8001b06:	2100      	movs	r1, #0
 8001b08:	f001 ff44 	bl	8003994 <setvbuf>

}
 8001b0c:	bf00      	nop
 8001b0e:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000009c 	.word	0x2000009c
 8001b1c:	200008ac 	.word	0x200008ac
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	20000014 	.word	0x20000014

08001b34 <_read>:
 * @param file - not implemented (ignored)
 * @param ptr - where the read data should be put
 * @param len - the number of characters to read
 * @return the number of characters read
 */
int _read(int file, char * ptr, int len) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]

    // wait until the input buffer receives some data
    while (cq_isempty(&input_buffer));
 8001b40:	bf00      	nop
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <_read+0x60>)
 8001b44:	f7ff f8b1 	bl	8000caa <cq_isempty>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f9      	bne.n	8001b42 <_read+0xe>

    int char_count = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]

    // pull from the circular queue until it is empty
    while (!cq_isempty(&input_buffer)) {
 8001b52:	e00c      	b.n	8001b6e <_read+0x3a>
        char_count++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
        *ptr = cq_pull(&input_buffer);
 8001b5a:	480e      	ldr	r0, [pc, #56]	; (8001b94 <_read+0x60>)
 8001b5c:	f7ff f87a 	bl	8000c54 <cq_pull>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	701a      	strb	r2, [r3, #0]
        ptr++;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
    while (!cq_isempty(&input_buffer)) {
 8001b6e:	4809      	ldr	r0, [pc, #36]	; (8001b94 <_read+0x60>)
 8001b70:	f7ff f89b 	bl	8000caa <cq_isempty>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0ec      	beq.n	8001b54 <_read+0x20>
    }

    if (*ptr == '\r') *ptr = '\n';
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b0d      	cmp	r3, #13
 8001b80:	d102      	bne.n	8001b88 <_read+0x54>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	220a      	movs	r2, #10
 8001b86:	701a      	strb	r2, [r3, #0]

    return char_count;
 8001b88:	697b      	ldr	r3, [r7, #20]

}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000009c 	.word	0x2000009c

08001b98 <_write>:
 * @param file - not implemented (ignored)
 * @param ptr - where the characters should be read from
 * @param len - the number of characters to read
 * @return the number of characters read
 */
int _write(int file, char * ptr, int len) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]

    int char_count = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

    // push characters to the output buffer until we write len characters or the buffer fills up
    while (char_count < len && !cq_isfull(&output_buffer)) {
 8001ba8:	e00b      	b.n	8001bc2 <_write+0x2a>
        cq_push(&output_buffer, *ptr);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480e      	ldr	r0, [pc, #56]	; (8001bec <_write+0x54>)
 8001bb2:	f7ff f823 	bl	8000bfc <cq_push>
        char_count++;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
        ptr++;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
    while (char_count < len && !cq_isfull(&output_buffer)) {
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	da05      	bge.n	8001bd6 <_write+0x3e>
 8001bca:	4808      	ldr	r0, [pc, #32]	; (8001bec <_write+0x54>)
 8001bcc:	f7ff f879 	bl	8000cc2 <cq_isfull>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0e9      	beq.n	8001baa <_write+0x12>
    }

    // enable TXE interrupts so the data can be transmitted
    USART2->CR1 |= USART_CR1_TXEIE;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <_write+0x58>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_write+0x58>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	60d3      	str	r3, [r2, #12]

    return char_count;
 8001be2:	697b      	ldr	r3, [r7, #20]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200008ac 	.word	0x200008ac
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <uart_isempty>:

int uart_isempty()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	return cq_isempty(&input_buffer);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <uart_isempty+0x10>)
 8001bfa:	f7ff f856 	bl	8000caa <cq_isempty>
 8001bfe:	4603      	mov	r3, r0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000009c 	.word	0x2000009c

08001c08 <uart_getc>:

char uart_getc()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	return cq_pull(&input_buffer);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <uart_getc+0x10>)
 8001c0e:	f7ff f821 	bl	8000c54 <cq_pull>
 8001c12:	4603      	mov	r3, r0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	2000009c 	.word	0x2000009c

08001c1c <USART2_IRQHandler>:

/**
 * USART2 interrupt request handler
 */
void USART2_IRQHandler(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0

    // if the RDR has received data and the input buffer is not full
    if ((USART2->SR & USART_SR_RXNE) && !cq_isfull(&input_buffer)) {
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <USART2_IRQHandler+0x90>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d020      	beq.n	8001c70 <USART2_IRQHandler+0x54>
 8001c2e:	4820      	ldr	r0, [pc, #128]	; (8001cb0 <USART2_IRQHandler+0x94>)
 8001c30:	f7ff f847 	bl	8000cc2 <cq_isfull>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11a      	bne.n	8001c70 <USART2_IRQHandler+0x54>

        // read the RDR
        char c = USART2->DR;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <USART2_IRQHandler+0x90>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	71fb      	strb	r3, [r7, #7]

        // push the char in the RDR into the input buffer
        cq_push(&input_buffer, c);
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4619      	mov	r1, r3
 8001c44:	481a      	ldr	r0, [pc, #104]	; (8001cb0 <USART2_IRQHandler+0x94>)
 8001c46:	f7fe ffd9 	bl	8000bfc <cq_push>

        // echo the character to the output buffer
        if (!cq_isfull(&output_buffer)) {
 8001c4a:	481a      	ldr	r0, [pc, #104]	; (8001cb4 <USART2_IRQHandler+0x98>)
 8001c4c:	f7ff f839 	bl	8000cc2 <cq_isfull>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d104      	bne.n	8001c60 <USART2_IRQHandler+0x44>
            cq_push(&output_buffer, c);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <USART2_IRQHandler+0x98>)
 8001c5c:	f7fe ffce 	bl	8000bfc <cq_push>
        }

        // enable TXE interrupts so the echo can be pushed
        USART2->CR1 |= USART_CR1_TXEIE;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <USART2_IRQHandler+0x90>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <USART2_IRQHandler+0x90>)
 8001c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6a:	60d3      	str	r3, [r2, #12]
    if ((USART2->SR & USART_SR_RXNE) && !cq_isfull(&input_buffer)) {
 8001c6c:	bf00      	nop
            // disable TXE interrupts
            USART2->CR1 &= ~(USART_CR1_TXEIE);

        }
    }
}
 8001c6e:	e019      	b.n	8001ca4 <USART2_IRQHandler+0x88>
    else if (USART2->SR & USART_SR_TXE) {
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <USART2_IRQHandler+0x90>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <USART2_IRQHandler+0x88>
        if (!cq_isempty(&output_buffer)) {
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <USART2_IRQHandler+0x98>)
 8001c7e:	f7ff f814 	bl	8000caa <cq_isempty>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <USART2_IRQHandler+0x7c>
            USART2->DR = cq_pull(&output_buffer);
 8001c88:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <USART2_IRQHandler+0x98>)
 8001c8a:	f7fe ffe3 	bl	8000c54 <cq_pull>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <USART2_IRQHandler+0x90>)
 8001c94:	605a      	str	r2, [r3, #4]
}
 8001c96:	e005      	b.n	8001ca4 <USART2_IRQHandler+0x88>
            USART2->CR1 &= ~(USART_CR1_TXEIE);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <USART2_IRQHandler+0x90>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a03      	ldr	r2, [pc, #12]	; (8001cac <USART2_IRQHandler+0x90>)
 8001c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	2000009c 	.word	0x2000009c
 8001cb4:	200008ac 	.word	0x200008ac

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff fe91 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f001 fd49 	bl	800377c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fad5 	bl	8001298 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001cfc:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 8001d00:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d04:	200015d4 	.word	0x200015d4

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f92b 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fd20 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f943 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 f90b 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000008 	.word	0x20000008
 8001da8:	20000010 	.word	0x20000010
 8001dac:	2000000c 	.word	0x2000000c

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000010 	.word	0x20000010
 8001dd4:	200015c0 	.word	0x200015c0

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200015c0 	.word	0x200015c0

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff29 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff3e 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff31 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e165      	b.n	80022fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8154 	bne.w	80022f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d005      	beq.n	8002066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	2b02      	cmp	r3, #2
 8002064:	d130      	bne.n	80020c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209c:	2201      	movs	r2, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 0201 	and.w	r2, r3, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d017      	beq.n	8002104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d123      	bne.n	8002158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	08da      	lsrs	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3208      	adds	r2, #8
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0203 	and.w	r2, r3, #3
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80ae 	beq.w	80022f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_GPIO_Init+0x300>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a5c      	ldr	r2, [pc, #368]	; (8002314 <HAL_GPIO_Init+0x300>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <HAL_GPIO_Init+0x300>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b6:	4a58      	ldr	r2, [pc, #352]	; (8002318 <HAL_GPIO_Init+0x304>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4f      	ldr	r2, [pc, #316]	; (800231c <HAL_GPIO_Init+0x308>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d025      	beq.n	800222e <HAL_GPIO_Init+0x21a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <HAL_GPIO_Init+0x30c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <HAL_GPIO_Init+0x216>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_GPIO_Init+0x310>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d019      	beq.n	8002226 <HAL_GPIO_Init+0x212>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4c      	ldr	r2, [pc, #304]	; (8002328 <HAL_GPIO_Init+0x314>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x20e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4b      	ldr	r2, [pc, #300]	; (800232c <HAL_GPIO_Init+0x318>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00d      	beq.n	800221e <HAL_GPIO_Init+0x20a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4a      	ldr	r2, [pc, #296]	; (8002330 <HAL_GPIO_Init+0x31c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_GPIO_Init+0x206>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a49      	ldr	r2, [pc, #292]	; (8002334 <HAL_GPIO_Init+0x320>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_GPIO_Init+0x202>
 8002212:	2306      	movs	r3, #6
 8002214:	e00c      	b.n	8002230 <HAL_GPIO_Init+0x21c>
 8002216:	2307      	movs	r3, #7
 8002218:	e00a      	b.n	8002230 <HAL_GPIO_Init+0x21c>
 800221a:	2305      	movs	r3, #5
 800221c:	e008      	b.n	8002230 <HAL_GPIO_Init+0x21c>
 800221e:	2304      	movs	r3, #4
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x21c>
 8002222:	2303      	movs	r3, #3
 8002224:	e004      	b.n	8002230 <HAL_GPIO_Init+0x21c>
 8002226:	2302      	movs	r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x21c>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x21c>
 800222e:	2300      	movs	r3, #0
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f002 0203 	and.w	r2, r2, #3
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	4093      	lsls	r3, r2
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002240:	4935      	ldr	r1, [pc, #212]	; (8002318 <HAL_GPIO_Init+0x304>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_GPIO_Init+0x324>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002272:	4a31      	ldr	r2, [pc, #196]	; (8002338 <HAL_GPIO_Init+0x324>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_GPIO_Init+0x324>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <HAL_GPIO_Init+0x324>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_GPIO_Init+0x324>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_GPIO_Init+0x324>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_GPIO_Init+0x324>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_GPIO_Init+0x324>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	f67f ae96 	bls.w	8002030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40013800 	.word	0x40013800
 800231c:	40020000 	.word	0x40020000
 8002320:	40020400 	.word	0x40020400
 8002324:	40020800 	.word	0x40020800
 8002328:	40020c00 	.word	0x40020c00
 800232c:	40021000 	.word	0x40021000
 8002330:	40021400 	.word	0x40021400
 8002334:	40021800 	.word	0x40021800
 8002338:	40013c00 	.word	0x40013c00

0800233c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e001      	b.n	800235e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fcca 	bl	8000d58 <HAL_GPIO_EXTI_Callback>
  }
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40013c00 	.word	0x40013c00

080023d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0cc      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d90c      	bls.n	800240c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b63      	ldr	r3, [pc, #396]	; (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b8      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800242e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a52      	ldr	r2, [pc, #328]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b50      	ldr	r3, [pc, #320]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	494d      	ldr	r1, [pc, #308]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d044      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d119      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e07f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d003      	beq.n	800248e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	2b03      	cmp	r3, #3
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b3f      	ldr	r3, [pc, #252]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e067      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b37      	ldr	r3, [pc, #220]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4934      	ldr	r1, [pc, #208]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7ff fc8a 	bl	8001dd8 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff fc86 	bl	8001dd8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e04f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d20c      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e032      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4916      	ldr	r1, [pc, #88]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	490e      	ldr	r1, [pc, #56]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002556:	f000 f821 	bl	800259c <HAL_RCC_GetSysClockFreq>
 800255a:	4602      	mov	r2, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	490a      	ldr	r1, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fbea 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023c00 	.word	0x40023c00
 800258c:	40023800 	.word	0x40023800
 8002590:	08004cac 	.word	0x08004cac
 8002594:	20000008 	.word	0x20000008
 8002598:	2000000c 	.word	0x2000000c

0800259c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800259c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025a0:	b087      	sub	sp, #28
 80025a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025a4:	2600      	movs	r6, #0
 80025a6:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80025a8:	2600      	movs	r6, #0
 80025aa:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80025ac:	2600      	movs	r6, #0
 80025ae:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80025b0:	2600      	movs	r6, #0
 80025b2:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025b4:	2600      	movs	r6, #0
 80025b6:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b8:	4ea3      	ldr	r6, [pc, #652]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80025ba:	68b6      	ldr	r6, [r6, #8]
 80025bc:	f006 060c 	and.w	r6, r6, #12
 80025c0:	2e0c      	cmp	r6, #12
 80025c2:	f200 8137 	bhi.w	8002834 <HAL_RCC_GetSysClockFreq+0x298>
 80025c6:	f20f 0c08 	addw	ip, pc, #8
 80025ca:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	08002605 	.word	0x08002605
 80025d4:	08002835 	.word	0x08002835
 80025d8:	08002835 	.word	0x08002835
 80025dc:	08002835 	.word	0x08002835
 80025e0:	0800260b 	.word	0x0800260b
 80025e4:	08002835 	.word	0x08002835
 80025e8:	08002835 	.word	0x08002835
 80025ec:	08002835 	.word	0x08002835
 80025f0:	08002611 	.word	0x08002611
 80025f4:	08002835 	.word	0x08002835
 80025f8:	08002835 	.word	0x08002835
 80025fc:	08002835 	.word	0x08002835
 8002600:	08002727 	.word	0x08002727
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002604:	4b91      	ldr	r3, [pc, #580]	; (800284c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002606:	613b      	str	r3, [r7, #16]
       break;
 8002608:	e117      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800260a:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800260c:	613b      	str	r3, [r7, #16]
      break;
 800260e:	e114      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002610:	4b8d      	ldr	r3, [pc, #564]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002618:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800261a:	4b8b      	ldr	r3, [pc, #556]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d024      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	099b      	lsrs	r3, r3, #6
 800262c:	461a      	mov	r2, r3
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002636:	f04f 0500 	mov.w	r5, #0
 800263a:	ea02 0004 	and.w	r0, r2, r4
 800263e:	ea03 0105 	and.w	r1, r3, r5
 8002642:	4b83      	ldr	r3, [pc, #524]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002644:	fb03 f201 	mul.w	r2, r3, r1
 8002648:	2300      	movs	r3, #0
 800264a:	fb03 f300 	mul.w	r3, r3, r0
 800264e:	4413      	add	r3, r2
 8002650:	4a7f      	ldr	r2, [pc, #508]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002652:	fba0 0102 	umull	r0, r1, r0, r2
 8002656:	440b      	add	r3, r1
 8002658:	4619      	mov	r1, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	461a      	mov	r2, r3
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f7fe f92b 	bl	80008bc <__aeabi_uldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4613      	mov	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e04c      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002670:	4b75      	ldr	r3, [pc, #468]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	461a      	mov	r2, r3
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002680:	f04f 0100 	mov.w	r1, #0
 8002684:	ea02 0800 	and.w	r8, r2, r0
 8002688:	ea03 0901 	and.w	r9, r3, r1
 800268c:	4640      	mov	r0, r8
 800268e:	4649      	mov	r1, r9
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	014b      	lsls	r3, r1, #5
 800269a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800269e:	0142      	lsls	r2, r0, #5
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	ebb0 0008 	subs.w	r0, r0, r8
 80026a8:	eb61 0109 	sbc.w	r1, r1, r9
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	018b      	lsls	r3, r1, #6
 80026b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026ba:	0182      	lsls	r2, r0, #6
 80026bc:	1a12      	subs	r2, r2, r0
 80026be:	eb63 0301 	sbc.w	r3, r3, r1
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	00d9      	lsls	r1, r3, #3
 80026cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026d0:	00d0      	lsls	r0, r2, #3
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	eb12 0208 	adds.w	r2, r2, r8
 80026da:	eb43 0309 	adc.w	r3, r3, r9
 80026de:	f04f 0000 	mov.w	r0, #0
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	0299      	lsls	r1, r3, #10
 80026e8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026ec:	0290      	lsls	r0, r2, #10
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	461a      	mov	r2, r3
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	f7fe f8dd 	bl	80008bc <__aeabi_uldivmod>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4613      	mov	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270a:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	3301      	adds	r3, #1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	613b      	str	r3, [r7, #16]
      break;
 8002724:	e089      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002726:	4948      	ldr	r1, [pc, #288]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002728:	6849      	ldr	r1, [r1, #4]
 800272a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800272e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002730:	4945      	ldr	r1, [pc, #276]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002732:	6849      	ldr	r1, [r1, #4]
 8002734:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002738:	2900      	cmp	r1, #0
 800273a:	d024      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273c:	4942      	ldr	r1, [pc, #264]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800273e:	6849      	ldr	r1, [r1, #4]
 8002740:	0989      	lsrs	r1, r1, #6
 8002742:	4608      	mov	r0, r1
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	f240 14ff 	movw	r4, #511	; 0x1ff
 800274c:	f04f 0500 	mov.w	r5, #0
 8002750:	ea00 0204 	and.w	r2, r0, r4
 8002754:	ea01 0305 	and.w	r3, r1, r5
 8002758:	493d      	ldr	r1, [pc, #244]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800275a:	fb01 f003 	mul.w	r0, r1, r3
 800275e:	2100      	movs	r1, #0
 8002760:	fb01 f102 	mul.w	r1, r1, r2
 8002764:	1844      	adds	r4, r0, r1
 8002766:	493a      	ldr	r1, [pc, #232]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002768:	fba2 0101 	umull	r0, r1, r2, r1
 800276c:	1863      	adds	r3, r4, r1
 800276e:	4619      	mov	r1, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	461a      	mov	r2, r3
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	f7fe f8a0 	bl	80008bc <__aeabi_uldivmod>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4613      	mov	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e04a      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	461a      	mov	r2, r3
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	ea02 0400 	and.w	r4, r2, r0
 800279e:	ea03 0501 	and.w	r5, r3, r1
 80027a2:	4620      	mov	r0, r4
 80027a4:	4629      	mov	r1, r5
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	014b      	lsls	r3, r1, #5
 80027b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b4:	0142      	lsls	r2, r0, #5
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	1b00      	subs	r0, r0, r4
 80027bc:	eb61 0105 	sbc.w	r1, r1, r5
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	018b      	lsls	r3, r1, #6
 80027ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027ce:	0182      	lsls	r2, r0, #6
 80027d0:	1a12      	subs	r2, r2, r0
 80027d2:	eb63 0301 	sbc.w	r3, r3, r1
 80027d6:	f04f 0000 	mov.w	r0, #0
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	00d9      	lsls	r1, r3, #3
 80027e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e4:	00d0      	lsls	r0, r2, #3
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	1912      	adds	r2, r2, r4
 80027ec:	eb45 0303 	adc.w	r3, r5, r3
 80027f0:	f04f 0000 	mov.w	r0, #0
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	0299      	lsls	r1, r3, #10
 80027fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027fe:	0290      	lsls	r0, r2, #10
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	461a      	mov	r2, r3
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	f7fe f854 	bl	80008bc <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0f1b      	lsrs	r3, r3, #28
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	613b      	str	r3, [r7, #16]
      break;
 8002832:	e002      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283a:	693b      	ldr	r3, [r7, #16]
}
 800283c:	4618      	mov	r0, r3
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	00f42400 	.word	0x00f42400
 8002850:	017d7840 	.word	0x017d7840

08002854 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e28d      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8083 	beq.w	800297a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002874:	4b94      	ldr	r3, [pc, #592]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b04      	cmp	r3, #4
 800287e:	d019      	beq.n	80028b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002880:	4b91      	ldr	r3, [pc, #580]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002888:	2b08      	cmp	r3, #8
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800288c:	4b8e      	ldr	r3, [pc, #568]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002898:	d00c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d112      	bne.n	80028cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b2:	d10b      	bne.n	80028cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	4b84      	ldr	r3, [pc, #528]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d05b      	beq.n	8002978 <HAL_RCC_OscConfig+0x124>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d157      	bne.n	8002978 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e25a      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d106      	bne.n	80028e4 <HAL_RCC_OscConfig+0x90>
 80028d6:	4b7c      	ldr	r3, [pc, #496]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7b      	ldr	r2, [pc, #492]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e01d      	b.n	8002920 <HAL_RCC_OscConfig+0xcc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ec:	d10c      	bne.n	8002908 <HAL_RCC_OscConfig+0xb4>
 80028ee:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a75      	ldr	r2, [pc, #468]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a72      	ldr	r2, [pc, #456]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e00b      	b.n	8002920 <HAL_RCC_OscConfig+0xcc>
 8002908:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800290e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4b6c      	ldr	r3, [pc, #432]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a6b      	ldr	r2, [pc, #428]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800291a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d013      	beq.n	8002950 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff fa56 	bl	8001dd8 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fa52 	bl	8001dd8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e21f      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0xdc>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff fa42 	bl	8001dd8 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff fa3e 	bl	8001dd8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e20b      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296a:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x104>
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d06f      	beq.n	8002a66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b00      	cmp	r3, #0
 8002990:	d017      	beq.n	80029c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002992:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800299a:	2b08      	cmp	r3, #8
 800299c:	d105      	bne.n	80029aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800299e:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d11c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_RCC_OscConfig+0x186>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e1d3      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4937      	ldr	r1, [pc, #220]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	e03a      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f8:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_RCC_OscConfig+0x278>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7ff f9eb 	bl	8001dd8 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a06:	f7ff f9e7 	bl	8001dd8 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1b4      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4925      	ldr	r1, [pc, #148]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCC_OscConfig+0x278>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7ff f9ca 	bl	8001dd8 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a48:	f7ff f9c6 	bl	8001dd8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e193      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d036      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_RCC_OscConfig+0x27c>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7ff f9aa 	bl	8001dd8 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a88:	f7ff f9a6 	bl	8001dd8 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e173      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x234>
 8002aa6:	e01b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7ff f993 	bl	8001dd8 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	e00e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab6:	f7ff f98f 	bl	8001dd8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d907      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e15c      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	42470000 	.word	0x42470000
 8002ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	4b8a      	ldr	r3, [pc, #552]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ea      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8097 	beq.w	8002c1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b83      	ldr	r3, [pc, #524]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a7e      	ldr	r2, [pc, #504]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b7c      	ldr	r3, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <HAL_RCC_OscConfig+0x4b0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCC_OscConfig+0x4b0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a75      	ldr	r2, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x4b0>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7ff f94f 	bl	8001dd8 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7ff f94b 	bl	8001dd8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e118      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <HAL_RCC_OscConfig+0x4b0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x31e>
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	e01c      	b.n	8002bac <HAL_RCC_OscConfig+0x358>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b05      	cmp	r3, #5
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x340>
 8002b7a:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	e00b      	b.n	8002bac <HAL_RCC_OscConfig+0x358>
 8002b94:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a59      	ldr	r2, [pc, #356]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a56      	ldr	r2, [pc, #344]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002ba6:	f023 0304 	bic.w	r3, r3, #4
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7ff f910 	bl	8001dd8 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7ff f90c 	bl	8001dd8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0d7      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ee      	beq.n	8002bbc <HAL_RCC_OscConfig+0x368>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7ff f8fa 	bl	8001dd8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7ff f8f6 	bl	8001dd8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0c1      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfe:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ee      	bne.n	8002be8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80ad 	beq.w	8002d80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d060      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d145      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_OscConfig+0x4b4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7ff f8ca 	bl	8001dd8 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c48:	f7ff f8c6 	bl	8001dd8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e093      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x4b4>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7ff f89b 	bl	8001dd8 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7ff f897 	bl	8001dd8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e064      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x452>
 8002cc4:	e05c      	b.n	8002d80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x4b4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7ff f884 	bl	8001dd8 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff f880 	bl	8001dd8 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e04d      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x480>
 8002cf2:	e045      	b.n	8002d80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e040      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_RCC_OscConfig+0x538>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d030      	beq.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d129      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d122      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d119      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d10f      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800

08002d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e041      	b.n	8002e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fd0c 	bl	80017d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 fa96 	bl	8003300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d001      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e04e      	b.n	8002ee6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d022      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x80>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e72:	d01d      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x80>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d018      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x80>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1e      	ldr	r2, [pc, #120]	; (8002efc <HAL_TIM_Base_Start_IT+0xcc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x80>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x80>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x80>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x80>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_TIM_Base_Start_IT+0xdc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d111      	bne.n	8002ed4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d010      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	e007      	b.n	8002ee4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800
 8002f00:	40000c00 	.word	0x40000c00
 8002f04:	40010400 	.word	0x40010400
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40001800 	.word	0x40001800

08002f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0202 	mvn.w	r2, #2
 8002f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f9b5 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f9a7 	bl	80032ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f9b8 	bl	80032d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0204 	mvn.w	r2, #4
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f98b 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f97d 	bl	80032ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f98e 	bl	80032d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0208 	mvn.w	r2, #8
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f961 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f953 	bl	80032ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f964 	bl	80032d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b10      	cmp	r3, #16
 8003020:	d122      	bne.n	8003068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b10      	cmp	r3, #16
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0210 	mvn.w	r2, #16
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2208      	movs	r2, #8
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f937 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f929 	bl	80032ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f93a 	bl	80032d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0201 	mvn.w	r2, #1
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd fe24 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fae0 	bl	8003680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8ff 	bl	80032ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b20      	cmp	r3, #32
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0220 	mvn.w	r2, #32
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 faaa 	bl	800366c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIM_ConfigClockSource+0x1c>
 8003138:	2302      	movs	r3, #2
 800313a:	e0b4      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x186>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003174:	d03e      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317a:	f200 8087 	bhi.w	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003182:	f000 8086 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x172>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318a:	d87f      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b70      	cmp	r3, #112	; 0x70
 800318e:	d01a      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003190:	2b70      	cmp	r3, #112	; 0x70
 8003192:	d87b      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b60      	cmp	r3, #96	; 0x60
 8003196:	d050      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x11a>
 8003198:	2b60      	cmp	r3, #96	; 0x60
 800319a:	d877      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b50      	cmp	r3, #80	; 0x50
 800319e:	d03c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xfa>
 80031a0:	2b50      	cmp	r3, #80	; 0x50
 80031a2:	d873      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d058      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x13a>
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d86f      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b30      	cmp	r3, #48	; 0x30
 80031ae:	d064      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031b0:	2b30      	cmp	r3, #48	; 0x30
 80031b2:	d86b      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d060      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d867      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d05c      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d05a      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031c4:	e062      	b.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f000 f9ad 	bl	8003534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	609a      	str	r2, [r3, #8]
      break;
 80031f2:	e04f      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f000 f996 	bl	8003534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003216:	609a      	str	r2, [r3, #8]
      break;
 8003218:	e03c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	461a      	mov	r2, r3
 8003228:	f000 f90a 	bl	8003440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2150      	movs	r1, #80	; 0x50
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f963 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 8003238:	e02c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	461a      	mov	r2, r3
 8003248:	f000 f929 	bl	800349e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2160      	movs	r1, #96	; 0x60
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f953 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 8003258:	e01c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	f000 f8ea 	bl	8003440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2140      	movs	r1, #64	; 0x40
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f943 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 8003278:	e00c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f000 f93a 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 800328a:	e003      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
      break;
 8003290:	e000      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a40      	ldr	r2, [pc, #256]	; (8003414 <TIM_Base_SetConfig+0x114>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3d      	ldr	r2, [pc, #244]	; (8003418 <TIM_Base_SetConfig+0x118>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3c      	ldr	r2, [pc, #240]	; (800341c <TIM_Base_SetConfig+0x11c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3b      	ldr	r2, [pc, #236]	; (8003420 <TIM_Base_SetConfig+0x120>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3a      	ldr	r2, [pc, #232]	; (8003424 <TIM_Base_SetConfig+0x124>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d108      	bne.n	8003352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2f      	ldr	r2, [pc, #188]	; (8003414 <TIM_Base_SetConfig+0x114>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d02b      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003360:	d027      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2c      	ldr	r2, [pc, #176]	; (8003418 <TIM_Base_SetConfig+0x118>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d023      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2b      	ldr	r2, [pc, #172]	; (800341c <TIM_Base_SetConfig+0x11c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01f      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <TIM_Base_SetConfig+0x120>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01b      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a29      	ldr	r2, [pc, #164]	; (8003424 <TIM_Base_SetConfig+0x124>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d017      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <TIM_Base_SetConfig+0x128>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a27      	ldr	r2, [pc, #156]	; (800342c <TIM_Base_SetConfig+0x12c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00f      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a26      	ldr	r2, [pc, #152]	; (8003430 <TIM_Base_SetConfig+0x130>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00b      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a25      	ldr	r2, [pc, #148]	; (8003434 <TIM_Base_SetConfig+0x134>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a24      	ldr	r2, [pc, #144]	; (8003438 <TIM_Base_SetConfig+0x138>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a23      	ldr	r2, [pc, #140]	; (800343c <TIM_Base_SetConfig+0x13c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <TIM_Base_SetConfig+0x114>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_Base_SetConfig+0xf8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0c      	ldr	r2, [pc, #48]	; (8003424 <TIM_Base_SetConfig+0x124>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d103      	bne.n	8003400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	615a      	str	r2, [r3, #20]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010000 	.word	0x40010000
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	40010400 	.word	0x40010400
 8003428:	40014000 	.word	0x40014000
 800342c:	40014400 	.word	0x40014400
 8003430:	40014800 	.word	0x40014800
 8003434:	40001800 	.word	0x40001800
 8003438:	40001c00 	.word	0x40001c00
 800343c:	40002000 	.word	0x40002000

08003440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f023 0201 	bic.w	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f023 030a 	bic.w	r3, r3, #10
 800347c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800349e:	b480      	push	{r7}
 80034a0:	b087      	sub	sp, #28
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f023 0210 	bic.w	r2, r3, #16
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	031b      	lsls	r3, r3, #12
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	f043 0307 	orr.w	r3, r3, #7
 8003520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	021a      	lsls	r2, r3, #8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	431a      	orrs	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	609a      	str	r2, [r3, #8]
}
 8003568:	bf00      	nop
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003588:	2302      	movs	r3, #2
 800358a:	e05a      	b.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a21      	ldr	r2, [pc, #132]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d022      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d8:	d01d      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d018      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a18      	ldr	r2, [pc, #96]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a15      	ldr	r2, [pc, #84]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10c      	bne.n	8003630 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800361c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	4313      	orrs	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40010400 	.word	0x40010400
 8003664:	40014000 	.word	0x40014000
 8003668:	40001800 	.word	0x40001800

0800366c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <__errno>:
 8003694:	4b01      	ldr	r3, [pc, #4]	; (800369c <__errno+0x8>)
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000014 	.word	0x20000014

080036a0 <_fwrite_r>:
 80036a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a4:	9c08      	ldr	r4, [sp, #32]
 80036a6:	4689      	mov	r9, r1
 80036a8:	4617      	mov	r7, r2
 80036aa:	fb02 f803 	mul.w	r8, r2, r3
 80036ae:	4605      	mov	r5, r0
 80036b0:	b118      	cbz	r0, 80036ba <_fwrite_r+0x1a>
 80036b2:	6983      	ldr	r3, [r0, #24]
 80036b4:	b90b      	cbnz	r3, 80036ba <_fwrite_r+0x1a>
 80036b6:	f000 fc2b 	bl	8003f10 <__sinit>
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <_fwrite_r+0xb4>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	d123      	bne.n	8003708 <_fwrite_r+0x68>
 80036c0:	686c      	ldr	r4, [r5, #4]
 80036c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036c4:	07de      	lsls	r6, r3, #31
 80036c6:	d405      	bmi.n	80036d4 <_fwrite_r+0x34>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	0598      	lsls	r0, r3, #22
 80036cc:	d402      	bmi.n	80036d4 <_fwrite_r+0x34>
 80036ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036d0:	f000 f879 	bl	80037c6 <__retarget_lock_acquire_recursive>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	0719      	lsls	r1, r3, #28
 80036d8:	d520      	bpl.n	800371c <_fwrite_r+0x7c>
 80036da:	6923      	ldr	r3, [r4, #16]
 80036dc:	b1f3      	cbz	r3, 800371c <_fwrite_r+0x7c>
 80036de:	2600      	movs	r6, #0
 80036e0:	4546      	cmp	r6, r8
 80036e2:	d029      	beq.n	8003738 <_fwrite_r+0x98>
 80036e4:	68a0      	ldr	r0, [r4, #8]
 80036e6:	f819 1006 	ldrb.w	r1, [r9, r6]
 80036ea:	3801      	subs	r0, #1
 80036ec:	2800      	cmp	r0, #0
 80036ee:	60a0      	str	r0, [r4, #8]
 80036f0:	da04      	bge.n	80036fc <_fwrite_r+0x5c>
 80036f2:	69a3      	ldr	r3, [r4, #24]
 80036f4:	4298      	cmp	r0, r3
 80036f6:	db19      	blt.n	800372c <_fwrite_r+0x8c>
 80036f8:	290a      	cmp	r1, #10
 80036fa:	d017      	beq.n	800372c <_fwrite_r+0x8c>
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	6022      	str	r2, [r4, #0]
 8003702:	7019      	strb	r1, [r3, #0]
 8003704:	3601      	adds	r6, #1
 8003706:	e7eb      	b.n	80036e0 <_fwrite_r+0x40>
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <_fwrite_r+0xb8>)
 800370a:	429c      	cmp	r4, r3
 800370c:	d101      	bne.n	8003712 <_fwrite_r+0x72>
 800370e:	68ac      	ldr	r4, [r5, #8]
 8003710:	e7d7      	b.n	80036c2 <_fwrite_r+0x22>
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <_fwrite_r+0xbc>)
 8003714:	429c      	cmp	r4, r3
 8003716:	bf08      	it	eq
 8003718:	68ec      	ldreq	r4, [r5, #12]
 800371a:	e7d2      	b.n	80036c2 <_fwrite_r+0x22>
 800371c:	4621      	mov	r1, r4
 800371e:	4628      	mov	r0, r5
 8003720:	f000 fa50 	bl	8003bc4 <__swsetup_r>
 8003724:	2800      	cmp	r0, #0
 8003726:	d0da      	beq.n	80036de <_fwrite_r+0x3e>
 8003728:	2600      	movs	r6, #0
 800372a:	e005      	b.n	8003738 <_fwrite_r+0x98>
 800372c:	4622      	mov	r2, r4
 800372e:	4628      	mov	r0, r5
 8003730:	f000 f9f6 	bl	8003b20 <__swbuf_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d1e5      	bne.n	8003704 <_fwrite_r+0x64>
 8003738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800373a:	07da      	lsls	r2, r3, #31
 800373c:	d405      	bmi.n	800374a <_fwrite_r+0xaa>
 800373e:	89a3      	ldrh	r3, [r4, #12]
 8003740:	059b      	lsls	r3, r3, #22
 8003742:	d402      	bmi.n	800374a <_fwrite_r+0xaa>
 8003744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003746:	f000 f83f 	bl	80037c8 <__retarget_lock_release_recursive>
 800374a:	fbb6 f0f7 	udiv	r0, r6, r7
 800374e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003752:	bf00      	nop
 8003754:	08004d94 	.word	0x08004d94
 8003758:	08004db4 	.word	0x08004db4
 800375c:	08004d74 	.word	0x08004d74

08003760 <fwrite>:
 8003760:	b507      	push	{r0, r1, r2, lr}
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	460a      	mov	r2, r1
 8003768:	4601      	mov	r1, r0
 800376a:	4803      	ldr	r0, [pc, #12]	; (8003778 <fwrite+0x18>)
 800376c:	6800      	ldr	r0, [r0, #0]
 800376e:	f7ff ff97 	bl	80036a0 <_fwrite_r>
 8003772:	b003      	add	sp, #12
 8003774:	f85d fb04 	ldr.w	pc, [sp], #4
 8003778:	20000014 	.word	0x20000014

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d0d      	ldr	r5, [pc, #52]	; (80037b4 <__libc_init_array+0x38>)
 8003780:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <__libc_init_array+0x3c>)
 8003782:	1b64      	subs	r4, r4, r5
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	2600      	movs	r6, #0
 8003788:	42a6      	cmp	r6, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	4d0b      	ldr	r5, [pc, #44]	; (80037bc <__libc_init_array+0x40>)
 800378e:	4c0c      	ldr	r4, [pc, #48]	; (80037c0 <__libc_init_array+0x44>)
 8003790:	f001 f986 	bl	8004aa0 <_init>
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	2600      	movs	r6, #0
 800379a:	42a6      	cmp	r6, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a4:	4798      	blx	r3
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ae:	4798      	blx	r3
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	08004e10 	.word	0x08004e10
 80037b8:	08004e10 	.word	0x08004e10
 80037bc:	08004e10 	.word	0x08004e10
 80037c0:	08004e14 	.word	0x08004e14

080037c4 <__retarget_lock_init_recursive>:
 80037c4:	4770      	bx	lr

080037c6 <__retarget_lock_acquire_recursive>:
 80037c6:	4770      	bx	lr

080037c8 <__retarget_lock_release_recursive>:
 80037c8:	4770      	bx	lr

080037ca <memcpy>:
 80037ca:	440a      	add	r2, r1
 80037cc:	4291      	cmp	r1, r2
 80037ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80037d2:	d100      	bne.n	80037d6 <memcpy+0xc>
 80037d4:	4770      	bx	lr
 80037d6:	b510      	push	{r4, lr}
 80037d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e0:	4291      	cmp	r1, r2
 80037e2:	d1f9      	bne.n	80037d8 <memcpy+0xe>
 80037e4:	bd10      	pop	{r4, pc}

080037e6 <memset>:
 80037e6:	4402      	add	r2, r0
 80037e8:	4603      	mov	r3, r0
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d100      	bne.n	80037f0 <memset+0xa>
 80037ee:	4770      	bx	lr
 80037f0:	f803 1b01 	strb.w	r1, [r3], #1
 80037f4:	e7f9      	b.n	80037ea <memset+0x4>
	...

080037f8 <iprintf>:
 80037f8:	b40f      	push	{r0, r1, r2, r3}
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <iprintf+0x2c>)
 80037fc:	b513      	push	{r0, r1, r4, lr}
 80037fe:	681c      	ldr	r4, [r3, #0]
 8003800:	b124      	cbz	r4, 800380c <iprintf+0x14>
 8003802:	69a3      	ldr	r3, [r4, #24]
 8003804:	b913      	cbnz	r3, 800380c <iprintf+0x14>
 8003806:	4620      	mov	r0, r4
 8003808:	f000 fb82 	bl	8003f10 <__sinit>
 800380c:	ab05      	add	r3, sp, #20
 800380e:	9a04      	ldr	r2, [sp, #16]
 8003810:	68a1      	ldr	r1, [r4, #8]
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	4620      	mov	r0, r4
 8003816:	f000 fd6b 	bl	80042f0 <_vfiprintf_r>
 800381a:	b002      	add	sp, #8
 800381c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003820:	b004      	add	sp, #16
 8003822:	4770      	bx	lr
 8003824:	20000014 	.word	0x20000014

08003828 <_puts_r>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	460e      	mov	r6, r1
 800382c:	4605      	mov	r5, r0
 800382e:	b118      	cbz	r0, 8003838 <_puts_r+0x10>
 8003830:	6983      	ldr	r3, [r0, #24]
 8003832:	b90b      	cbnz	r3, 8003838 <_puts_r+0x10>
 8003834:	f000 fb6c 	bl	8003f10 <__sinit>
 8003838:	69ab      	ldr	r3, [r5, #24]
 800383a:	68ac      	ldr	r4, [r5, #8]
 800383c:	b913      	cbnz	r3, 8003844 <_puts_r+0x1c>
 800383e:	4628      	mov	r0, r5
 8003840:	f000 fb66 	bl	8003f10 <__sinit>
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <_puts_r+0xd0>)
 8003846:	429c      	cmp	r4, r3
 8003848:	d120      	bne.n	800388c <_puts_r+0x64>
 800384a:	686c      	ldr	r4, [r5, #4]
 800384c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800384e:	07db      	lsls	r3, r3, #31
 8003850:	d405      	bmi.n	800385e <_puts_r+0x36>
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	0598      	lsls	r0, r3, #22
 8003856:	d402      	bmi.n	800385e <_puts_r+0x36>
 8003858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800385a:	f7ff ffb4 	bl	80037c6 <__retarget_lock_acquire_recursive>
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	0719      	lsls	r1, r3, #28
 8003862:	d51d      	bpl.n	80038a0 <_puts_r+0x78>
 8003864:	6923      	ldr	r3, [r4, #16]
 8003866:	b1db      	cbz	r3, 80038a0 <_puts_r+0x78>
 8003868:	3e01      	subs	r6, #1
 800386a:	68a3      	ldr	r3, [r4, #8]
 800386c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003870:	3b01      	subs	r3, #1
 8003872:	60a3      	str	r3, [r4, #8]
 8003874:	bb39      	cbnz	r1, 80038c6 <_puts_r+0x9e>
 8003876:	2b00      	cmp	r3, #0
 8003878:	da38      	bge.n	80038ec <_puts_r+0xc4>
 800387a:	4622      	mov	r2, r4
 800387c:	210a      	movs	r1, #10
 800387e:	4628      	mov	r0, r5
 8003880:	f000 f94e 	bl	8003b20 <__swbuf_r>
 8003884:	3001      	adds	r0, #1
 8003886:	d011      	beq.n	80038ac <_puts_r+0x84>
 8003888:	250a      	movs	r5, #10
 800388a:	e011      	b.n	80038b0 <_puts_r+0x88>
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <_puts_r+0xd4>)
 800388e:	429c      	cmp	r4, r3
 8003890:	d101      	bne.n	8003896 <_puts_r+0x6e>
 8003892:	68ac      	ldr	r4, [r5, #8]
 8003894:	e7da      	b.n	800384c <_puts_r+0x24>
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <_puts_r+0xd8>)
 8003898:	429c      	cmp	r4, r3
 800389a:	bf08      	it	eq
 800389c:	68ec      	ldreq	r4, [r5, #12]
 800389e:	e7d5      	b.n	800384c <_puts_r+0x24>
 80038a0:	4621      	mov	r1, r4
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 f98e 	bl	8003bc4 <__swsetup_r>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0dd      	beq.n	8003868 <_puts_r+0x40>
 80038ac:	f04f 35ff 	mov.w	r5, #4294967295
 80038b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b2:	07da      	lsls	r2, r3, #31
 80038b4:	d405      	bmi.n	80038c2 <_puts_r+0x9a>
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	059b      	lsls	r3, r3, #22
 80038ba:	d402      	bmi.n	80038c2 <_puts_r+0x9a>
 80038bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038be:	f7ff ff83 	bl	80037c8 <__retarget_lock_release_recursive>
 80038c2:	4628      	mov	r0, r5
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da04      	bge.n	80038d4 <_puts_r+0xac>
 80038ca:	69a2      	ldr	r2, [r4, #24]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	dc06      	bgt.n	80038de <_puts_r+0xb6>
 80038d0:	290a      	cmp	r1, #10
 80038d2:	d004      	beq.n	80038de <_puts_r+0xb6>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	6022      	str	r2, [r4, #0]
 80038da:	7019      	strb	r1, [r3, #0]
 80038dc:	e7c5      	b.n	800386a <_puts_r+0x42>
 80038de:	4622      	mov	r2, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f91d 	bl	8003b20 <__swbuf_r>
 80038e6:	3001      	adds	r0, #1
 80038e8:	d1bf      	bne.n	800386a <_puts_r+0x42>
 80038ea:	e7df      	b.n	80038ac <_puts_r+0x84>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	250a      	movs	r5, #10
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	6022      	str	r2, [r4, #0]
 80038f4:	701d      	strb	r5, [r3, #0]
 80038f6:	e7db      	b.n	80038b0 <_puts_r+0x88>
 80038f8:	08004d94 	.word	0x08004d94
 80038fc:	08004db4 	.word	0x08004db4
 8003900:	08004d74 	.word	0x08004d74

08003904 <puts>:
 8003904:	4b02      	ldr	r3, [pc, #8]	; (8003910 <puts+0xc>)
 8003906:	4601      	mov	r1, r0
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f7ff bf8d 	b.w	8003828 <_puts_r>
 800390e:	bf00      	nop
 8003910:	20000014 	.word	0x20000014

08003914 <rand>:
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <rand+0x60>)
 8003916:	b510      	push	{r4, lr}
 8003918:	681c      	ldr	r4, [r3, #0]
 800391a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800391c:	b9b3      	cbnz	r3, 800394c <rand+0x38>
 800391e:	2018      	movs	r0, #24
 8003920:	f000 fc0a 	bl	8004138 <malloc>
 8003924:	63a0      	str	r0, [r4, #56]	; 0x38
 8003926:	b928      	cbnz	r0, 8003934 <rand+0x20>
 8003928:	4602      	mov	r2, r0
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <rand+0x64>)
 800392c:	4813      	ldr	r0, [pc, #76]	; (800397c <rand+0x68>)
 800392e:	214e      	movs	r1, #78	; 0x4e
 8003930:	f000 f9b6 	bl	8003ca0 <__assert_func>
 8003934:	4a12      	ldr	r2, [pc, #72]	; (8003980 <rand+0x6c>)
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <rand+0x70>)
 8003938:	e9c0 2300 	strd	r2, r3, [r0]
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <rand+0x74>)
 800393e:	6083      	str	r3, [r0, #8]
 8003940:	230b      	movs	r3, #11
 8003942:	8183      	strh	r3, [r0, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	2300      	movs	r3, #0
 8003948:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800394c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800394e:	480f      	ldr	r0, [pc, #60]	; (800398c <rand+0x78>)
 8003950:	690a      	ldr	r2, [r1, #16]
 8003952:	694b      	ldr	r3, [r1, #20]
 8003954:	4c0e      	ldr	r4, [pc, #56]	; (8003990 <rand+0x7c>)
 8003956:	4350      	muls	r0, r2
 8003958:	fb04 0003 	mla	r0, r4, r3, r0
 800395c:	fba2 3404 	umull	r3, r4, r2, r4
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	4404      	add	r4, r0
 8003964:	f144 0000 	adc.w	r0, r4, #0
 8003968:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800396c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003970:	bd10      	pop	{r4, pc}
 8003972:	bf00      	nop
 8003974:	20000014 	.word	0x20000014
 8003978:	08004cc0 	.word	0x08004cc0
 800397c:	08004cd7 	.word	0x08004cd7
 8003980:	abcd330e 	.word	0xabcd330e
 8003984:	e66d1234 	.word	0xe66d1234
 8003988:	0005deec 	.word	0x0005deec
 800398c:	5851f42d 	.word	0x5851f42d
 8003990:	4c957f2d 	.word	0x4c957f2d

08003994 <setvbuf>:
 8003994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003998:	461d      	mov	r5, r3
 800399a:	4b5d      	ldr	r3, [pc, #372]	; (8003b10 <setvbuf+0x17c>)
 800399c:	681f      	ldr	r7, [r3, #0]
 800399e:	4604      	mov	r4, r0
 80039a0:	460e      	mov	r6, r1
 80039a2:	4690      	mov	r8, r2
 80039a4:	b127      	cbz	r7, 80039b0 <setvbuf+0x1c>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	b913      	cbnz	r3, 80039b0 <setvbuf+0x1c>
 80039aa:	4638      	mov	r0, r7
 80039ac:	f000 fab0 	bl	8003f10 <__sinit>
 80039b0:	4b58      	ldr	r3, [pc, #352]	; (8003b14 <setvbuf+0x180>)
 80039b2:	429c      	cmp	r4, r3
 80039b4:	d167      	bne.n	8003a86 <setvbuf+0xf2>
 80039b6:	687c      	ldr	r4, [r7, #4]
 80039b8:	f1b8 0f02 	cmp.w	r8, #2
 80039bc:	d006      	beq.n	80039cc <setvbuf+0x38>
 80039be:	f1b8 0f01 	cmp.w	r8, #1
 80039c2:	f200 809f 	bhi.w	8003b04 <setvbuf+0x170>
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	f2c0 809c 	blt.w	8003b04 <setvbuf+0x170>
 80039cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039ce:	07db      	lsls	r3, r3, #31
 80039d0:	d405      	bmi.n	80039de <setvbuf+0x4a>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	0598      	lsls	r0, r3, #22
 80039d6:	d402      	bmi.n	80039de <setvbuf+0x4a>
 80039d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039da:	f7ff fef4 	bl	80037c6 <__retarget_lock_acquire_recursive>
 80039de:	4621      	mov	r1, r4
 80039e0:	4638      	mov	r0, r7
 80039e2:	f000 fa01 	bl	8003de8 <_fflush_r>
 80039e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039e8:	b141      	cbz	r1, 80039fc <setvbuf+0x68>
 80039ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039ee:	4299      	cmp	r1, r3
 80039f0:	d002      	beq.n	80039f8 <setvbuf+0x64>
 80039f2:	4638      	mov	r0, r7
 80039f4:	f000 fba8 	bl	8004148 <_free_r>
 80039f8:	2300      	movs	r3, #0
 80039fa:	6363      	str	r3, [r4, #52]	; 0x34
 80039fc:	2300      	movs	r3, #0
 80039fe:	61a3      	str	r3, [r4, #24]
 8003a00:	6063      	str	r3, [r4, #4]
 8003a02:	89a3      	ldrh	r3, [r4, #12]
 8003a04:	0619      	lsls	r1, r3, #24
 8003a06:	d503      	bpl.n	8003a10 <setvbuf+0x7c>
 8003a08:	6921      	ldr	r1, [r4, #16]
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f000 fb9c 	bl	8004148 <_free_r>
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	f1b8 0f02 	cmp.w	r8, #2
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	d06c      	beq.n	8003afc <setvbuf+0x168>
 8003a22:	ab01      	add	r3, sp, #4
 8003a24:	466a      	mov	r2, sp
 8003a26:	4621      	mov	r1, r4
 8003a28:	4638      	mov	r0, r7
 8003a2a:	f000 fb20 	bl	800406e <__swhatbuf_r>
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	4318      	orrs	r0, r3
 8003a32:	81a0      	strh	r0, [r4, #12]
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	d130      	bne.n	8003a9a <setvbuf+0x106>
 8003a38:	9d00      	ldr	r5, [sp, #0]
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f000 fb7c 	bl	8004138 <malloc>
 8003a40:	4606      	mov	r6, r0
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d155      	bne.n	8003af2 <setvbuf+0x15e>
 8003a46:	f8dd 9000 	ldr.w	r9, [sp]
 8003a4a:	45a9      	cmp	r9, r5
 8003a4c:	d14a      	bne.n	8003ae4 <setvbuf+0x150>
 8003a4e:	f04f 35ff 	mov.w	r5, #4294967295
 8003a52:	2200      	movs	r2, #0
 8003a54:	60a2      	str	r2, [r4, #8]
 8003a56:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003a5a:	6022      	str	r2, [r4, #0]
 8003a5c:	6122      	str	r2, [r4, #16]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a64:	6162      	str	r2, [r4, #20]
 8003a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	07d2      	lsls	r2, r2, #31
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	d405      	bmi.n	8003a7e <setvbuf+0xea>
 8003a72:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003a76:	d102      	bne.n	8003a7e <setvbuf+0xea>
 8003a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a7a:	f7ff fea5 	bl	80037c8 <__retarget_lock_release_recursive>
 8003a7e:	4628      	mov	r0, r5
 8003a80:	b003      	add	sp, #12
 8003a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a86:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <setvbuf+0x184>)
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d101      	bne.n	8003a90 <setvbuf+0xfc>
 8003a8c:	68bc      	ldr	r4, [r7, #8]
 8003a8e:	e793      	b.n	80039b8 <setvbuf+0x24>
 8003a90:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <setvbuf+0x188>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	bf08      	it	eq
 8003a96:	68fc      	ldreq	r4, [r7, #12]
 8003a98:	e78e      	b.n	80039b8 <setvbuf+0x24>
 8003a9a:	2e00      	cmp	r6, #0
 8003a9c:	d0cd      	beq.n	8003a3a <setvbuf+0xa6>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	b913      	cbnz	r3, 8003aa8 <setvbuf+0x114>
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f000 fa34 	bl	8003f10 <__sinit>
 8003aa8:	f1b8 0f01 	cmp.w	r8, #1
 8003aac:	bf08      	it	eq
 8003aae:	89a3      	ldrheq	r3, [r4, #12]
 8003ab0:	6026      	str	r6, [r4, #0]
 8003ab2:	bf04      	itt	eq
 8003ab4:	f043 0301 	orreq.w	r3, r3, #1
 8003ab8:	81a3      	strheq	r3, [r4, #12]
 8003aba:	89a2      	ldrh	r2, [r4, #12]
 8003abc:	f012 0308 	ands.w	r3, r2, #8
 8003ac0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003ac4:	d01c      	beq.n	8003b00 <setvbuf+0x16c>
 8003ac6:	07d3      	lsls	r3, r2, #31
 8003ac8:	bf41      	itttt	mi
 8003aca:	2300      	movmi	r3, #0
 8003acc:	426d      	negmi	r5, r5
 8003ace:	60a3      	strmi	r3, [r4, #8]
 8003ad0:	61a5      	strmi	r5, [r4, #24]
 8003ad2:	bf58      	it	pl
 8003ad4:	60a5      	strpl	r5, [r4, #8]
 8003ad6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003ad8:	f015 0501 	ands.w	r5, r5, #1
 8003adc:	d115      	bne.n	8003b0a <setvbuf+0x176>
 8003ade:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003ae2:	e7c8      	b.n	8003a76 <setvbuf+0xe2>
 8003ae4:	4648      	mov	r0, r9
 8003ae6:	f000 fb27 	bl	8004138 <malloc>
 8003aea:	4606      	mov	r6, r0
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d0ae      	beq.n	8003a4e <setvbuf+0xba>
 8003af0:	464d      	mov	r5, r9
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	e7d0      	b.n	8003a9e <setvbuf+0x10a>
 8003afc:	2500      	movs	r5, #0
 8003afe:	e7a8      	b.n	8003a52 <setvbuf+0xbe>
 8003b00:	60a3      	str	r3, [r4, #8]
 8003b02:	e7e8      	b.n	8003ad6 <setvbuf+0x142>
 8003b04:	f04f 35ff 	mov.w	r5, #4294967295
 8003b08:	e7b9      	b.n	8003a7e <setvbuf+0xea>
 8003b0a:	2500      	movs	r5, #0
 8003b0c:	e7b7      	b.n	8003a7e <setvbuf+0xea>
 8003b0e:	bf00      	nop
 8003b10:	20000014 	.word	0x20000014
 8003b14:	08004d94 	.word	0x08004d94
 8003b18:	08004db4 	.word	0x08004db4
 8003b1c:	08004d74 	.word	0x08004d74

08003b20 <__swbuf_r>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	460e      	mov	r6, r1
 8003b24:	4614      	mov	r4, r2
 8003b26:	4605      	mov	r5, r0
 8003b28:	b118      	cbz	r0, 8003b32 <__swbuf_r+0x12>
 8003b2a:	6983      	ldr	r3, [r0, #24]
 8003b2c:	b90b      	cbnz	r3, 8003b32 <__swbuf_r+0x12>
 8003b2e:	f000 f9ef 	bl	8003f10 <__sinit>
 8003b32:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <__swbuf_r+0x98>)
 8003b34:	429c      	cmp	r4, r3
 8003b36:	d12b      	bne.n	8003b90 <__swbuf_r+0x70>
 8003b38:	686c      	ldr	r4, [r5, #4]
 8003b3a:	69a3      	ldr	r3, [r4, #24]
 8003b3c:	60a3      	str	r3, [r4, #8]
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	071a      	lsls	r2, r3, #28
 8003b42:	d52f      	bpl.n	8003ba4 <__swbuf_r+0x84>
 8003b44:	6923      	ldr	r3, [r4, #16]
 8003b46:	b36b      	cbz	r3, 8003ba4 <__swbuf_r+0x84>
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	6820      	ldr	r0, [r4, #0]
 8003b4c:	1ac0      	subs	r0, r0, r3
 8003b4e:	6963      	ldr	r3, [r4, #20]
 8003b50:	b2f6      	uxtb	r6, r6
 8003b52:	4283      	cmp	r3, r0
 8003b54:	4637      	mov	r7, r6
 8003b56:	dc04      	bgt.n	8003b62 <__swbuf_r+0x42>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 f944 	bl	8003de8 <_fflush_r>
 8003b60:	bb30      	cbnz	r0, 8003bb0 <__swbuf_r+0x90>
 8003b62:	68a3      	ldr	r3, [r4, #8]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	60a3      	str	r3, [r4, #8]
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	6022      	str	r2, [r4, #0]
 8003b6e:	701e      	strb	r6, [r3, #0]
 8003b70:	6963      	ldr	r3, [r4, #20]
 8003b72:	3001      	adds	r0, #1
 8003b74:	4283      	cmp	r3, r0
 8003b76:	d004      	beq.n	8003b82 <__swbuf_r+0x62>
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	07db      	lsls	r3, r3, #31
 8003b7c:	d506      	bpl.n	8003b8c <__swbuf_r+0x6c>
 8003b7e:	2e0a      	cmp	r6, #10
 8003b80:	d104      	bne.n	8003b8c <__swbuf_r+0x6c>
 8003b82:	4621      	mov	r1, r4
 8003b84:	4628      	mov	r0, r5
 8003b86:	f000 f92f 	bl	8003de8 <_fflush_r>
 8003b8a:	b988      	cbnz	r0, 8003bb0 <__swbuf_r+0x90>
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <__swbuf_r+0x9c>)
 8003b92:	429c      	cmp	r4, r3
 8003b94:	d101      	bne.n	8003b9a <__swbuf_r+0x7a>
 8003b96:	68ac      	ldr	r4, [r5, #8]
 8003b98:	e7cf      	b.n	8003b3a <__swbuf_r+0x1a>
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <__swbuf_r+0xa0>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	bf08      	it	eq
 8003ba0:	68ec      	ldreq	r4, [r5, #12]
 8003ba2:	e7ca      	b.n	8003b3a <__swbuf_r+0x1a>
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 f80c 	bl	8003bc4 <__swsetup_r>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d0cb      	beq.n	8003b48 <__swbuf_r+0x28>
 8003bb0:	f04f 37ff 	mov.w	r7, #4294967295
 8003bb4:	e7ea      	b.n	8003b8c <__swbuf_r+0x6c>
 8003bb6:	bf00      	nop
 8003bb8:	08004d94 	.word	0x08004d94
 8003bbc:	08004db4 	.word	0x08004db4
 8003bc0:	08004d74 	.word	0x08004d74

08003bc4 <__swsetup_r>:
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <__swsetup_r+0xcc>)
 8003bc6:	b570      	push	{r4, r5, r6, lr}
 8003bc8:	681d      	ldr	r5, [r3, #0]
 8003bca:	4606      	mov	r6, r0
 8003bcc:	460c      	mov	r4, r1
 8003bce:	b125      	cbz	r5, 8003bda <__swsetup_r+0x16>
 8003bd0:	69ab      	ldr	r3, [r5, #24]
 8003bd2:	b913      	cbnz	r3, 8003bda <__swsetup_r+0x16>
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 f99b 	bl	8003f10 <__sinit>
 8003bda:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <__swsetup_r+0xd0>)
 8003bdc:	429c      	cmp	r4, r3
 8003bde:	d10f      	bne.n	8003c00 <__swsetup_r+0x3c>
 8003be0:	686c      	ldr	r4, [r5, #4]
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003be8:	0719      	lsls	r1, r3, #28
 8003bea:	d42c      	bmi.n	8003c46 <__swsetup_r+0x82>
 8003bec:	06dd      	lsls	r5, r3, #27
 8003bee:	d411      	bmi.n	8003c14 <__swsetup_r+0x50>
 8003bf0:	2309      	movs	r3, #9
 8003bf2:	6033      	str	r3, [r6, #0]
 8003bf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003bf8:	81a3      	strh	r3, [r4, #12]
 8003bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfe:	e03e      	b.n	8003c7e <__swsetup_r+0xba>
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <__swsetup_r+0xd4>)
 8003c02:	429c      	cmp	r4, r3
 8003c04:	d101      	bne.n	8003c0a <__swsetup_r+0x46>
 8003c06:	68ac      	ldr	r4, [r5, #8]
 8003c08:	e7eb      	b.n	8003be2 <__swsetup_r+0x1e>
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <__swsetup_r+0xd8>)
 8003c0c:	429c      	cmp	r4, r3
 8003c0e:	bf08      	it	eq
 8003c10:	68ec      	ldreq	r4, [r5, #12]
 8003c12:	e7e6      	b.n	8003be2 <__swsetup_r+0x1e>
 8003c14:	0758      	lsls	r0, r3, #29
 8003c16:	d512      	bpl.n	8003c3e <__swsetup_r+0x7a>
 8003c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c1a:	b141      	cbz	r1, 8003c2e <__swsetup_r+0x6a>
 8003c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c20:	4299      	cmp	r1, r3
 8003c22:	d002      	beq.n	8003c2a <__swsetup_r+0x66>
 8003c24:	4630      	mov	r0, r6
 8003c26:	f000 fa8f 	bl	8004148 <_free_r>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	2300      	movs	r3, #0
 8003c38:	6063      	str	r3, [r4, #4]
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	f043 0308 	orr.w	r3, r3, #8
 8003c44:	81a3      	strh	r3, [r4, #12]
 8003c46:	6923      	ldr	r3, [r4, #16]
 8003c48:	b94b      	cbnz	r3, 8003c5e <__swsetup_r+0x9a>
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c54:	d003      	beq.n	8003c5e <__swsetup_r+0x9a>
 8003c56:	4621      	mov	r1, r4
 8003c58:	4630      	mov	r0, r6
 8003c5a:	f000 fa2d 	bl	80040b8 <__smakebuf_r>
 8003c5e:	89a0      	ldrh	r0, [r4, #12]
 8003c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c64:	f010 0301 	ands.w	r3, r0, #1
 8003c68:	d00a      	beq.n	8003c80 <__swsetup_r+0xbc>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60a3      	str	r3, [r4, #8]
 8003c6e:	6963      	ldr	r3, [r4, #20]
 8003c70:	425b      	negs	r3, r3
 8003c72:	61a3      	str	r3, [r4, #24]
 8003c74:	6923      	ldr	r3, [r4, #16]
 8003c76:	b943      	cbnz	r3, 8003c8a <__swsetup_r+0xc6>
 8003c78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c7c:	d1ba      	bne.n	8003bf4 <__swsetup_r+0x30>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	0781      	lsls	r1, r0, #30
 8003c82:	bf58      	it	pl
 8003c84:	6963      	ldrpl	r3, [r4, #20]
 8003c86:	60a3      	str	r3, [r4, #8]
 8003c88:	e7f4      	b.n	8003c74 <__swsetup_r+0xb0>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	e7f7      	b.n	8003c7e <__swsetup_r+0xba>
 8003c8e:	bf00      	nop
 8003c90:	20000014 	.word	0x20000014
 8003c94:	08004d94 	.word	0x08004d94
 8003c98:	08004db4 	.word	0x08004db4
 8003c9c:	08004d74 	.word	0x08004d74

08003ca0 <__assert_func>:
 8003ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ca2:	4614      	mov	r4, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <__assert_func+0x2c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4605      	mov	r5, r0
 8003cac:	68d8      	ldr	r0, [r3, #12]
 8003cae:	b14c      	cbz	r4, 8003cc4 <__assert_func+0x24>
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <__assert_func+0x30>)
 8003cb2:	9100      	str	r1, [sp, #0]
 8003cb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003cb8:	4906      	ldr	r1, [pc, #24]	; (8003cd4 <__assert_func+0x34>)
 8003cba:	462b      	mov	r3, r5
 8003cbc:	f000 f9a6 	bl	800400c <fiprintf>
 8003cc0:	f000 fe40 	bl	8004944 <abort>
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <__assert_func+0x38>)
 8003cc6:	461c      	mov	r4, r3
 8003cc8:	e7f3      	b.n	8003cb2 <__assert_func+0x12>
 8003cca:	bf00      	nop
 8003ccc:	20000014 	.word	0x20000014
 8003cd0:	08004d36 	.word	0x08004d36
 8003cd4:	08004d43 	.word	0x08004d43
 8003cd8:	08004d71 	.word	0x08004d71

08003cdc <__sflush_r>:
 8003cdc:	898a      	ldrh	r2, [r1, #12]
 8003cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	0710      	lsls	r0, r2, #28
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	d458      	bmi.n	8003d9c <__sflush_r+0xc0>
 8003cea:	684b      	ldr	r3, [r1, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	dc05      	bgt.n	8003cfc <__sflush_r+0x20>
 8003cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	dc02      	bgt.n	8003cfc <__sflush_r+0x20>
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cfe:	2e00      	cmp	r6, #0
 8003d00:	d0f9      	beq.n	8003cf6 <__sflush_r+0x1a>
 8003d02:	2300      	movs	r3, #0
 8003d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d08:	682f      	ldr	r7, [r5, #0]
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	d032      	beq.n	8003d74 <__sflush_r+0x98>
 8003d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	075a      	lsls	r2, r3, #29
 8003d14:	d505      	bpl.n	8003d22 <__sflush_r+0x46>
 8003d16:	6863      	ldr	r3, [r4, #4]
 8003d18:	1ac0      	subs	r0, r0, r3
 8003d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d1c:	b10b      	cbz	r3, 8003d22 <__sflush_r+0x46>
 8003d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d20:	1ac0      	subs	r0, r0, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	4602      	mov	r2, r0
 8003d26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d28:	6a21      	ldr	r1, [r4, #32]
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	47b0      	blx	r6
 8003d2e:	1c43      	adds	r3, r0, #1
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	d106      	bne.n	8003d42 <__sflush_r+0x66>
 8003d34:	6829      	ldr	r1, [r5, #0]
 8003d36:	291d      	cmp	r1, #29
 8003d38:	d82c      	bhi.n	8003d94 <__sflush_r+0xb8>
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <__sflush_r+0x108>)
 8003d3c:	40ca      	lsrs	r2, r1
 8003d3e:	07d6      	lsls	r6, r2, #31
 8003d40:	d528      	bpl.n	8003d94 <__sflush_r+0xb8>
 8003d42:	2200      	movs	r2, #0
 8003d44:	6062      	str	r2, [r4, #4]
 8003d46:	04d9      	lsls	r1, r3, #19
 8003d48:	6922      	ldr	r2, [r4, #16]
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	d504      	bpl.n	8003d58 <__sflush_r+0x7c>
 8003d4e:	1c42      	adds	r2, r0, #1
 8003d50:	d101      	bne.n	8003d56 <__sflush_r+0x7a>
 8003d52:	682b      	ldr	r3, [r5, #0]
 8003d54:	b903      	cbnz	r3, 8003d58 <__sflush_r+0x7c>
 8003d56:	6560      	str	r0, [r4, #84]	; 0x54
 8003d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d5a:	602f      	str	r7, [r5, #0]
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d0ca      	beq.n	8003cf6 <__sflush_r+0x1a>
 8003d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d64:	4299      	cmp	r1, r3
 8003d66:	d002      	beq.n	8003d6e <__sflush_r+0x92>
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f000 f9ed 	bl	8004148 <_free_r>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	6360      	str	r0, [r4, #52]	; 0x34
 8003d72:	e7c1      	b.n	8003cf8 <__sflush_r+0x1c>
 8003d74:	6a21      	ldr	r1, [r4, #32]
 8003d76:	2301      	movs	r3, #1
 8003d78:	4628      	mov	r0, r5
 8003d7a:	47b0      	blx	r6
 8003d7c:	1c41      	adds	r1, r0, #1
 8003d7e:	d1c7      	bne.n	8003d10 <__sflush_r+0x34>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0c4      	beq.n	8003d10 <__sflush_r+0x34>
 8003d86:	2b1d      	cmp	r3, #29
 8003d88:	d001      	beq.n	8003d8e <__sflush_r+0xb2>
 8003d8a:	2b16      	cmp	r3, #22
 8003d8c:	d101      	bne.n	8003d92 <__sflush_r+0xb6>
 8003d8e:	602f      	str	r7, [r5, #0]
 8003d90:	e7b1      	b.n	8003cf6 <__sflush_r+0x1a>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	e7ad      	b.n	8003cf8 <__sflush_r+0x1c>
 8003d9c:	690f      	ldr	r7, [r1, #16]
 8003d9e:	2f00      	cmp	r7, #0
 8003da0:	d0a9      	beq.n	8003cf6 <__sflush_r+0x1a>
 8003da2:	0793      	lsls	r3, r2, #30
 8003da4:	680e      	ldr	r6, [r1, #0]
 8003da6:	bf08      	it	eq
 8003da8:	694b      	ldreq	r3, [r1, #20]
 8003daa:	600f      	str	r7, [r1, #0]
 8003dac:	bf18      	it	ne
 8003dae:	2300      	movne	r3, #0
 8003db0:	eba6 0807 	sub.w	r8, r6, r7
 8003db4:	608b      	str	r3, [r1, #8]
 8003db6:	f1b8 0f00 	cmp.w	r8, #0
 8003dba:	dd9c      	ble.n	8003cf6 <__sflush_r+0x1a>
 8003dbc:	6a21      	ldr	r1, [r4, #32]
 8003dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	463a      	mov	r2, r7
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b0      	blx	r6
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	dc06      	bgt.n	8003dda <__sflush_r+0xfe>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd2:	81a3      	strh	r3, [r4, #12]
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	e78e      	b.n	8003cf8 <__sflush_r+0x1c>
 8003dda:	4407      	add	r7, r0
 8003ddc:	eba8 0800 	sub.w	r8, r8, r0
 8003de0:	e7e9      	b.n	8003db6 <__sflush_r+0xda>
 8003de2:	bf00      	nop
 8003de4:	20400001 	.word	0x20400001

08003de8 <_fflush_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	690b      	ldr	r3, [r1, #16]
 8003dec:	4605      	mov	r5, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	b913      	cbnz	r3, 8003df8 <_fflush_r+0x10>
 8003df2:	2500      	movs	r5, #0
 8003df4:	4628      	mov	r0, r5
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	b118      	cbz	r0, 8003e02 <_fflush_r+0x1a>
 8003dfa:	6983      	ldr	r3, [r0, #24]
 8003dfc:	b90b      	cbnz	r3, 8003e02 <_fflush_r+0x1a>
 8003dfe:	f000 f887 	bl	8003f10 <__sinit>
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <_fflush_r+0x6c>)
 8003e04:	429c      	cmp	r4, r3
 8003e06:	d11b      	bne.n	8003e40 <_fflush_r+0x58>
 8003e08:	686c      	ldr	r4, [r5, #4]
 8003e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ef      	beq.n	8003df2 <_fflush_r+0xa>
 8003e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e14:	07d0      	lsls	r0, r2, #31
 8003e16:	d404      	bmi.n	8003e22 <_fflush_r+0x3a>
 8003e18:	0599      	lsls	r1, r3, #22
 8003e1a:	d402      	bmi.n	8003e22 <_fflush_r+0x3a>
 8003e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e1e:	f7ff fcd2 	bl	80037c6 <__retarget_lock_acquire_recursive>
 8003e22:	4628      	mov	r0, r5
 8003e24:	4621      	mov	r1, r4
 8003e26:	f7ff ff59 	bl	8003cdc <__sflush_r>
 8003e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2c:	07da      	lsls	r2, r3, #31
 8003e2e:	4605      	mov	r5, r0
 8003e30:	d4e0      	bmi.n	8003df4 <_fflush_r+0xc>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	059b      	lsls	r3, r3, #22
 8003e36:	d4dd      	bmi.n	8003df4 <_fflush_r+0xc>
 8003e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e3a:	f7ff fcc5 	bl	80037c8 <__retarget_lock_release_recursive>
 8003e3e:	e7d9      	b.n	8003df4 <_fflush_r+0xc>
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <_fflush_r+0x70>)
 8003e42:	429c      	cmp	r4, r3
 8003e44:	d101      	bne.n	8003e4a <_fflush_r+0x62>
 8003e46:	68ac      	ldr	r4, [r5, #8]
 8003e48:	e7df      	b.n	8003e0a <_fflush_r+0x22>
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <_fflush_r+0x74>)
 8003e4c:	429c      	cmp	r4, r3
 8003e4e:	bf08      	it	eq
 8003e50:	68ec      	ldreq	r4, [r5, #12]
 8003e52:	e7da      	b.n	8003e0a <_fflush_r+0x22>
 8003e54:	08004d94 	.word	0x08004d94
 8003e58:	08004db4 	.word	0x08004db4
 8003e5c:	08004d74 	.word	0x08004d74

08003e60 <std>:
 8003e60:	2300      	movs	r3, #0
 8003e62:	b510      	push	{r4, lr}
 8003e64:	4604      	mov	r4, r0
 8003e66:	e9c0 3300 	strd	r3, r3, [r0]
 8003e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e6e:	6083      	str	r3, [r0, #8]
 8003e70:	8181      	strh	r1, [r0, #12]
 8003e72:	6643      	str	r3, [r0, #100]	; 0x64
 8003e74:	81c2      	strh	r2, [r0, #14]
 8003e76:	6183      	str	r3, [r0, #24]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	305c      	adds	r0, #92	; 0x5c
 8003e7e:	f7ff fcb2 	bl	80037e6 <memset>
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <std+0x38>)
 8003e84:	6263      	str	r3, [r4, #36]	; 0x24
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <std+0x3c>)
 8003e88:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <std+0x40>)
 8003e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <std+0x44>)
 8003e90:	6224      	str	r4, [r4, #32]
 8003e92:	6323      	str	r3, [r4, #48]	; 0x30
 8003e94:	bd10      	pop	{r4, pc}
 8003e96:	bf00      	nop
 8003e98:	08004899 	.word	0x08004899
 8003e9c:	080048bb 	.word	0x080048bb
 8003ea0:	080048f3 	.word	0x080048f3
 8003ea4:	08004917 	.word	0x08004917

08003ea8 <_cleanup_r>:
 8003ea8:	4901      	ldr	r1, [pc, #4]	; (8003eb0 <_cleanup_r+0x8>)
 8003eaa:	f000 b8c1 	b.w	8004030 <_fwalk_reent>
 8003eae:	bf00      	nop
 8003eb0:	08003de9 	.word	0x08003de9

08003eb4 <__sfmoreglue>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	1e4a      	subs	r2, r1, #1
 8003eb8:	2568      	movs	r5, #104	; 0x68
 8003eba:	4355      	muls	r5, r2
 8003ebc:	460e      	mov	r6, r1
 8003ebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ec2:	f000 f991 	bl	80041e8 <_malloc_r>
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	b140      	cbz	r0, 8003edc <__sfmoreglue+0x28>
 8003eca:	2100      	movs	r1, #0
 8003ecc:	e9c0 1600 	strd	r1, r6, [r0]
 8003ed0:	300c      	adds	r0, #12
 8003ed2:	60a0      	str	r0, [r4, #8]
 8003ed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ed8:	f7ff fc85 	bl	80037e6 <memset>
 8003edc:	4620      	mov	r0, r4
 8003ede:	bd70      	pop	{r4, r5, r6, pc}

08003ee0 <__sfp_lock_acquire>:
 8003ee0:	4801      	ldr	r0, [pc, #4]	; (8003ee8 <__sfp_lock_acquire+0x8>)
 8003ee2:	f7ff bc70 	b.w	80037c6 <__retarget_lock_acquire_recursive>
 8003ee6:	bf00      	nop
 8003ee8:	200015cc 	.word	0x200015cc

08003eec <__sfp_lock_release>:
 8003eec:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <__sfp_lock_release+0x8>)
 8003eee:	f7ff bc6b 	b.w	80037c8 <__retarget_lock_release_recursive>
 8003ef2:	bf00      	nop
 8003ef4:	200015cc 	.word	0x200015cc

08003ef8 <__sinit_lock_acquire>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	; (8003f00 <__sinit_lock_acquire+0x8>)
 8003efa:	f7ff bc64 	b.w	80037c6 <__retarget_lock_acquire_recursive>
 8003efe:	bf00      	nop
 8003f00:	200015c7 	.word	0x200015c7

08003f04 <__sinit_lock_release>:
 8003f04:	4801      	ldr	r0, [pc, #4]	; (8003f0c <__sinit_lock_release+0x8>)
 8003f06:	f7ff bc5f 	b.w	80037c8 <__retarget_lock_release_recursive>
 8003f0a:	bf00      	nop
 8003f0c:	200015c7 	.word	0x200015c7

08003f10 <__sinit>:
 8003f10:	b510      	push	{r4, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	f7ff fff0 	bl	8003ef8 <__sinit_lock_acquire>
 8003f18:	69a3      	ldr	r3, [r4, #24]
 8003f1a:	b11b      	cbz	r3, 8003f24 <__sinit+0x14>
 8003f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f20:	f7ff bff0 	b.w	8003f04 <__sinit_lock_release>
 8003f24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f28:	6523      	str	r3, [r4, #80]	; 0x50
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <__sinit+0x68>)
 8003f2c:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <__sinit+0x6c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f32:	42a3      	cmp	r3, r4
 8003f34:	bf04      	itt	eq
 8003f36:	2301      	moveq	r3, #1
 8003f38:	61a3      	streq	r3, [r4, #24]
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 f820 	bl	8003f80 <__sfp>
 8003f40:	6060      	str	r0, [r4, #4]
 8003f42:	4620      	mov	r0, r4
 8003f44:	f000 f81c 	bl	8003f80 <__sfp>
 8003f48:	60a0      	str	r0, [r4, #8]
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f000 f818 	bl	8003f80 <__sfp>
 8003f50:	2200      	movs	r2, #0
 8003f52:	60e0      	str	r0, [r4, #12]
 8003f54:	2104      	movs	r1, #4
 8003f56:	6860      	ldr	r0, [r4, #4]
 8003f58:	f7ff ff82 	bl	8003e60 <std>
 8003f5c:	68a0      	ldr	r0, [r4, #8]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	2109      	movs	r1, #9
 8003f62:	f7ff ff7d 	bl	8003e60 <std>
 8003f66:	68e0      	ldr	r0, [r4, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	2112      	movs	r1, #18
 8003f6c:	f7ff ff78 	bl	8003e60 <std>
 8003f70:	2301      	movs	r3, #1
 8003f72:	61a3      	str	r3, [r4, #24]
 8003f74:	e7d2      	b.n	8003f1c <__sinit+0xc>
 8003f76:	bf00      	nop
 8003f78:	08004cbc 	.word	0x08004cbc
 8003f7c:	08003ea9 	.word	0x08003ea9

08003f80 <__sfp>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	4607      	mov	r7, r0
 8003f84:	f7ff ffac 	bl	8003ee0 <__sfp_lock_acquire>
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <__sfp+0x84>)
 8003f8a:	681e      	ldr	r6, [r3, #0]
 8003f8c:	69b3      	ldr	r3, [r6, #24]
 8003f8e:	b913      	cbnz	r3, 8003f96 <__sfp+0x16>
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff ffbd 	bl	8003f10 <__sinit>
 8003f96:	3648      	adds	r6, #72	; 0x48
 8003f98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	d503      	bpl.n	8003fa8 <__sfp+0x28>
 8003fa0:	6833      	ldr	r3, [r6, #0]
 8003fa2:	b30b      	cbz	r3, 8003fe8 <__sfp+0x68>
 8003fa4:	6836      	ldr	r6, [r6, #0]
 8003fa6:	e7f7      	b.n	8003f98 <__sfp+0x18>
 8003fa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fac:	b9d5      	cbnz	r5, 8003fe4 <__sfp+0x64>
 8003fae:	4b16      	ldr	r3, [pc, #88]	; (8004008 <__sfp+0x88>)
 8003fb0:	60e3      	str	r3, [r4, #12]
 8003fb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fb6:	6665      	str	r5, [r4, #100]	; 0x64
 8003fb8:	f7ff fc04 	bl	80037c4 <__retarget_lock_init_recursive>
 8003fbc:	f7ff ff96 	bl	8003eec <__sfp_lock_release>
 8003fc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003fc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003fc8:	6025      	str	r5, [r4, #0]
 8003fca:	61a5      	str	r5, [r4, #24]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fd4:	f7ff fc07 	bl	80037e6 <memset>
 8003fd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe4:	3468      	adds	r4, #104	; 0x68
 8003fe6:	e7d9      	b.n	8003f9c <__sfp+0x1c>
 8003fe8:	2104      	movs	r1, #4
 8003fea:	4638      	mov	r0, r7
 8003fec:	f7ff ff62 	bl	8003eb4 <__sfmoreglue>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	6030      	str	r0, [r6, #0]
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d1d5      	bne.n	8003fa4 <__sfp+0x24>
 8003ff8:	f7ff ff78 	bl	8003eec <__sfp_lock_release>
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	e7ee      	b.n	8003fe0 <__sfp+0x60>
 8004002:	bf00      	nop
 8004004:	08004cbc 	.word	0x08004cbc
 8004008:	ffff0001 	.word	0xffff0001

0800400c <fiprintf>:
 800400c:	b40e      	push	{r1, r2, r3}
 800400e:	b503      	push	{r0, r1, lr}
 8004010:	4601      	mov	r1, r0
 8004012:	ab03      	add	r3, sp, #12
 8004014:	4805      	ldr	r0, [pc, #20]	; (800402c <fiprintf+0x20>)
 8004016:	f853 2b04 	ldr.w	r2, [r3], #4
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	f000 f967 	bl	80042f0 <_vfiprintf_r>
 8004022:	b002      	add	sp, #8
 8004024:	f85d eb04 	ldr.w	lr, [sp], #4
 8004028:	b003      	add	sp, #12
 800402a:	4770      	bx	lr
 800402c:	20000014 	.word	0x20000014

08004030 <_fwalk_reent>:
 8004030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004034:	4606      	mov	r6, r0
 8004036:	4688      	mov	r8, r1
 8004038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800403c:	2700      	movs	r7, #0
 800403e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004042:	f1b9 0901 	subs.w	r9, r9, #1
 8004046:	d505      	bpl.n	8004054 <_fwalk_reent+0x24>
 8004048:	6824      	ldr	r4, [r4, #0]
 800404a:	2c00      	cmp	r4, #0
 800404c:	d1f7      	bne.n	800403e <_fwalk_reent+0xe>
 800404e:	4638      	mov	r0, r7
 8004050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004054:	89ab      	ldrh	r3, [r5, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d907      	bls.n	800406a <_fwalk_reent+0x3a>
 800405a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800405e:	3301      	adds	r3, #1
 8004060:	d003      	beq.n	800406a <_fwalk_reent+0x3a>
 8004062:	4629      	mov	r1, r5
 8004064:	4630      	mov	r0, r6
 8004066:	47c0      	blx	r8
 8004068:	4307      	orrs	r7, r0
 800406a:	3568      	adds	r5, #104	; 0x68
 800406c:	e7e9      	b.n	8004042 <_fwalk_reent+0x12>

0800406e <__swhatbuf_r>:
 800406e:	b570      	push	{r4, r5, r6, lr}
 8004070:	460e      	mov	r6, r1
 8004072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004076:	2900      	cmp	r1, #0
 8004078:	b096      	sub	sp, #88	; 0x58
 800407a:	4614      	mov	r4, r2
 800407c:	461d      	mov	r5, r3
 800407e:	da07      	bge.n	8004090 <__swhatbuf_r+0x22>
 8004080:	2300      	movs	r3, #0
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	89b3      	ldrh	r3, [r6, #12]
 8004086:	061a      	lsls	r2, r3, #24
 8004088:	d410      	bmi.n	80040ac <__swhatbuf_r+0x3e>
 800408a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800408e:	e00e      	b.n	80040ae <__swhatbuf_r+0x40>
 8004090:	466a      	mov	r2, sp
 8004092:	f000 fc6f 	bl	8004974 <_fstat_r>
 8004096:	2800      	cmp	r0, #0
 8004098:	dbf2      	blt.n	8004080 <__swhatbuf_r+0x12>
 800409a:	9a01      	ldr	r2, [sp, #4]
 800409c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040a4:	425a      	negs	r2, r3
 80040a6:	415a      	adcs	r2, r3
 80040a8:	602a      	str	r2, [r5, #0]
 80040aa:	e7ee      	b.n	800408a <__swhatbuf_r+0x1c>
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	2000      	movs	r0, #0
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	b016      	add	sp, #88	; 0x58
 80040b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080040b8 <__smakebuf_r>:
 80040b8:	898b      	ldrh	r3, [r1, #12]
 80040ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040bc:	079d      	lsls	r5, r3, #30
 80040be:	4606      	mov	r6, r0
 80040c0:	460c      	mov	r4, r1
 80040c2:	d507      	bpl.n	80040d4 <__smakebuf_r+0x1c>
 80040c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	2301      	movs	r3, #1
 80040ce:	6163      	str	r3, [r4, #20]
 80040d0:	b002      	add	sp, #8
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
 80040d4:	ab01      	add	r3, sp, #4
 80040d6:	466a      	mov	r2, sp
 80040d8:	f7ff ffc9 	bl	800406e <__swhatbuf_r>
 80040dc:	9900      	ldr	r1, [sp, #0]
 80040de:	4605      	mov	r5, r0
 80040e0:	4630      	mov	r0, r6
 80040e2:	f000 f881 	bl	80041e8 <_malloc_r>
 80040e6:	b948      	cbnz	r0, 80040fc <__smakebuf_r+0x44>
 80040e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ec:	059a      	lsls	r2, r3, #22
 80040ee:	d4ef      	bmi.n	80040d0 <__smakebuf_r+0x18>
 80040f0:	f023 0303 	bic.w	r3, r3, #3
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	81a3      	strh	r3, [r4, #12]
 80040fa:	e7e3      	b.n	80040c4 <__smakebuf_r+0xc>
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <__smakebuf_r+0x7c>)
 80040fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	6020      	str	r0, [r4, #0]
 8004104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004108:	81a3      	strh	r3, [r4, #12]
 800410a:	9b00      	ldr	r3, [sp, #0]
 800410c:	6163      	str	r3, [r4, #20]
 800410e:	9b01      	ldr	r3, [sp, #4]
 8004110:	6120      	str	r0, [r4, #16]
 8004112:	b15b      	cbz	r3, 800412c <__smakebuf_r+0x74>
 8004114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004118:	4630      	mov	r0, r6
 800411a:	f000 fc3d 	bl	8004998 <_isatty_r>
 800411e:	b128      	cbz	r0, 800412c <__smakebuf_r+0x74>
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	81a3      	strh	r3, [r4, #12]
 800412c:	89a0      	ldrh	r0, [r4, #12]
 800412e:	4305      	orrs	r5, r0
 8004130:	81a5      	strh	r5, [r4, #12]
 8004132:	e7cd      	b.n	80040d0 <__smakebuf_r+0x18>
 8004134:	08003ea9 	.word	0x08003ea9

08004138 <malloc>:
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <malloc+0xc>)
 800413a:	4601      	mov	r1, r0
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	f000 b853 	b.w	80041e8 <_malloc_r>
 8004142:	bf00      	nop
 8004144:	20000014 	.word	0x20000014

08004148 <_free_r>:
 8004148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800414a:	2900      	cmp	r1, #0
 800414c:	d048      	beq.n	80041e0 <_free_r+0x98>
 800414e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004152:	9001      	str	r0, [sp, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f1a1 0404 	sub.w	r4, r1, #4
 800415a:	bfb8      	it	lt
 800415c:	18e4      	addlt	r4, r4, r3
 800415e:	f000 fc3d 	bl	80049dc <__malloc_lock>
 8004162:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <_free_r+0x9c>)
 8004164:	9801      	ldr	r0, [sp, #4]
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	4615      	mov	r5, r2
 800416a:	b933      	cbnz	r3, 800417a <_free_r+0x32>
 800416c:	6063      	str	r3, [r4, #4]
 800416e:	6014      	str	r4, [r2, #0]
 8004170:	b003      	add	sp, #12
 8004172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004176:	f000 bc37 	b.w	80049e8 <__malloc_unlock>
 800417a:	42a3      	cmp	r3, r4
 800417c:	d90b      	bls.n	8004196 <_free_r+0x4e>
 800417e:	6821      	ldr	r1, [r4, #0]
 8004180:	1862      	adds	r2, r4, r1
 8004182:	4293      	cmp	r3, r2
 8004184:	bf04      	itt	eq
 8004186:	681a      	ldreq	r2, [r3, #0]
 8004188:	685b      	ldreq	r3, [r3, #4]
 800418a:	6063      	str	r3, [r4, #4]
 800418c:	bf04      	itt	eq
 800418e:	1852      	addeq	r2, r2, r1
 8004190:	6022      	streq	r2, [r4, #0]
 8004192:	602c      	str	r4, [r5, #0]
 8004194:	e7ec      	b.n	8004170 <_free_r+0x28>
 8004196:	461a      	mov	r2, r3
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	b10b      	cbz	r3, 80041a0 <_free_r+0x58>
 800419c:	42a3      	cmp	r3, r4
 800419e:	d9fa      	bls.n	8004196 <_free_r+0x4e>
 80041a0:	6811      	ldr	r1, [r2, #0]
 80041a2:	1855      	adds	r5, r2, r1
 80041a4:	42a5      	cmp	r5, r4
 80041a6:	d10b      	bne.n	80041c0 <_free_r+0x78>
 80041a8:	6824      	ldr	r4, [r4, #0]
 80041aa:	4421      	add	r1, r4
 80041ac:	1854      	adds	r4, r2, r1
 80041ae:	42a3      	cmp	r3, r4
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	d1dd      	bne.n	8004170 <_free_r+0x28>
 80041b4:	681c      	ldr	r4, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	6053      	str	r3, [r2, #4]
 80041ba:	4421      	add	r1, r4
 80041bc:	6011      	str	r1, [r2, #0]
 80041be:	e7d7      	b.n	8004170 <_free_r+0x28>
 80041c0:	d902      	bls.n	80041c8 <_free_r+0x80>
 80041c2:	230c      	movs	r3, #12
 80041c4:	6003      	str	r3, [r0, #0]
 80041c6:	e7d3      	b.n	8004170 <_free_r+0x28>
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	1961      	adds	r1, r4, r5
 80041cc:	428b      	cmp	r3, r1
 80041ce:	bf04      	itt	eq
 80041d0:	6819      	ldreq	r1, [r3, #0]
 80041d2:	685b      	ldreq	r3, [r3, #4]
 80041d4:	6063      	str	r3, [r4, #4]
 80041d6:	bf04      	itt	eq
 80041d8:	1949      	addeq	r1, r1, r5
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	6054      	str	r4, [r2, #4]
 80041de:	e7c7      	b.n	8004170 <_free_r+0x28>
 80041e0:	b003      	add	sp, #12
 80041e2:	bd30      	pop	{r4, r5, pc}
 80041e4:	200010bc 	.word	0x200010bc

080041e8 <_malloc_r>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	1ccd      	adds	r5, r1, #3
 80041ec:	f025 0503 	bic.w	r5, r5, #3
 80041f0:	3508      	adds	r5, #8
 80041f2:	2d0c      	cmp	r5, #12
 80041f4:	bf38      	it	cc
 80041f6:	250c      	movcc	r5, #12
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	4606      	mov	r6, r0
 80041fc:	db01      	blt.n	8004202 <_malloc_r+0x1a>
 80041fe:	42a9      	cmp	r1, r5
 8004200:	d903      	bls.n	800420a <_malloc_r+0x22>
 8004202:	230c      	movs	r3, #12
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	2000      	movs	r0, #0
 8004208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800420a:	f000 fbe7 	bl	80049dc <__malloc_lock>
 800420e:	4921      	ldr	r1, [pc, #132]	; (8004294 <_malloc_r+0xac>)
 8004210:	680a      	ldr	r2, [r1, #0]
 8004212:	4614      	mov	r4, r2
 8004214:	b99c      	cbnz	r4, 800423e <_malloc_r+0x56>
 8004216:	4f20      	ldr	r7, [pc, #128]	; (8004298 <_malloc_r+0xb0>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	b923      	cbnz	r3, 8004226 <_malloc_r+0x3e>
 800421c:	4621      	mov	r1, r4
 800421e:	4630      	mov	r0, r6
 8004220:	f000 fb2a 	bl	8004878 <_sbrk_r>
 8004224:	6038      	str	r0, [r7, #0]
 8004226:	4629      	mov	r1, r5
 8004228:	4630      	mov	r0, r6
 800422a:	f000 fb25 	bl	8004878 <_sbrk_r>
 800422e:	1c43      	adds	r3, r0, #1
 8004230:	d123      	bne.n	800427a <_malloc_r+0x92>
 8004232:	230c      	movs	r3, #12
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	4630      	mov	r0, r6
 8004238:	f000 fbd6 	bl	80049e8 <__malloc_unlock>
 800423c:	e7e3      	b.n	8004206 <_malloc_r+0x1e>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	1b5b      	subs	r3, r3, r5
 8004242:	d417      	bmi.n	8004274 <_malloc_r+0x8c>
 8004244:	2b0b      	cmp	r3, #11
 8004246:	d903      	bls.n	8004250 <_malloc_r+0x68>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	441c      	add	r4, r3
 800424c:	6025      	str	r5, [r4, #0]
 800424e:	e004      	b.n	800425a <_malloc_r+0x72>
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	42a2      	cmp	r2, r4
 8004254:	bf0c      	ite	eq
 8004256:	600b      	streq	r3, [r1, #0]
 8004258:	6053      	strne	r3, [r2, #4]
 800425a:	4630      	mov	r0, r6
 800425c:	f000 fbc4 	bl	80049e8 <__malloc_unlock>
 8004260:	f104 000b 	add.w	r0, r4, #11
 8004264:	1d23      	adds	r3, r4, #4
 8004266:	f020 0007 	bic.w	r0, r0, #7
 800426a:	1ac2      	subs	r2, r0, r3
 800426c:	d0cc      	beq.n	8004208 <_malloc_r+0x20>
 800426e:	1a1b      	subs	r3, r3, r0
 8004270:	50a3      	str	r3, [r4, r2]
 8004272:	e7c9      	b.n	8004208 <_malloc_r+0x20>
 8004274:	4622      	mov	r2, r4
 8004276:	6864      	ldr	r4, [r4, #4]
 8004278:	e7cc      	b.n	8004214 <_malloc_r+0x2c>
 800427a:	1cc4      	adds	r4, r0, #3
 800427c:	f024 0403 	bic.w	r4, r4, #3
 8004280:	42a0      	cmp	r0, r4
 8004282:	d0e3      	beq.n	800424c <_malloc_r+0x64>
 8004284:	1a21      	subs	r1, r4, r0
 8004286:	4630      	mov	r0, r6
 8004288:	f000 faf6 	bl	8004878 <_sbrk_r>
 800428c:	3001      	adds	r0, #1
 800428e:	d1dd      	bne.n	800424c <_malloc_r+0x64>
 8004290:	e7cf      	b.n	8004232 <_malloc_r+0x4a>
 8004292:	bf00      	nop
 8004294:	200010bc 	.word	0x200010bc
 8004298:	200010c0 	.word	0x200010c0

0800429c <__sfputc_r>:
 800429c:	6893      	ldr	r3, [r2, #8]
 800429e:	3b01      	subs	r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	b410      	push	{r4}
 80042a4:	6093      	str	r3, [r2, #8]
 80042a6:	da08      	bge.n	80042ba <__sfputc_r+0x1e>
 80042a8:	6994      	ldr	r4, [r2, #24]
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	db01      	blt.n	80042b2 <__sfputc_r+0x16>
 80042ae:	290a      	cmp	r1, #10
 80042b0:	d103      	bne.n	80042ba <__sfputc_r+0x1e>
 80042b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042b6:	f7ff bc33 	b.w	8003b20 <__swbuf_r>
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	1c58      	adds	r0, r3, #1
 80042be:	6010      	str	r0, [r2, #0]
 80042c0:	7019      	strb	r1, [r3, #0]
 80042c2:	4608      	mov	r0, r1
 80042c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <__sfputs_r>:
 80042ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042cc:	4606      	mov	r6, r0
 80042ce:	460f      	mov	r7, r1
 80042d0:	4614      	mov	r4, r2
 80042d2:	18d5      	adds	r5, r2, r3
 80042d4:	42ac      	cmp	r4, r5
 80042d6:	d101      	bne.n	80042dc <__sfputs_r+0x12>
 80042d8:	2000      	movs	r0, #0
 80042da:	e007      	b.n	80042ec <__sfputs_r+0x22>
 80042dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e0:	463a      	mov	r2, r7
 80042e2:	4630      	mov	r0, r6
 80042e4:	f7ff ffda 	bl	800429c <__sfputc_r>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d1f3      	bne.n	80042d4 <__sfputs_r+0xa>
 80042ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042f0 <_vfiprintf_r>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	460d      	mov	r5, r1
 80042f6:	b09d      	sub	sp, #116	; 0x74
 80042f8:	4614      	mov	r4, r2
 80042fa:	4698      	mov	r8, r3
 80042fc:	4606      	mov	r6, r0
 80042fe:	b118      	cbz	r0, 8004308 <_vfiprintf_r+0x18>
 8004300:	6983      	ldr	r3, [r0, #24]
 8004302:	b90b      	cbnz	r3, 8004308 <_vfiprintf_r+0x18>
 8004304:	f7ff fe04 	bl	8003f10 <__sinit>
 8004308:	4b89      	ldr	r3, [pc, #548]	; (8004530 <_vfiprintf_r+0x240>)
 800430a:	429d      	cmp	r5, r3
 800430c:	d11b      	bne.n	8004346 <_vfiprintf_r+0x56>
 800430e:	6875      	ldr	r5, [r6, #4]
 8004310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004312:	07d9      	lsls	r1, r3, #31
 8004314:	d405      	bmi.n	8004322 <_vfiprintf_r+0x32>
 8004316:	89ab      	ldrh	r3, [r5, #12]
 8004318:	059a      	lsls	r2, r3, #22
 800431a:	d402      	bmi.n	8004322 <_vfiprintf_r+0x32>
 800431c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800431e:	f7ff fa52 	bl	80037c6 <__retarget_lock_acquire_recursive>
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	d501      	bpl.n	800432c <_vfiprintf_r+0x3c>
 8004328:	692b      	ldr	r3, [r5, #16]
 800432a:	b9eb      	cbnz	r3, 8004368 <_vfiprintf_r+0x78>
 800432c:	4629      	mov	r1, r5
 800432e:	4630      	mov	r0, r6
 8004330:	f7ff fc48 	bl	8003bc4 <__swsetup_r>
 8004334:	b1c0      	cbz	r0, 8004368 <_vfiprintf_r+0x78>
 8004336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004338:	07dc      	lsls	r4, r3, #31
 800433a:	d50e      	bpl.n	800435a <_vfiprintf_r+0x6a>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	b01d      	add	sp, #116	; 0x74
 8004342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004346:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <_vfiprintf_r+0x244>)
 8004348:	429d      	cmp	r5, r3
 800434a:	d101      	bne.n	8004350 <_vfiprintf_r+0x60>
 800434c:	68b5      	ldr	r5, [r6, #8]
 800434e:	e7df      	b.n	8004310 <_vfiprintf_r+0x20>
 8004350:	4b79      	ldr	r3, [pc, #484]	; (8004538 <_vfiprintf_r+0x248>)
 8004352:	429d      	cmp	r5, r3
 8004354:	bf08      	it	eq
 8004356:	68f5      	ldreq	r5, [r6, #12]
 8004358:	e7da      	b.n	8004310 <_vfiprintf_r+0x20>
 800435a:	89ab      	ldrh	r3, [r5, #12]
 800435c:	0598      	lsls	r0, r3, #22
 800435e:	d4ed      	bmi.n	800433c <_vfiprintf_r+0x4c>
 8004360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004362:	f7ff fa31 	bl	80037c8 <__retarget_lock_release_recursive>
 8004366:	e7e9      	b.n	800433c <_vfiprintf_r+0x4c>
 8004368:	2300      	movs	r3, #0
 800436a:	9309      	str	r3, [sp, #36]	; 0x24
 800436c:	2320      	movs	r3, #32
 800436e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004372:	f8cd 800c 	str.w	r8, [sp, #12]
 8004376:	2330      	movs	r3, #48	; 0x30
 8004378:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800453c <_vfiprintf_r+0x24c>
 800437c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004380:	f04f 0901 	mov.w	r9, #1
 8004384:	4623      	mov	r3, r4
 8004386:	469a      	mov	sl, r3
 8004388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800438c:	b10a      	cbz	r2, 8004392 <_vfiprintf_r+0xa2>
 800438e:	2a25      	cmp	r2, #37	; 0x25
 8004390:	d1f9      	bne.n	8004386 <_vfiprintf_r+0x96>
 8004392:	ebba 0b04 	subs.w	fp, sl, r4
 8004396:	d00b      	beq.n	80043b0 <_vfiprintf_r+0xc0>
 8004398:	465b      	mov	r3, fp
 800439a:	4622      	mov	r2, r4
 800439c:	4629      	mov	r1, r5
 800439e:	4630      	mov	r0, r6
 80043a0:	f7ff ff93 	bl	80042ca <__sfputs_r>
 80043a4:	3001      	adds	r0, #1
 80043a6:	f000 80aa 	beq.w	80044fe <_vfiprintf_r+0x20e>
 80043aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043ac:	445a      	add	r2, fp
 80043ae:	9209      	str	r2, [sp, #36]	; 0x24
 80043b0:	f89a 3000 	ldrb.w	r3, [sl]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80a2 	beq.w	80044fe <_vfiprintf_r+0x20e>
 80043ba:	2300      	movs	r3, #0
 80043bc:	f04f 32ff 	mov.w	r2, #4294967295
 80043c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043c4:	f10a 0a01 	add.w	sl, sl, #1
 80043c8:	9304      	str	r3, [sp, #16]
 80043ca:	9307      	str	r3, [sp, #28]
 80043cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043d0:	931a      	str	r3, [sp, #104]	; 0x68
 80043d2:	4654      	mov	r4, sl
 80043d4:	2205      	movs	r2, #5
 80043d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043da:	4858      	ldr	r0, [pc, #352]	; (800453c <_vfiprintf_r+0x24c>)
 80043dc:	f7fb ff18 	bl	8000210 <memchr>
 80043e0:	9a04      	ldr	r2, [sp, #16]
 80043e2:	b9d8      	cbnz	r0, 800441c <_vfiprintf_r+0x12c>
 80043e4:	06d1      	lsls	r1, r2, #27
 80043e6:	bf44      	itt	mi
 80043e8:	2320      	movmi	r3, #32
 80043ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ee:	0713      	lsls	r3, r2, #28
 80043f0:	bf44      	itt	mi
 80043f2:	232b      	movmi	r3, #43	; 0x2b
 80043f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043f8:	f89a 3000 	ldrb.w	r3, [sl]
 80043fc:	2b2a      	cmp	r3, #42	; 0x2a
 80043fe:	d015      	beq.n	800442c <_vfiprintf_r+0x13c>
 8004400:	9a07      	ldr	r2, [sp, #28]
 8004402:	4654      	mov	r4, sl
 8004404:	2000      	movs	r0, #0
 8004406:	f04f 0c0a 	mov.w	ip, #10
 800440a:	4621      	mov	r1, r4
 800440c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004410:	3b30      	subs	r3, #48	; 0x30
 8004412:	2b09      	cmp	r3, #9
 8004414:	d94e      	bls.n	80044b4 <_vfiprintf_r+0x1c4>
 8004416:	b1b0      	cbz	r0, 8004446 <_vfiprintf_r+0x156>
 8004418:	9207      	str	r2, [sp, #28]
 800441a:	e014      	b.n	8004446 <_vfiprintf_r+0x156>
 800441c:	eba0 0308 	sub.w	r3, r0, r8
 8004420:	fa09 f303 	lsl.w	r3, r9, r3
 8004424:	4313      	orrs	r3, r2
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	46a2      	mov	sl, r4
 800442a:	e7d2      	b.n	80043d2 <_vfiprintf_r+0xe2>
 800442c:	9b03      	ldr	r3, [sp, #12]
 800442e:	1d19      	adds	r1, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	9103      	str	r1, [sp, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	bfbb      	ittet	lt
 8004438:	425b      	neglt	r3, r3
 800443a:	f042 0202 	orrlt.w	r2, r2, #2
 800443e:	9307      	strge	r3, [sp, #28]
 8004440:	9307      	strlt	r3, [sp, #28]
 8004442:	bfb8      	it	lt
 8004444:	9204      	strlt	r2, [sp, #16]
 8004446:	7823      	ldrb	r3, [r4, #0]
 8004448:	2b2e      	cmp	r3, #46	; 0x2e
 800444a:	d10c      	bne.n	8004466 <_vfiprintf_r+0x176>
 800444c:	7863      	ldrb	r3, [r4, #1]
 800444e:	2b2a      	cmp	r3, #42	; 0x2a
 8004450:	d135      	bne.n	80044be <_vfiprintf_r+0x1ce>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	1d1a      	adds	r2, r3, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	9203      	str	r2, [sp, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfb8      	it	lt
 800445e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004462:	3402      	adds	r4, #2
 8004464:	9305      	str	r3, [sp, #20]
 8004466:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800454c <_vfiprintf_r+0x25c>
 800446a:	7821      	ldrb	r1, [r4, #0]
 800446c:	2203      	movs	r2, #3
 800446e:	4650      	mov	r0, sl
 8004470:	f7fb fece 	bl	8000210 <memchr>
 8004474:	b140      	cbz	r0, 8004488 <_vfiprintf_r+0x198>
 8004476:	2340      	movs	r3, #64	; 0x40
 8004478:	eba0 000a 	sub.w	r0, r0, sl
 800447c:	fa03 f000 	lsl.w	r0, r3, r0
 8004480:	9b04      	ldr	r3, [sp, #16]
 8004482:	4303      	orrs	r3, r0
 8004484:	3401      	adds	r4, #1
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800448c:	482c      	ldr	r0, [pc, #176]	; (8004540 <_vfiprintf_r+0x250>)
 800448e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004492:	2206      	movs	r2, #6
 8004494:	f7fb febc 	bl	8000210 <memchr>
 8004498:	2800      	cmp	r0, #0
 800449a:	d03f      	beq.n	800451c <_vfiprintf_r+0x22c>
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <_vfiprintf_r+0x254>)
 800449e:	bb1b      	cbnz	r3, 80044e8 <_vfiprintf_r+0x1f8>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	3307      	adds	r3, #7
 80044a4:	f023 0307 	bic.w	r3, r3, #7
 80044a8:	3308      	adds	r3, #8
 80044aa:	9303      	str	r3, [sp, #12]
 80044ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ae:	443b      	add	r3, r7
 80044b0:	9309      	str	r3, [sp, #36]	; 0x24
 80044b2:	e767      	b.n	8004384 <_vfiprintf_r+0x94>
 80044b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80044b8:	460c      	mov	r4, r1
 80044ba:	2001      	movs	r0, #1
 80044bc:	e7a5      	b.n	800440a <_vfiprintf_r+0x11a>
 80044be:	2300      	movs	r3, #0
 80044c0:	3401      	adds	r4, #1
 80044c2:	9305      	str	r3, [sp, #20]
 80044c4:	4619      	mov	r1, r3
 80044c6:	f04f 0c0a 	mov.w	ip, #10
 80044ca:	4620      	mov	r0, r4
 80044cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d0:	3a30      	subs	r2, #48	; 0x30
 80044d2:	2a09      	cmp	r2, #9
 80044d4:	d903      	bls.n	80044de <_vfiprintf_r+0x1ee>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0c5      	beq.n	8004466 <_vfiprintf_r+0x176>
 80044da:	9105      	str	r1, [sp, #20]
 80044dc:	e7c3      	b.n	8004466 <_vfiprintf_r+0x176>
 80044de:	fb0c 2101 	mla	r1, ip, r1, r2
 80044e2:	4604      	mov	r4, r0
 80044e4:	2301      	movs	r3, #1
 80044e6:	e7f0      	b.n	80044ca <_vfiprintf_r+0x1da>
 80044e8:	ab03      	add	r3, sp, #12
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	462a      	mov	r2, r5
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <_vfiprintf_r+0x258>)
 80044f0:	a904      	add	r1, sp, #16
 80044f2:	4630      	mov	r0, r6
 80044f4:	f3af 8000 	nop.w
 80044f8:	4607      	mov	r7, r0
 80044fa:	1c78      	adds	r0, r7, #1
 80044fc:	d1d6      	bne.n	80044ac <_vfiprintf_r+0x1bc>
 80044fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004500:	07d9      	lsls	r1, r3, #31
 8004502:	d405      	bmi.n	8004510 <_vfiprintf_r+0x220>
 8004504:	89ab      	ldrh	r3, [r5, #12]
 8004506:	059a      	lsls	r2, r3, #22
 8004508:	d402      	bmi.n	8004510 <_vfiprintf_r+0x220>
 800450a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800450c:	f7ff f95c 	bl	80037c8 <__retarget_lock_release_recursive>
 8004510:	89ab      	ldrh	r3, [r5, #12]
 8004512:	065b      	lsls	r3, r3, #25
 8004514:	f53f af12 	bmi.w	800433c <_vfiprintf_r+0x4c>
 8004518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800451a:	e711      	b.n	8004340 <_vfiprintf_r+0x50>
 800451c:	ab03      	add	r3, sp, #12
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	462a      	mov	r2, r5
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <_vfiprintf_r+0x258>)
 8004524:	a904      	add	r1, sp, #16
 8004526:	4630      	mov	r0, r6
 8004528:	f000 f880 	bl	800462c <_printf_i>
 800452c:	e7e4      	b.n	80044f8 <_vfiprintf_r+0x208>
 800452e:	bf00      	nop
 8004530:	08004d94 	.word	0x08004d94
 8004534:	08004db4 	.word	0x08004db4
 8004538:	08004d74 	.word	0x08004d74
 800453c:	08004dd4 	.word	0x08004dd4
 8004540:	08004dde 	.word	0x08004dde
 8004544:	00000000 	.word	0x00000000
 8004548:	080042cb 	.word	0x080042cb
 800454c:	08004dda 	.word	0x08004dda

08004550 <_printf_common>:
 8004550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	4616      	mov	r6, r2
 8004556:	4699      	mov	r9, r3
 8004558:	688a      	ldr	r2, [r1, #8]
 800455a:	690b      	ldr	r3, [r1, #16]
 800455c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004560:	4293      	cmp	r3, r2
 8004562:	bfb8      	it	lt
 8004564:	4613      	movlt	r3, r2
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800456c:	4607      	mov	r7, r0
 800456e:	460c      	mov	r4, r1
 8004570:	b10a      	cbz	r2, 8004576 <_printf_common+0x26>
 8004572:	3301      	adds	r3, #1
 8004574:	6033      	str	r3, [r6, #0]
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	0699      	lsls	r1, r3, #26
 800457a:	bf42      	ittt	mi
 800457c:	6833      	ldrmi	r3, [r6, #0]
 800457e:	3302      	addmi	r3, #2
 8004580:	6033      	strmi	r3, [r6, #0]
 8004582:	6825      	ldr	r5, [r4, #0]
 8004584:	f015 0506 	ands.w	r5, r5, #6
 8004588:	d106      	bne.n	8004598 <_printf_common+0x48>
 800458a:	f104 0a19 	add.w	sl, r4, #25
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	6832      	ldr	r2, [r6, #0]
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	42ab      	cmp	r3, r5
 8004596:	dc26      	bgt.n	80045e6 <_printf_common+0x96>
 8004598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800459c:	1e13      	subs	r3, r2, #0
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	0692      	lsls	r2, r2, #26
 80045a6:	d42b      	bmi.n	8004600 <_printf_common+0xb0>
 80045a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ac:	4649      	mov	r1, r9
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c0      	blx	r8
 80045b2:	3001      	adds	r0, #1
 80045b4:	d01e      	beq.n	80045f4 <_printf_common+0xa4>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	68e5      	ldr	r5, [r4, #12]
 80045ba:	6832      	ldr	r2, [r6, #0]
 80045bc:	f003 0306 	and.w	r3, r3, #6
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	bf08      	it	eq
 80045c4:	1aad      	subeq	r5, r5, r2
 80045c6:	68a3      	ldr	r3, [r4, #8]
 80045c8:	6922      	ldr	r2, [r4, #16]
 80045ca:	bf0c      	ite	eq
 80045cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d0:	2500      	movne	r5, #0
 80045d2:	4293      	cmp	r3, r2
 80045d4:	bfc4      	itt	gt
 80045d6:	1a9b      	subgt	r3, r3, r2
 80045d8:	18ed      	addgt	r5, r5, r3
 80045da:	2600      	movs	r6, #0
 80045dc:	341a      	adds	r4, #26
 80045de:	42b5      	cmp	r5, r6
 80045e0:	d11a      	bne.n	8004618 <_printf_common+0xc8>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e008      	b.n	80045f8 <_printf_common+0xa8>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4652      	mov	r2, sl
 80045ea:	4649      	mov	r1, r9
 80045ec:	4638      	mov	r0, r7
 80045ee:	47c0      	blx	r8
 80045f0:	3001      	adds	r0, #1
 80045f2:	d103      	bne.n	80045fc <_printf_common+0xac>
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fc:	3501      	adds	r5, #1
 80045fe:	e7c6      	b.n	800458e <_printf_common+0x3e>
 8004600:	18e1      	adds	r1, r4, r3
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	2030      	movs	r0, #48	; 0x30
 8004606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800460a:	4422      	add	r2, r4
 800460c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004614:	3302      	adds	r3, #2
 8004616:	e7c7      	b.n	80045a8 <_printf_common+0x58>
 8004618:	2301      	movs	r3, #1
 800461a:	4622      	mov	r2, r4
 800461c:	4649      	mov	r1, r9
 800461e:	4638      	mov	r0, r7
 8004620:	47c0      	blx	r8
 8004622:	3001      	adds	r0, #1
 8004624:	d0e6      	beq.n	80045f4 <_printf_common+0xa4>
 8004626:	3601      	adds	r6, #1
 8004628:	e7d9      	b.n	80045de <_printf_common+0x8e>
	...

0800462c <_printf_i>:
 800462c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	460c      	mov	r4, r1
 8004632:	4691      	mov	r9, r2
 8004634:	7e27      	ldrb	r7, [r4, #24]
 8004636:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004638:	2f78      	cmp	r7, #120	; 0x78
 800463a:	4680      	mov	r8, r0
 800463c:	469a      	mov	sl, r3
 800463e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004642:	d807      	bhi.n	8004654 <_printf_i+0x28>
 8004644:	2f62      	cmp	r7, #98	; 0x62
 8004646:	d80a      	bhi.n	800465e <_printf_i+0x32>
 8004648:	2f00      	cmp	r7, #0
 800464a:	f000 80d8 	beq.w	80047fe <_printf_i+0x1d2>
 800464e:	2f58      	cmp	r7, #88	; 0x58
 8004650:	f000 80a3 	beq.w	800479a <_printf_i+0x16e>
 8004654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800465c:	e03a      	b.n	80046d4 <_printf_i+0xa8>
 800465e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004662:	2b15      	cmp	r3, #21
 8004664:	d8f6      	bhi.n	8004654 <_printf_i+0x28>
 8004666:	a001      	add	r0, pc, #4	; (adr r0, 800466c <_printf_i+0x40>)
 8004668:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046d9 	.word	0x080046d9
 8004674:	08004655 	.word	0x08004655
 8004678:	08004655 	.word	0x08004655
 800467c:	08004655 	.word	0x08004655
 8004680:	08004655 	.word	0x08004655
 8004684:	080046d9 	.word	0x080046d9
 8004688:	08004655 	.word	0x08004655
 800468c:	08004655 	.word	0x08004655
 8004690:	08004655 	.word	0x08004655
 8004694:	08004655 	.word	0x08004655
 8004698:	080047e5 	.word	0x080047e5
 800469c:	08004709 	.word	0x08004709
 80046a0:	080047c7 	.word	0x080047c7
 80046a4:	08004655 	.word	0x08004655
 80046a8:	08004655 	.word	0x08004655
 80046ac:	08004807 	.word	0x08004807
 80046b0:	08004655 	.word	0x08004655
 80046b4:	08004709 	.word	0x08004709
 80046b8:	08004655 	.word	0x08004655
 80046bc:	08004655 	.word	0x08004655
 80046c0:	080047cf 	.word	0x080047cf
 80046c4:	680b      	ldr	r3, [r1, #0]
 80046c6:	1d1a      	adds	r2, r3, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	600a      	str	r2, [r1, #0]
 80046cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0a3      	b.n	8004820 <_printf_i+0x1f4>
 80046d8:	6825      	ldr	r5, [r4, #0]
 80046da:	6808      	ldr	r0, [r1, #0]
 80046dc:	062e      	lsls	r6, r5, #24
 80046de:	f100 0304 	add.w	r3, r0, #4
 80046e2:	d50a      	bpl.n	80046fa <_printf_i+0xce>
 80046e4:	6805      	ldr	r5, [r0, #0]
 80046e6:	600b      	str	r3, [r1, #0]
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	da03      	bge.n	80046f4 <_printf_i+0xc8>
 80046ec:	232d      	movs	r3, #45	; 0x2d
 80046ee:	426d      	negs	r5, r5
 80046f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f4:	485e      	ldr	r0, [pc, #376]	; (8004870 <_printf_i+0x244>)
 80046f6:	230a      	movs	r3, #10
 80046f8:	e019      	b.n	800472e <_printf_i+0x102>
 80046fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046fe:	6805      	ldr	r5, [r0, #0]
 8004700:	600b      	str	r3, [r1, #0]
 8004702:	bf18      	it	ne
 8004704:	b22d      	sxthne	r5, r5
 8004706:	e7ef      	b.n	80046e8 <_printf_i+0xbc>
 8004708:	680b      	ldr	r3, [r1, #0]
 800470a:	6825      	ldr	r5, [r4, #0]
 800470c:	1d18      	adds	r0, r3, #4
 800470e:	6008      	str	r0, [r1, #0]
 8004710:	0628      	lsls	r0, r5, #24
 8004712:	d501      	bpl.n	8004718 <_printf_i+0xec>
 8004714:	681d      	ldr	r5, [r3, #0]
 8004716:	e002      	b.n	800471e <_printf_i+0xf2>
 8004718:	0669      	lsls	r1, r5, #25
 800471a:	d5fb      	bpl.n	8004714 <_printf_i+0xe8>
 800471c:	881d      	ldrh	r5, [r3, #0]
 800471e:	4854      	ldr	r0, [pc, #336]	; (8004870 <_printf_i+0x244>)
 8004720:	2f6f      	cmp	r7, #111	; 0x6f
 8004722:	bf0c      	ite	eq
 8004724:	2308      	moveq	r3, #8
 8004726:	230a      	movne	r3, #10
 8004728:	2100      	movs	r1, #0
 800472a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800472e:	6866      	ldr	r6, [r4, #4]
 8004730:	60a6      	str	r6, [r4, #8]
 8004732:	2e00      	cmp	r6, #0
 8004734:	bfa2      	ittt	ge
 8004736:	6821      	ldrge	r1, [r4, #0]
 8004738:	f021 0104 	bicge.w	r1, r1, #4
 800473c:	6021      	strge	r1, [r4, #0]
 800473e:	b90d      	cbnz	r5, 8004744 <_printf_i+0x118>
 8004740:	2e00      	cmp	r6, #0
 8004742:	d04d      	beq.n	80047e0 <_printf_i+0x1b4>
 8004744:	4616      	mov	r6, r2
 8004746:	fbb5 f1f3 	udiv	r1, r5, r3
 800474a:	fb03 5711 	mls	r7, r3, r1, r5
 800474e:	5dc7      	ldrb	r7, [r0, r7]
 8004750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004754:	462f      	mov	r7, r5
 8004756:	42bb      	cmp	r3, r7
 8004758:	460d      	mov	r5, r1
 800475a:	d9f4      	bls.n	8004746 <_printf_i+0x11a>
 800475c:	2b08      	cmp	r3, #8
 800475e:	d10b      	bne.n	8004778 <_printf_i+0x14c>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	07df      	lsls	r7, r3, #31
 8004764:	d508      	bpl.n	8004778 <_printf_i+0x14c>
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	6861      	ldr	r1, [r4, #4]
 800476a:	4299      	cmp	r1, r3
 800476c:	bfde      	ittt	le
 800476e:	2330      	movle	r3, #48	; 0x30
 8004770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004778:	1b92      	subs	r2, r2, r6
 800477a:	6122      	str	r2, [r4, #16]
 800477c:	f8cd a000 	str.w	sl, [sp]
 8004780:	464b      	mov	r3, r9
 8004782:	aa03      	add	r2, sp, #12
 8004784:	4621      	mov	r1, r4
 8004786:	4640      	mov	r0, r8
 8004788:	f7ff fee2 	bl	8004550 <_printf_common>
 800478c:	3001      	adds	r0, #1
 800478e:	d14c      	bne.n	800482a <_printf_i+0x1fe>
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	b004      	add	sp, #16
 8004796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479a:	4835      	ldr	r0, [pc, #212]	; (8004870 <_printf_i+0x244>)
 800479c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	680e      	ldr	r6, [r1, #0]
 80047a4:	061f      	lsls	r7, r3, #24
 80047a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80047aa:	600e      	str	r6, [r1, #0]
 80047ac:	d514      	bpl.n	80047d8 <_printf_i+0x1ac>
 80047ae:	07d9      	lsls	r1, r3, #31
 80047b0:	bf44      	itt	mi
 80047b2:	f043 0320 	orrmi.w	r3, r3, #32
 80047b6:	6023      	strmi	r3, [r4, #0]
 80047b8:	b91d      	cbnz	r5, 80047c2 <_printf_i+0x196>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	f023 0320 	bic.w	r3, r3, #32
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	2310      	movs	r3, #16
 80047c4:	e7b0      	b.n	8004728 <_printf_i+0xfc>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	f043 0320 	orr.w	r3, r3, #32
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	2378      	movs	r3, #120	; 0x78
 80047d0:	4828      	ldr	r0, [pc, #160]	; (8004874 <_printf_i+0x248>)
 80047d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047d6:	e7e3      	b.n	80047a0 <_printf_i+0x174>
 80047d8:	065e      	lsls	r6, r3, #25
 80047da:	bf48      	it	mi
 80047dc:	b2ad      	uxthmi	r5, r5
 80047de:	e7e6      	b.n	80047ae <_printf_i+0x182>
 80047e0:	4616      	mov	r6, r2
 80047e2:	e7bb      	b.n	800475c <_printf_i+0x130>
 80047e4:	680b      	ldr	r3, [r1, #0]
 80047e6:	6826      	ldr	r6, [r4, #0]
 80047e8:	6960      	ldr	r0, [r4, #20]
 80047ea:	1d1d      	adds	r5, r3, #4
 80047ec:	600d      	str	r5, [r1, #0]
 80047ee:	0635      	lsls	r5, r6, #24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	d501      	bpl.n	80047f8 <_printf_i+0x1cc>
 80047f4:	6018      	str	r0, [r3, #0]
 80047f6:	e002      	b.n	80047fe <_printf_i+0x1d2>
 80047f8:	0671      	lsls	r1, r6, #25
 80047fa:	d5fb      	bpl.n	80047f4 <_printf_i+0x1c8>
 80047fc:	8018      	strh	r0, [r3, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	4616      	mov	r6, r2
 8004804:	e7ba      	b.n	800477c <_printf_i+0x150>
 8004806:	680b      	ldr	r3, [r1, #0]
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	600a      	str	r2, [r1, #0]
 800480c:	681e      	ldr	r6, [r3, #0]
 800480e:	6862      	ldr	r2, [r4, #4]
 8004810:	2100      	movs	r1, #0
 8004812:	4630      	mov	r0, r6
 8004814:	f7fb fcfc 	bl	8000210 <memchr>
 8004818:	b108      	cbz	r0, 800481e <_printf_i+0x1f2>
 800481a:	1b80      	subs	r0, r0, r6
 800481c:	6060      	str	r0, [r4, #4]
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	2300      	movs	r3, #0
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004828:	e7a8      	b.n	800477c <_printf_i+0x150>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	4632      	mov	r2, r6
 800482e:	4649      	mov	r1, r9
 8004830:	4640      	mov	r0, r8
 8004832:	47d0      	blx	sl
 8004834:	3001      	adds	r0, #1
 8004836:	d0ab      	beq.n	8004790 <_printf_i+0x164>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	079b      	lsls	r3, r3, #30
 800483c:	d413      	bmi.n	8004866 <_printf_i+0x23a>
 800483e:	68e0      	ldr	r0, [r4, #12]
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	4298      	cmp	r0, r3
 8004844:	bfb8      	it	lt
 8004846:	4618      	movlt	r0, r3
 8004848:	e7a4      	b.n	8004794 <_printf_i+0x168>
 800484a:	2301      	movs	r3, #1
 800484c:	4632      	mov	r2, r6
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	47d0      	blx	sl
 8004854:	3001      	adds	r0, #1
 8004856:	d09b      	beq.n	8004790 <_printf_i+0x164>
 8004858:	3501      	adds	r5, #1
 800485a:	68e3      	ldr	r3, [r4, #12]
 800485c:	9903      	ldr	r1, [sp, #12]
 800485e:	1a5b      	subs	r3, r3, r1
 8004860:	42ab      	cmp	r3, r5
 8004862:	dcf2      	bgt.n	800484a <_printf_i+0x21e>
 8004864:	e7eb      	b.n	800483e <_printf_i+0x212>
 8004866:	2500      	movs	r5, #0
 8004868:	f104 0619 	add.w	r6, r4, #25
 800486c:	e7f5      	b.n	800485a <_printf_i+0x22e>
 800486e:	bf00      	nop
 8004870:	08004de5 	.word	0x08004de5
 8004874:	08004df6 	.word	0x08004df6

08004878 <_sbrk_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4d06      	ldr	r5, [pc, #24]	; (8004894 <_sbrk_r+0x1c>)
 800487c:	2300      	movs	r3, #0
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	f7fd f88a 	bl	800199c <_sbrk>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_sbrk_r+0x1a>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_sbrk_r+0x1a>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200015d0 	.word	0x200015d0

08004898 <__sread>:
 8004898:	b510      	push	{r4, lr}
 800489a:	460c      	mov	r4, r1
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	f000 f8a8 	bl	80049f4 <_read_r>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	bfab      	itete	ge
 80048a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048aa:	89a3      	ldrhlt	r3, [r4, #12]
 80048ac:	181b      	addge	r3, r3, r0
 80048ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048b2:	bfac      	ite	ge
 80048b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048b6:	81a3      	strhlt	r3, [r4, #12]
 80048b8:	bd10      	pop	{r4, pc}

080048ba <__swrite>:
 80048ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	461f      	mov	r7, r3
 80048c0:	898b      	ldrh	r3, [r1, #12]
 80048c2:	05db      	lsls	r3, r3, #23
 80048c4:	4605      	mov	r5, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	4616      	mov	r6, r2
 80048ca:	d505      	bpl.n	80048d8 <__swrite+0x1e>
 80048cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d0:	2302      	movs	r3, #2
 80048d2:	2200      	movs	r2, #0
 80048d4:	f000 f870 	bl	80049b8 <_lseek_r>
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048e2:	81a3      	strh	r3, [r4, #12]
 80048e4:	4632      	mov	r2, r6
 80048e6:	463b      	mov	r3, r7
 80048e8:	4628      	mov	r0, r5
 80048ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ee:	f000 b817 	b.w	8004920 <_write_r>

080048f2 <__sseek>:
 80048f2:	b510      	push	{r4, lr}
 80048f4:	460c      	mov	r4, r1
 80048f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fa:	f000 f85d 	bl	80049b8 <_lseek_r>
 80048fe:	1c43      	adds	r3, r0, #1
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	bf15      	itete	ne
 8004904:	6560      	strne	r0, [r4, #84]	; 0x54
 8004906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800490a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800490e:	81a3      	strheq	r3, [r4, #12]
 8004910:	bf18      	it	ne
 8004912:	81a3      	strhne	r3, [r4, #12]
 8004914:	bd10      	pop	{r4, pc}

08004916 <__sclose>:
 8004916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491a:	f000 b81b 	b.w	8004954 <_close_r>
	...

08004920 <_write_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4d07      	ldr	r5, [pc, #28]	; (8004940 <_write_r+0x20>)
 8004924:	4604      	mov	r4, r0
 8004926:	4608      	mov	r0, r1
 8004928:	4611      	mov	r1, r2
 800492a:	2200      	movs	r2, #0
 800492c:	602a      	str	r2, [r5, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	f7fd f932 	bl	8001b98 <_write>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_write_r+0x1e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_write_r+0x1e>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	200015d0 	.word	0x200015d0

08004944 <abort>:
 8004944:	b508      	push	{r3, lr}
 8004946:	2006      	movs	r0, #6
 8004948:	f000 f88e 	bl	8004a68 <raise>
 800494c:	2001      	movs	r0, #1
 800494e:	f7fc ffe7 	bl	8001920 <_exit>
	...

08004954 <_close_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4d06      	ldr	r5, [pc, #24]	; (8004970 <_close_r+0x1c>)
 8004958:	2300      	movs	r3, #0
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	f7fc ffe8 	bl	8001934 <_close>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_close_r+0x1a>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_close_r+0x1a>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	200015d0 	.word	0x200015d0

08004974 <_fstat_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4d07      	ldr	r5, [pc, #28]	; (8004994 <_fstat_r+0x20>)
 8004978:	2300      	movs	r3, #0
 800497a:	4604      	mov	r4, r0
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	f7fc ffe3 	bl	800194c <_fstat>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	d102      	bne.n	8004990 <_fstat_r+0x1c>
 800498a:	682b      	ldr	r3, [r5, #0]
 800498c:	b103      	cbz	r3, 8004990 <_fstat_r+0x1c>
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	bd38      	pop	{r3, r4, r5, pc}
 8004992:	bf00      	nop
 8004994:	200015d0 	.word	0x200015d0

08004998 <_isatty_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4d06      	ldr	r5, [pc, #24]	; (80049b4 <_isatty_r+0x1c>)
 800499c:	2300      	movs	r3, #0
 800499e:	4604      	mov	r4, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	602b      	str	r3, [r5, #0]
 80049a4:	f7fc ffe2 	bl	800196c <_isatty>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d102      	bne.n	80049b2 <_isatty_r+0x1a>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	b103      	cbz	r3, 80049b2 <_isatty_r+0x1a>
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	200015d0 	.word	0x200015d0

080049b8 <_lseek_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4d07      	ldr	r5, [pc, #28]	; (80049d8 <_lseek_r+0x20>)
 80049bc:	4604      	mov	r4, r0
 80049be:	4608      	mov	r0, r1
 80049c0:	4611      	mov	r1, r2
 80049c2:	2200      	movs	r2, #0
 80049c4:	602a      	str	r2, [r5, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f7fc ffdb 	bl	8001982 <_lseek>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d102      	bne.n	80049d6 <_lseek_r+0x1e>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	b103      	cbz	r3, 80049d6 <_lseek_r+0x1e>
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	200015d0 	.word	0x200015d0

080049dc <__malloc_lock>:
 80049dc:	4801      	ldr	r0, [pc, #4]	; (80049e4 <__malloc_lock+0x8>)
 80049de:	f7fe bef2 	b.w	80037c6 <__retarget_lock_acquire_recursive>
 80049e2:	bf00      	nop
 80049e4:	200015c8 	.word	0x200015c8

080049e8 <__malloc_unlock>:
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <__malloc_unlock+0x8>)
 80049ea:	f7fe beed 	b.w	80037c8 <__retarget_lock_release_recursive>
 80049ee:	bf00      	nop
 80049f0:	200015c8 	.word	0x200015c8

080049f4 <_read_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4d07      	ldr	r5, [pc, #28]	; (8004a14 <_read_r+0x20>)
 80049f8:	4604      	mov	r4, r0
 80049fa:	4608      	mov	r0, r1
 80049fc:	4611      	mov	r1, r2
 80049fe:	2200      	movs	r2, #0
 8004a00:	602a      	str	r2, [r5, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f7fd f896 	bl	8001b34 <_read>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_read_r+0x1e>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_read_r+0x1e>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	200015d0 	.word	0x200015d0

08004a18 <_raise_r>:
 8004a18:	291f      	cmp	r1, #31
 8004a1a:	b538      	push	{r3, r4, r5, lr}
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	460d      	mov	r5, r1
 8004a20:	d904      	bls.n	8004a2c <_raise_r+0x14>
 8004a22:	2316      	movs	r3, #22
 8004a24:	6003      	str	r3, [r0, #0]
 8004a26:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a2e:	b112      	cbz	r2, 8004a36 <_raise_r+0x1e>
 8004a30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a34:	b94b      	cbnz	r3, 8004a4a <_raise_r+0x32>
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 f830 	bl	8004a9c <_getpid_r>
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	4601      	mov	r1, r0
 8004a40:	4620      	mov	r0, r4
 8004a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a46:	f000 b817 	b.w	8004a78 <_kill_r>
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d00a      	beq.n	8004a64 <_raise_r+0x4c>
 8004a4e:	1c59      	adds	r1, r3, #1
 8004a50:	d103      	bne.n	8004a5a <_raise_r+0x42>
 8004a52:	2316      	movs	r3, #22
 8004a54:	6003      	str	r3, [r0, #0]
 8004a56:	2001      	movs	r0, #1
 8004a58:	e7e7      	b.n	8004a2a <_raise_r+0x12>
 8004a5a:	2400      	movs	r4, #0
 8004a5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a60:	4628      	mov	r0, r5
 8004a62:	4798      	blx	r3
 8004a64:	2000      	movs	r0, #0
 8004a66:	e7e0      	b.n	8004a2a <_raise_r+0x12>

08004a68 <raise>:
 8004a68:	4b02      	ldr	r3, [pc, #8]	; (8004a74 <raise+0xc>)
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	f7ff bfd3 	b.w	8004a18 <_raise_r>
 8004a72:	bf00      	nop
 8004a74:	20000014 	.word	0x20000014

08004a78 <_kill_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d07      	ldr	r5, [pc, #28]	; (8004a98 <_kill_r+0x20>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4604      	mov	r4, r0
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	f7fc ff3b 	bl	8001900 <_kill>
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	d102      	bne.n	8004a94 <_kill_r+0x1c>
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	b103      	cbz	r3, 8004a94 <_kill_r+0x1c>
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	bd38      	pop	{r3, r4, r5, pc}
 8004a96:	bf00      	nop
 8004a98:	200015d0 	.word	0x200015d0

08004a9c <_getpid_r>:
 8004a9c:	f7fc bf28 	b.w	80018f0 <_getpid>

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
